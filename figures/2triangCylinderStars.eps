%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 2triangCylinderStars.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Vincent Pilaud
%%CreationDate: 29/10/12
%%BoundingBox: 0 0 574 288
%%HiResBoundingBox: 0 0 573.9941 287.0005
%%CropBox: 0 0 573.9941 287.0005
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 14174 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD1FFFA8FD3FFFA8FD38FFA8FFFD06A87DFD06A8FFA8FD2FFFA8FF%FD06A87DFD06A8FFA8FD2CFFA8FFA8A87DA87DA87DA87DA87DA87DA87DFD%04A8FD2BFFA8FFA8A87DA87DA87DA87DA87DA87DA87DFD04A8FD28FFA8FF%A8A87DA8FD047D597D527D527D52FD067DA87DA8A8FFA8FD23FFA8FFA8A8%7DA8FD047D597D527D527D52FD067DA87DA8A8FFA8FD22FFA8FFA8A87DA8%7D7D527D5276767D6F6F7C7C527C52FD047DA87DA8A8FD23FFA8FFA8A87D%A87D7D537D527C76A16F757C7C527D52FD047DA87DA8A8FD20FFA8FFA8A8%FD047D5253527676A7A7CFC3BCBCC3A8CAA1A051FD0452FD047DA8A8FD1D%FFA8FFA8A8FD047D5259527675A0A0C99AB5B5C2C8C9A0A051FD0452FD04%7DA8A8FD1EFFA8A87D7D527D527DA1CACFFFFFFFCAC3CAFFC3CAFD04FFA7%A77D5252FD047DA8A8FD1DFFA8A87D7D527D527D7CC9C8C9C9C9A1A1BCBD%94C3CDCECECEA6A77D5252FD047DA8A8FD1AFFA8A8FD047D52527DCAC9FD%05FFC3CAC3FFFFCAC4C3CAFFFFFFCACFA77D5252527D7DA87DA8A8FD17FF%A8A8FD047D52527DCAC9C9C2C9C9C99A849ABDBCBC4EA1C8CECECEC8CEA7%7D5252527D7DA87DA8A8FD16FFFD04A87D7D527DCAFFCFFD05FFC3FFCAFD%04FFCAFFC3CAFD04FFCFCAFF7D52527D7DA8A8FD17FFFD04A87D7D527DFF%CFFD06C99A67A1BCBCC3BC9B55C3CDFD05CECAFF7D52527D7DA8A8FD16FF%A8A87D7D7D5252FFFFCACAFD05FFC3FFCACAFFFFCAFFC3CAFFC3CBFD04FF%CFC9FFA85252FD047DA8A8FD13FFA8A87D7D7D5252FFFFC9C2FD05C9A067%60BCBCC2BCC3B578559BCDCECDCECECDC9FFA85252FD047DA8A8FD12FFA8%A87D7D52527DFFFFCFFD06FFC2CFCFC3CACFCACFCACFC3FFC9C3CAFD05FF%C9FFFF7D527D7DA87DFD13FFA8A87D7D52527DFFFFFD07C999A883BCBCC3%BCC2BCC294A277C2CDFD05CEC8FFFF7D527D7DA87DFD12FFA8A87D7D5252%7DFFFFCACAFFCACFCACFC2CACFCAC3FD06FFCACAFFCAC3C9CFCAFFFFFFA7%FFFFA827FD047DA8A8FD0FFFA8A87D7D52527DFFFFC9A0C9C9C8C2C2939A%769AB5C3BCC3BCBDBCBC93946ABBC1C8C8CECECEA6FFFFA827FD047DA8A8%FD0EFFA8A87DA87D52A8FFFFCFFFFFCACFCFFFC4FFFFFFCAFD07FFCACAFF%FFCACAFFFFCACFCFFFCAFFFFFF527D7DA8A8FD0FFFA8A87DA87D52A8FFFF%C9C9C9C2C2BBBCB59B9AA19AC3BCC3BCC3BCC3BCB6949B94C2C7C8C8C8CD%CEC9FFFFFF527D7DA8A8FD0EFFA8A87D7D5252A8FFFFCFC9CFCAFFFFFFC4%CAFFFFCACAFD08FFC3FFFFFFC3CAFFFFCFCFCACACAFFFFA8527D7DA8A8A8%FD0CFFA8A87D7D5252A8FFFFCFC2C2BBBCBBBCB59A76A176BCBCC3BCC3BC%C3BCC39494709594C1C7C8C1C8C8C8C9FFFFA8527D7DA8A8A8FD0DFF7DA8%7D52A8FFFFCFC9FD05FFCACAFFFFFFCACAFD08FFCACAFFFFFFC3FD05FFCA%C9CAFFFFA8527D7DA8A8FD0DFF7DA87D52A8FFFFCFC1BCBBBCBBBCBBBC76%A19A9ABCC3BCC3BCC3BCC3BCBC949B949593FD05C8C1C8CAFFFFA8527D7D%A8A8FD0AFFA8FF7D7D7D527DFFFFCFC2FD06FFC3CAFFFFFFC3FD09FFCACA%FD04FFC3FD05FFCAC9C9FFFFA8527D7DA8A8FD09FFA8FF7D7D7D527DFFFF%CFBBBBB5BCBBBCB5B576A176A193BCBCC3BCC3BCC3BCC3BC947094709499%C8C1C8C1C8C1C2C9FFFFA8527D7DA8A8FD0AFFA8A87D7D7DFFFFCFC9FD06%FFCACAFD04FFCAFD0AFFCAFD04FFCACAFD06FFC9CAFFFF7D527D7DA8A8FD%09FFA8A87D7D7DFFFFCABBBCBBBCBBBCBBBC9AA19AA19ABCBCC3BDC3BCC3%BDC3BCC3B695949B9594C1FD05C8C7C2C3FFFF7D527D7DA8A8FD08FFA8A8%7D7D52FFFFCACACFFD06FFC3FFFFFFCACAC3CACAFFCAFFFFFFCACACAC3C3%FFCAFFFFC4CAFD05FFCACFC9FFAF52527D7DA8A8FD07FFA8A87D7D52FFFF%C3BCBCBBBCBBBCBBBB93A1FD049A93FD04BCC3BCC3BCBC94B69494949570%BCC1C8C1C8C1C8C1BCC2FFAF52527D7DA8A8FD07FFA87D7D52A8FFCFFFCF%CFFD05FFFD08CAFFFFCACAC3CAC3CACAFFC3CACACAC3CACACAFD06FFCAFF%C9FFA8527DA8A8FD08FFA87D7D52A8FFC9BCC2BBBCBBBCBBBCB59A9AA17D%84849A9A9B9ABCBBBC94B69495947E789B949494C1FD04C8C1C8C2BDC2FF%A8527DA8A8FD06FFA8FF7D7D527DFFCACAFFC9FD05FFCABDC3CACAFFFFCA%CAFFFFFFCAC3BCCAFFFFFFCACAFFFFFFCACABCCAFD05FFCFFFFFC9FF5252%7DA8A8FD05FFA8FF7D7D527DFFC3BCC3BBBCB5BCBBBCB5B67D8467676784%9AA176A19A70709470957094545B557F549B93C1C1C8C1C8C1C2BCBCC2FF%52527DA8A8FD06FFA8A87D59A8CFCFFFCAFD05FFC3C3CAFD05FFCAFFFFFF%CACAFFFFC3FFFFFFCAFD06FFCAC3CACAFFFFFFCFCFFFFFCAA8527D7DA8A8%FD05FFA8A87D59A8CABCC3BCBCBBBCBBBCBBBC8467678B676784C39AA19A%77373771B6949B949C5B7F557F5B7899C2C1FD04C8C2BDC3C9A8527D7DA8%A8FD04FFA8A87D7D52CFCAFFFFCFFFFFFFCAC3FFC3FD06FFCACAFFCAC3FD%04FFC3FFFFFFC3FD06FFCACACAC3FFFFFFCAFFFFCFCA7D527D7DA8FD04FF%A8A87D7D52CFBCBDBCC2BBBCB5BB9AA77DFD0667849AA19A773137313770%947094717F557F547F55A17CC2BBC8C1C8C2BDBCC2C97D527D7DA8FD05FF%7DA852A7CAFFFFFFCAFFCACACAFFCACAFD06FFCAFFFFCAFD06FFC3FFCACA%FD06FFCAFFFFFFC3FFFFCFCFFFFFCFA1527DA8A8FD05FF7DA852A8C2C3BC%C3BBBCB5BCA0AEA084678B678B6767849A9A9B3137313731377095947855%7F557F557F77A683A7BBC2C8C8BCC3BCC3A1527DA8A8FD04FFA87D5259A7%FFFFFFCAFFC3CAFFFFFFCACAFD06FFCAC9C9C2FFCACFC9CFCAC3C3CACAFD%07FFC3FFFFFFC3CACACFFFFFCAC9527D7DA8A8FFFFFFA87D5259A0BCBCC3%BCBBB5A083A783A160FD06678499BC705A545A535A5A779394785B547F54%7F55789AA77CA799C1C1C2BCC3BCC3527D7DA8A8FFFFA8A87D7D76CFFFFF%FFCFC3CAFD04FFCAFD07FFC9CAC3FFFFCAA7CAC9FFFFCAC9CAFD07FFCAFD%04FFCACACAFFFFFFCF7D52A8A8FFFFFFA8A87D7D7CC3BCC3C3C2B5A183A7%83A7A18B678B678B678B83C2BC7F7EA1A1CAA78B67C3BCA2787F5B7F557F%79A1A6A7A7A7A0C2C2C3BCC3C27D52A8A8FD04FF7D7D52A1FD04FFC2FD05%FFCACAFFFFCBFFFFFFC9FFC4CAA77C5152525276FD04CACFFD06FFCAFD05%FFCAC3CAFFFFFF7C527DA8A8FFFFFF7D7D52A0BCC3BCBC93A783A783A77C%A8FD0667848BBC9B537651525276528A7DBC547E547F557F555B77A67CA7%7CA77CBCBCC3BCC376527DA8A8FFFFA8A87D76A7FFFFFFC3CFFD04FFCACA%C3FD05CAC3CACAC39A5252FD057D529ABCFFC9C9FD05CAC3CAFD05FFC9C3%CAFFFFCA527D7DA8FFFFA8A87D7C9AC3C3BC9AA783A783A7A1A09AA87DA7%7DA7A0A7609B6F5252FD057D529A947F9BA177A19BA1779BA0A77CA7A7A7%A0BDBCC3BCC2527D7DA8FFA8A87D7D76CFFFFFC3CFCFFFCACAC3FD04CAFF%FFFFCACAC4C3684B597D7DA87DA87D7D276EBCCAC3FFFFFFCAFFC3CAC3CA%C3CAFFFFCAC3CAFFA87C527D7DFFA8A87D7D76BCBCBC9A8B82A77CA09AC2%C2A07CA77CA77CC2BCBC6851597D7DA87DA87D7D4B6E99C8C1A67CA7A0A6%99C8C2C29AA07CA75494BCC3BC76527D7DFFFFA8A87DA1FFFFC3FFCACAC3%CACAFFFFFFCAFD04FFCAC3FFA1527DA8A8FFA8FFA8A8A88452C9CAC9C3FD%04FFCAFD04FFCACAC3FFFFCAFFFF7C7D7DA8A8FFA8A87DA0BCC39A6784C2%A0C3C3C9C9C9A0AEA7A7A7C39AC49A767DA8A8FFA8FFA8A8A884527C7DA0%A0A7A7A783C9FD04CEC8C2A07E55BDBCC3767D7DFD04A87D7D7CFFC3FFCA%C3CAFD05FFCACAFFFFCAC3C3FFCF5152FD04A8FFA8FFA8A87D7D51FFCFCA%C3FFFFFFC3FD06FFCAC2CACAC4FFA1527D7DFFA8A87D7D9ABC9A6784C2C2%FD05C9C3A083A7A09A76A2A15252FD04A8FFA8FFA8A87D7D5183595275A6%83A7A0FD06CEC89A78549BBCA0527D7DFFFFA8A852CACACAC3FFCFFD07FF%C3FFCACAFFFFCFA1527D7DFFA8FFA8FFFFFFA8A87D527CFFFFFFC3CBFFCA%FD07FFCFCACAC3CAA77D7DA8A8FFA8A87CC2BC84A0C9C8FD07C9C2A7A09B%7E7EA1A1527D7DFFA8FFA8FFFFFFA8A87D7D76832F2F70C9A0C8FD08CEC8%C371BD9A7D7DFD04A87D7D9AC3CAFFFFCFCAFD06FFCAC3CAFFFFCFC97652%7DA8A8FFA8FFA8FFFD04A8527DC9FFFFFFC3CACAFD07FFCAFFCACABC9A52%7D7DA8A8A87D7D93BCA0C9C9C9C2C9A0FD04C9C39A9B537E53C376527DA8%A8FFA8FFA8FFFD04A8527D7C2F2F2F4BA0C8CECDCECECECDCEC8CECDC994%93527D7DA8FFA8A85293CAFFFFFFCAFD08FFBCFD04FFC9A752A8A8FD07FF%A8FFA87D7DCFFD04FFBCFD08FFCFFD04FF8C527DA8A8FFA8A85293C2CEC9%C9C8FD08C9BCFD047EA1A852A8A8FD07FFA8FFA87D7DC92F352F53B5FD0D%CE8C527DFD04A87D7D99C3CAFFFFCFCFFD07FFC3CAFFFFFFC976527DA8A8%FFA8FFA8FFA8FFA8A8527DC9FFFFFFC3C3CAFD07FFCAFFFFCAC39A527D7D%A8A8A87D7D6FBCC2FD0BC9939B5A7E59A77C527DA8A8FFA8FFA8FFA8FFA8%A8527DA02F2F2F4CC1C8CECDCECECECDCEC8CECEC99999527D7DA8FFA8A8%76A8C3CAC4FFCAFD07FFC3FFCACAFFFFCFA152A8A8FFA8FFFFFFA8FFA8A8%7D7DA0CFFFFFC3CAFFCAFD08FFCACAC3CAA77C7DA8A8FFA8A87DA09ABDBC%C9C8FD07C9BC9B9A9B5A7E847D52A8A8FFA8FFFFFFA8FFA8A87D7D767E2F%3576A682C8FD08CEC8C8769A7C7D7DFD04A87D7D7CFFC3FFC4C3CAFD05FF%CACAFFFFCAC3C3FFCA5253FD04A8FFA8FFA8A8A87D51CFCFCAC3CAFFFFC3%FD06FFCAC2CACAC3CFA1527D7DFFA8A87D7D76A194A29ABCC2C9C9C9A0C9%C2BC76A19A9A768B605153FD04A8FFA8FFA8A8A87D517E54526FA682A69F%CECECECDCECEC89FA05876767C527D7DFFFFA8A87DA1FFFFC3FFCACAC4CA%FD04FFCAFD04FFCAC3FFA07C7DA8A8FFA8FFA8FFA8A852A7FFC9C3FD04FF%CAFD04FFCACAC3CFFFCACAFF7C7D7DA8FFFFA8A87D7C7DA19AA39BBCBCC9%C9CFC9C99AA19BA19ABCA18B7C7C7DA8A8FFA8FFA8FFA8A85877789B9FAC%A6AC82C8FD04CEC8C89F835FA07CA7767D7DA8FFFFA87D7D76CFFFFFC3FF%CFFFCACAC3CACACAFD05FFCAC4C368527DA87DA8A8A87DA8516EC3CAC9FD%05FFC3CACACAC3CAFFFFCAC3CAFFCA7C527D7DFFFFA87D7D76A07DA094A2%9A9B9ABC9AC3C2BC76A19BA19AC2C2C268527DA87DA8A8A87DA8526E9AC8%C7AC82AC82A69FCEC8C29FA682A6589A767D7C7C537D7DFFFFA8A87D7CC9%FFFFFFC3CFFD04FFCACAC3FD05CAC3CACABD757C7DA87DA87D7D529ABCCA%C9C9FD05CAC3C3FD05FFCAC3CAFFFFCA527D7DA8FFFFA8A87D7DA0A17DA1%9AC39BA19B9B9ABC949B9ABD9A9B9AC39B94757C7DA87DA87D7D529A937D%A0C2A0A09FA07C9A9FA6A6AC82ACA69A76A77DA0527D7DA8FFFFFF7D7D52%A1FD04FFC2FD05FFCACAFFFFCAFFCAFFA7FFC3CAA1765253525275A7C3CA%CFCFCAFFCAFFCAFFCAFD05FFCAC3CAFFFFFF7C527DA8A8FFFFFF7D7D52A0%7C7D7CA0939B76A19A9B769BA2A29BA29BA2A1A29A7C58765253525251A1%9A9A597D587D597D585F7CA682A682A67BBB767D7CA176527DA8A8FFFFFF%A87D7D7CFD04FFCFC3FD05FFCAFD07FFC9CAC9FFCFC9A7CAC9FFFFCAC9C9%CFFD06FFCAFD04FFCAC9CAFFFFFFCF7D52A8A8FD04FFA87D7D7CA77DA17D%A093BD9BA19BA19AFD06A2C4A0A0768483A7A7CAA1C4A2C39AA07D845983%598459A0A6ACA6ACA0C2A0A17DA1A07D52A8A8FD04FFA8A87D7DA7FFFFFF%CAFFC3CAFFFFFFCACAFD06FFCFC9C9C3FFCACAC9CFCFC3C3CACAFD07FFC3%FFFFFFC3CACACFFFFFFFCA527D7DA8A8FFFFFFA8A87D7DA0A17CA17CA06F%9A9BA1769A9BA2A1FD04A2A1759A757D587C767D7D9A757C7C5F59835983%597D9FAC82AC9F9F9FA17D7D7CC9527D7DA8A8FD04FFA87D52A8CFFFFFFF%CAFFCACACAFFCACAFD06FFCAFFFFCACAFD05FFC3FFCACBFD06FFCAFFFFFF%C3CAFFCFCFFFFFCFA1597DA8A8FD05FFA87D52A8A0A17DA1A0A075BC9BA1%9AC3FD06A29B76769A525952592E597558517D5F83598359847CA6A6A69F%C8A6C87CA17DA7A17D7DA8A8FD04FFA8A87D7D52CFCAFFCACFFFFFCAC4C3%FFC3FD06FFCACAFFCAC3FD04FFC3FFFFFFC3FD06FFCACACAC3FFFFFFC9FF%FFCFC97D527D7DA8FD04FFA8A87D7D53CA767D7CA0757C7599949B94A2A1%A277A2A29B6F766F762E5952594B522E527683595F598359A081A099A6A5%A6A07D7CA0C97D527D7DA8FD05FFA8A87D7DA8CFFFFFCAFD04FFCBC3C3CA%FD05FFCAFFFFFFCACAFFFFC3CBFFFFCACBFD06FFC3CACAFFFFFFCFCFFFFF%CAA8527D7DA8FD06FFA8A87D7DA8C97CA7A0A076A07C9A93BC9BA9FD04A2%9B9A76777076595970763458517D5F8359845F7D99C29FC8A6CDA6A17DA1%C9FF527D7DA8FD07FFA87D527DFFCAFFFFCAFD05FFC3C3CAFD04FFCACAFF%FFFFCAC3C3CAFFFFFFCACAFFFFFFCACABCCAFD05FFCFFFFFC9FF52527DA8%A8FD07FFA87D527DFFA176A1997C75A0757C6FB69BFD04A2A16F7676766F%766F522E582E5258835983587C93C1A5A6A6A6A5C87C7DA0FF52527DA8A8%FD08FFA87D52A9FFCFFFCFFD06FFC3FD04CAFFCACAFFFFCACAC3FD04CAFF%C3FD05CAC3CAFD06FFCAFFC9FFA8527DA8A8FD09FFA87D52A9FFA77CA075%A075A076A0939A709B9AC49B9A7676769A999A75525158757D7C7D76764B%C2A6A6A6C8A6C8A0A1A0FFA8527DA8A8FD08FFA8A87D7D52FFCFCACACFFD%06FFC3FFCAFFCACAC3CAC3CACAFFFFFFCACACAC3C3CACAFFFFCACAFD05FF%CACFA7FFFF52527D7DA8FD08FFA8A87D7D52FFCFA176A0757C75A0759A6F%7670766F94939A75A0767D7CA1769A769A4B522D522E759FA6A5A6A5A69F%A0A0FFFF52527D7DA8FD09FFA8A87D7D7DFFFFCFC9FD06FFCACAFD04FFCA%FD0AFFCAFD04FFCACAFD06FFC9C9FFFF7D52A87DA8FD0AFFA8A87D7D7DFF%FFC99FA076A076A0769A7077767D769A7DA77DA17DA17DA17DA776582E58%34769FCDA6C8A6CDA6A0A1FFFF7D52A87DA8FD0BFFA8A87D527DFFFFCAC9%FD06FFC4FD04FFC3FD09FFCACAFD04FFC3FD06FFC9C9FFFFA8527D7DA8A8%FD0BFFA8A87D527DFFFFCA997675A0757C7599FD04766FA17CA17CA17CA1%7C7D76762E582E5899A6A5A6A6A6A5C8C9FFFFA8527D7DA8A8FD0CFFA8A8%7D52A8FFFFCFC9FD05FFCACAFD04FFCAFD08FFCACAFFFFFFC3FD05FFCFC9%C9FFFFFF527D7DA8A8FD0DFFA8A87D7DA8FFFFCF9FA075A076A0759A7676%769A9AA17CA17DA17CA17DA15158525875C8A6A6A6C8A6C8CAFFFFFF527D%7DA8A8FD0CFFA8A87D7D5252A8FFFFCAC9CACAFFFFFFC3CAFFFFCACAFD08%FFC3FFFFFFC4CAFFFFFFCFC9CAC9FFFFFF527D7DA8A8FD0DFFA8A87D7D52%52A8FFFFC9C2A0757C757C6F9A52766F9A7C7D7CA17C7D7CA175522D5851%C1A5A6A5A69FC8C9FFFFFF527D7DA8A8FD10FFA8A87D52A8FFFFCFCFFFCA%CFCFFFC3FFFFFFCAFD08FFCAFFFFCACAFFFFCACFCAFFCAFFFFFF527D7DA8%A8FD11FFA8A87D52A8FFFFC9C9C9A0A075A09376767794A17DA17DA17DA7%A1762E5952C2A6C8A6C8C8CEC9FFFFFF527D7DA8A8FD10FFA8A87DA85252%A8FFCFCAFFFFCACFCACFC2FFFFCBCAFD06FFCACAFFCAC3C9CFCAFFFFFFC9%FFFFA8527D7DA87DFD11FFA8A87DA85252A8FFFFC9C2C9C8C8A0A0937652%76767D7CA17D7D7D9A51582D999FC8A6CECECEC8FFFFA8527D7DA87DFD13%FFA87DA87D527DFFFFCFFD05FFCFC2CFCAC3CACFCACFCACFC3FFCAC3CAFD%05FFC9FFFFA8527D7DA8A8FD14FFA87DA87D527DFFFFC9C8FD05C9BCA176%BCA0A1A0A1A0A1757C7CC2C8FD05CEC8FFFFA8527D7DA8A8FD14FFA8A87D%A87D5252FFFFCACAFD05FFC3FFC3CAFFFFCAFFC3CACFC3CAFD05FFC9FFA8%7D527D7DA87DFD15FFA8A87DA87D5252FFFFC9A0FD05C99AA29B9A7CA17C%A1997C59A0C8CECDCECECDC8FFA87D527D7DA87DFD18FFA8A87D7D52A8FF%CFCFFD05FFC3FFCAFD04FFCAFFC4CAFD05FFCAFF7D52527D7DA8A8FD19FF%A8A87D7D52A8FFCFC8FD05C99AA39AA17DA7A1A059A0C8FD05CEC9FF7E52%527D7DA8A8FD18FFA8FFA8A87D7D527D7DCACAFD05FFC3CAC4FFFFCACAC4%CAFFFFFFCFCFA7A852527D7D7DA8A8FD19FFA8FFA8A87D7D527D7DCAFD06%C99A9B9A7D7C9A52A0C8CECECECDCEA7A852527D7D7DA8A8FD1CFFA8A87D%A87D7D527DA1CACFFFFFFFC3C3FFFFC3CAFD04FFC9A77C7D527D7DFD04A8%FD1DFFA8A87DA87D7D527DA1C9C8C9C9C99ABC7CA175C2FD04CEC8A77D7D%527D7DFD04A8FD1EFFA8A87DA87D7D5259527C7CC9A8FFC2BCBCC3CACFA1%A176765253527D7DA87DA8A8FD1FFFA8A87DA87D7D5259527C75C2A0C9BB%B593C2C8CEA6A076765253527D7DA87DA8A8FD22FFA8A87DA87D7D597D52%7C7CA76F6F7CA1767C52FD047DFD04A8FD25FFA8A87DA87D7D597D767C7C%A76F6F7CA1767D52FD047DFD04A8FD26FFFD04A87DA8FD067D59FD067DA8%7DA8A8FFA8FD27FFFD04A87DA8FD067D59FD067DA87DA8A8FFA8FD2AFFA8%FFFD06A87DA87DA87DFD04A8FD2FFFA8FFFD06A87DA87DA87DFD04A8FD30%FFA8FFA8FFA8FFFD07A8FFA8FD31FFA8FFA8FFA8FFFD07A8FFA8FD18FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">RVB de base</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2012-10-29T22:49:21+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2012-10-29T22:49:21+01:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-29T22:49:20+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FVGe7ggWsj&#xA;gYqkd/5xsoKhCCfHFWPXn5h8SQrgYqlMv5iyV2kxVqP8xZK7y/jiqZ2f5ik0BcH54qyGw862c9BI&#xA;RU9xiqf219bXKgxODXt3xVXxV2KuxV2KuxV2KuxV2KqM93BAtZHAxVI7/wA42UFQhBPjirHrz8w+&#xA;JIVwMVSmX8xZK7SYq1H+Ysld5fxxVM7P8xSaAuD88VZDYedbOegkIqe4xVP7a+trlQYnBr274qr4&#xA;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&#xA;uxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F77F117407206811A8C4FAEDA846BD9E</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F117407206811A8C4FAEDA846BD9E</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D07F11740720681191099C3B601C4548</stEvt:instanceID>
                  <stEvt:when>2008-04-17T14:19:10+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T14:51:08-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T15:15:38-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0CC3BD25102DDD1181B594070CEB88D9</stEvt:instanceID>
                  <stEvt:when>2008-05-28T17:07:17-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:03E540664A3DDD11BD33D3EB8D3A1068</stEvt:instanceID>
                  <stEvt:when>2008-06-18T22:24:35+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6D6AE2A5723EDD11A6F1BABF7C5A7A51</stEvt:instanceID>
                  <stEvt:when>2008-06-19T20:31:09-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BCE4CD276D42DD11A0BEF9B17C50C624</stEvt:instanceID>
                  <stEvt:when>2008-06-25T06:28:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E6A2668D200711689FE8CB9EA85C5459</stEvt:instanceID>
                  <stEvt:when>2008-06-26T05:52:17-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0F91C12D6B48DD1194DA8463B7D22218</stEvt:instanceID>
                  <stEvt:when>2008-07-02T12:20:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811ACAF9F0F41229DDF</stEvt:instanceID>
                  <stEvt:when>2008-07-21T13:59:19+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ED0DFC627ABDD6119286AC08E167C812</stEvt:instanceID>
                  <stEvt:when>2002-09-01T14:19:17+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:234F4C2C7BBDD6119286AC08E167C812</stEvt:instanceID>
                  <stEvt:when>2002-09-01T14:19:37+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811A8C4FAEDA846BD9E</stEvt:instanceID>
                  <stEvt:when>2012-10-26T16:23:06+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07801174072068118DBBA9D5E661B6A7</stEvt:instanceID>
                  <stEvt:when>2012-10-29T22:49:21+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:InstanceID>xmp.iid:07801174072068118DBBA9D5E661B6A7</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:07801174072068118DBBA9D5E661B6A7</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par défaut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blanc</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Noir</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RVB Rouge</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RVB Jaune</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RVB Vert</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RVB Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RVB Bleu</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>RVB Magenta</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=193 V=39 B=45</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>193</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 V=28 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 V=90 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 V=147 B=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>147</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 V=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 V=238 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>238</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=217 V=224 B=33</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>217</xmpG:red>
                           <xmpG:green>224</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 V=198 B=63</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=57 V=181 B=74</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>57</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 V=146 B=69</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>146</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 V=104 B=55</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>55</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=34 V=181 B=115</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>34</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 V=169 B=157</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 V=171 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>41</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 V=113 B=188</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>113</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=46 V=49 B=146</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=27 V=20 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>27</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 V=45 B=145</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>145</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=147 V=39 B=143</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=158 V=0 B=93</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>93</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=212 V=20 B=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>212</xmpG:red>
                           <xmpG:green>20</xmpG:green>
                           <xmpG:blue>90</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=237 V=30 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>30</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 V=178 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 V=134 B=117</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>117</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=115 V=99 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>115</xmpG:red>
                           <xmpG:green>99</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 V=71 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>83</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 V=156 B=109</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>156</xmpG:green>
                           <xmpG:blue>109</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=166 V=124 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 V=98 B=57</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 V=76 B=36</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 V=56 B=19</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=66 V=33 B=11</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>66</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>11</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Gris</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 V=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 V=26 B=26</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 V=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 V=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 V=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 V=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 V=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 V=179 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 V=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 V=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 V=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Eclaboussure</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=214 V=149 B=68</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>214</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>68</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=71 V=152 B=237</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>71</xmpG:red>
                           <xmpG:green>152</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=42 V=81 B=224</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>42</xmpG:red>
                           <xmpG:green>81</xmpG:green>
                           <xmpG:blue>224</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=180 V=58 B=228</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>180</xmpG:red>
                           <xmpG:green>58</xmpG:green>
                           <xmpG:blue>228</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -287 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 287 li
573.994 287 li
573.994 0 li
cp
clp
[1 0 0 1 0 0 ]ct
287 143.5 mo
287 64.2471 222.753 0 143.5 0 cv
64.2471 0 0 64.2471 0 143.5 cv
0 222.753 64.2471 287 143.5 287 cv
222.753 287 287 222.753 287 143.5 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[143.5 0 0 143.5 143.5 143.5 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 0 0 ]
/C1 [.94902 .94902 .94902 ]
/N 4.97729 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[143.5 0 0 143.5 143.5 143.5 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~zzzzzzzzzzzzzzzzzzzzz!!**$!<E3%!<E3%!<E6'!WiE)!WiH+!s8W-!sA`0"9\l3"U,)7"pP;;#6tM
?#RLeE$47.K$k*OR%1WjY%hK9a&eYik'GV>u(Dmu,)B0Y9*?H:F+X/-V,pjuf.4Zr$/hf"81c70N3BK>
e5X@b+7S$-F:/Fhf<`iO1?=78SB527$EHHDMI"-a%LPh+SPa@i1TqnWfYHt[K^;@n4cI1>!hrO"g~>
<~zzzzzzzzzzzzzzzzzzzzz!!**$!<E3%!<E3%!<E6'!WiE)!WiH+!s8W-!sA`0"9\l3"U,)7"pP;;#6tM
?#RLeE$47.K$k*OR%1WjY%hK9a&eYik'GV>u(Dmu,)B0Y9*?H:F+X/-V,pjuf.4Zr$/hf"81c70N3BK>
e5X@b+7S$-F:/Fhf<`iO1?=78SB527$EHHDMI"-a%LPh+SPa@i1TqnWfYHt[K^;@n4cI1>!hrO"g~>
<~zzzzzzzzzzzzzzzzzzzzz!!**$!<E3%!<E3%!<E6'!WiE)!WiH+!s8W-!sA`0"9\l3"U,)7"pP;;#6tM
?#RLeE$47.K$k*OR%1WjY%hK9a&eYik'GV>u(Dmu,)B0Y9*?H:F+X/-V,pjuf.4Zr$/hf"81c70N3BK>
e5X@b+7S$-F:/Fhf<`iO1?=78SB527$EHHDMI"-a%LPh+SPa@i1TqnWfYHt[K^;@n4cI1>!hrO"g~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
268 146 mo
268 214.759 212.259 270.5 143.5 270.5 cv
74.7402 270.5 19 214.759 19 146 cv
19 77.2402 74.7402 21.5 143.5 21.5 cv
212.259 21.5 268 77.2402 268 146 cv
cp
1 1 1 rgb
f
268 146 mo
267.5 146 li
267.5 180.243 253.622 211.24 231.181 233.681 cv
208.74 256.121 177.743 270 143.5 270 cv
109.257 270 78.2598 256.122 55.8186 233.681 cv
33.3783 211.24 19.5002 180.243 19.5 146 cv
19.5002 111.757 33.3783 80.7598 55.8186 58.3186 cv
78.2598 35.8783 109.256 22.0002 143.5 22 cv
177.743 22.0002 208.74 35.8783 231.181 58.3186 cv
253.622 80.7598 267.5 111.756 267.5 146 cv
268 146 li
268.5 146 li
268.5 76.9639 212.536 21.0003 143.5 21 cv
74.4639 21.0003 18.5003 76.9638 18.5 146 cv
18.5003 215.036 74.4638 271 143.5 271 cv
212.536 271 268.5 215.036 268.5 146 cv
268 146 li
cp
0 0 0 rgb
f
176.5 146 mo
176.5 127.774 161.726 113 143.5 113 cv
125.274 113 110.5 127.774 110.5 146 cv
110.5 164.226 125.274 179 143.5 179 cv
161.726 179 176.5 164.226 176.5 146 cv
cp
level3{
gsave
clp
[33 0 0 33 143.5 146 ]ct
/1 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.94902 .94902 .94902 ]
/C1 [.4 .4 .4 ]
/N 2.96295 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33 0 0 33 143.5 146 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~o'u8?naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naQ&;nF5r:nF5r:nF5o8
n*f`6n*f]4mdBN2mdBK0mHs<.m-O**m-F!'lg*j$lK[Wul07Eqkih3mkN:phjlPUbjQ,@]j5T(XiSi_Q
i8<GKhVI#Cgt^Z=g=k65f\"g,f%&=#eC2jodF$=ecd'e[bfe2PaiVWE`l?!9_o'@-^q[Xu]tCtg\[f5Z
[^EKKZE^X;Y-"e+Wi;qpVPU)`TqJ$LSXc1;R$X,'PEM&hNfB!TM26n?K7\Z(IXHKgG^":PEcH#7ChdZs
~>
<~o'u8?naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naQ&;nF5r:nF5r:nF5o8
n*f`6n*f]4mdBN2mdBK0mHs<.m-O**m-F!'lg*j$lK[Wul07Eqkih3mkN:phjlPUbjQ,@]j5T(XiSi_Q
i8<GKhVI#Cgt^Z=g=k65f\"g,f%&=#eC2jodF$=ecd'e[bfe2PaiVWE`l?!9_o'@-^q[Xu]tCtg\[f5Z
[^EKKZE^X;Y-"e+Wi;qpVPU)`TqJ$LSXc1;R$X,'PEM&hNfB!TM26n?K7\Z(IXHKgG^":PEcH#7ChdZs
~>
<~o'u8?naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naQ&;nF5r:nF5r:nF5o8
n*f`6n*f]4mdBN2mdBK0mHs<.m-O**m-F!'lg*j$lK[Wul07Eqkih3mkN:phjlPUbjQ,@]j5T(XiSi_Q
i8<GKhVI#Cgt^Z=g=k65f\"g,f%&=#eC2jodF$=ecd'e[bfe2PaiVWE`l?!9_o'@-^q[Xu]tCtg\[f5Z
[^EKKZE^X;Y-"e+Wi;qpVPU)`TqJ$LSXc1;R$X,'PEM&hNfB!TM26n?K7\Z(IXHKgG^":PEcH#7ChdZs
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
430.494 287 mo
351.241 287 286.994 222.753 286.994 143.5 cv
286.994 64.2471 351.241 0 430.494 0 cv
509.747 0 573.994 64.2471 573.994 143.5 cv
573.994 222.753 509.747 287 430.494 287 cv
430.494 20.9999 mo
361.458 21.0004 305.494 76.9638 305.494 146 cv
305.494 215.036 361.458 271 430.494 271 cv
499.529 271 555.494 215.036 555.494 146 cv
555.494 146 li
555.494 146 li
555.494 76.9639 499.529 21.0004 430.494 20.9999 cv
level3{
gsave
clp
[143.5 0 0 143.5 430.494 143.5 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[143.5 0 0 143.5 430.494 143.5 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
554.994 146 mo
554.994 214.759 499.253 270.5 430.494 270.5 cv
361.734 270.5 305.994 214.759 305.994 146 cv
305.994 77.2402 361.734 21.5 430.494 21.5 cv
499.253 21.5 554.994 77.2402 554.994 146 cv
1 1 1 rgb
f
554.994 146 mo
554.494 146 li
554.494 180.243 540.615 211.24 518.175 233.681 cv
495.734 256.121 464.737 270 430.494 270 cv
396.251 270 365.254 256.121 342.813 233.681 cv
320.372 211.24 306.494 180.243 306.494 146 cv
306.494 111.757 320.372 80.7597 342.813 58.3187 cv
365.254 35.8782 396.251 22.0002 430.494 22 cv
464.737 22.0002 495.734 35.8782 518.175 58.3187 cv
540.615 80.7597 554.494 111.756 554.494 146 cv
554.994 146 li
555.494 146 li
555.494 76.9639 499.529 21.0004 430.494 20.9999 cv
361.458 21.0004 305.494 76.9638 305.494 146 cv
305.494 215.036 361.458 271 430.494 271 cv
499.529 271 555.494 215.036 555.494 146 cv
554.994 146 li
0 0 0 rgb
f
430.494 179 mo
421.473 179 413.296 175.38 407.339 169.513 cv
407.279 169.453 407.22 169.394 407.16 169.335 cv
407.16 169.335 li
407.16 169.335 407.16 169.335 407.16 169.335 cv
407.16 169.335 407.16 169.335 407.16 169.335 cv
407.16 169.335 li
401.188 163.363 397.494 155.113 397.494 146 cv
397.494 137.011 401.089 128.86 406.919 122.908 cv
406.999 122.827 407.079 122.747 407.16 122.666 cv
407.16 122.666 li
413.13 116.695 421.381 113 430.494 113 cv
439.515 113 447.69 116.62 453.647 122.485 cv
453.707 122.545 453.768 122.606 453.828 122.665 cv
453.828 122.665 li
453.828 122.665 453.828 122.665 453.828 122.665 cv
453.828 122.665 453.828 122.665 453.828 122.665 cv
453.828 122.665 li
459.8 128.637 463.494 136.887 463.494 146 cv
463.494 154.989 459.901 163.138 454.071 169.09 cv
453.991 169.171 453.909 169.253 453.828 169.334 cv
453.828 169.334 li
447.858 175.305 439.607 179 430.494 179 cv
level3{
gsave
clp
[33 0 0 33 430.494 146 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33 0 0 33 430.494 146 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
407.159 169.335 mo
407.159 169.335 li
407.158 169.335 407.158 169.335 407.158 169.335 cv
402.711 168.297 398.666 167.052 394.989 165.613 cv
393.406 164.994 391.887 164.337 390.441 163.649 cv
389.734 158.14 390.426 152.093 392.432 146.001 cv
395.093 154.083 400.067 162.242 407.159 169.335 cv
370.086 146.001 mo
370.085 145.999 li
374.245 138.952 380.859 132.912 390.441 128.351 cv
390.44 128.352 li
380.859 132.913 374.246 138.954 370.086 146.001 cv
306.494 145.647 mo
306.495 145.513 306.495 145.381 306.496 145.248 cv
308.921 141.644 311.676 137.996 314.705 134.366 cv
314.712 134.357 314.721 134.346 314.729 134.337 cv
314.734 134.331 314.738 134.326 314.743 134.32 cv
320.233 127.745 326.621 121.227 333.597 115.105 cv
332.535 120.287 331.732 125.604 331.21 131.023 cv
328.763 132.197 326.275 133.472 323.747 134.855 cv
318.179 137.902 312.423 141.474 306.494 145.647 cv
407.159 122.665 mo
405.302 122.059 403.178 121.452 400.804 120.903 cv
395.491 119.675 388.922 118.738 381.244 118.738 cv
376.15 118.738 370.568 119.151 364.545 120.167 cv
364.545 120.166 li
364.545 120.167 li
365.179 110.122 368.351 99.4159 373.266 88.7731 cv
373.267 88.773 li
373.267 88.7718 li
383.91 83.858 394.617 80.683 404.661 80.0507 cv
404.66 80.0516 li
404.661 80.0516 li
402.79 91.1456 402.963 100.74 403.997 108.555 cv
403.996 108.556 li
404.748 114.234 405.953 118.974 407.159 122.665 cv
453.828 122.665 mo
453.767 122.604 453.708 122.545 453.647 122.485 cv
446.597 115.488 438.506 110.576 430.493 107.938 cv
435.034 106.442 439.55 105.677 443.837 105.677 cv
445.301 105.677 446.74 105.767 448.142 105.947 cv
448.152 105.966 448.162 105.989 448.172 106.008 cv
450.446 110.799 452.351 116.329 453.828 122.665 cv
412.845 105.947 mo
417.405 96.3653 423.445 89.751 430.492 85.5907 cv
430.495 85.5922 li
423.447 89.7525 417.406 96.3651 412.845 105.947 cv
412.844 105.947 412.846 105.947 412.845 105.947 cv
399.599 49.1031 mo
408.83 38.5845 418.966 29.3984 428.825 22.6253 cv
429.131 22.4151 429.436 22.2078 429.741 22.0023 cv
429.875 22.0015 430.007 22.0009 430.14 22.0005 cv
424.074 30.6204 419.277 38.8754 415.518 46.7161 cv
410.098 47.2381 404.781 48.0404 399.599 49.1031 cv
.498039 1 1 rgb
f
305.994 146 mo
306.16 145.749 306.327 145.499 306.496 145.248 cv
306.495 145.381 306.495 145.513 306.494 145.647 cv
306.327 145.764 306.161 145.882 305.994 146 cv
429.741 22.0023 mo
429.992 21.8334 430.244 21.6656 430.494 21.5 cv
430.376 21.6665 430.258 21.8338 430.14 22.0005 cv
430.007 22.0009 429.875 22.0015 429.741 22.0023 cv
0 .501961 .501961 rgb
f
453.828 122.665 mo
453.768 122.606 453.707 122.545 453.647 122.485 cv
453.708 122.545 453.767 122.604 453.828 122.665 cv
453.828 122.665 453.828 122.665 453.828 122.665 cv
level3{
gsave
clp
[33 0 0 33 430.494 146 ]ct
/2 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.47451 .976471 .976471 ]
/C1 [.2 .701961 .701961 ]
/N 2.96295 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33 0 0 33 430.494 146 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+FV
GB\7TGB\7TGB\7TGB\4RG'8%PG'8%PG'.qMF`hhLF`heJFEDVHFEDSFF)uDDEcQ2@EcQ/>EH,u<E,]c8
E,TZ5Df0H1DJj<.D/F**Ci!m&CMIU!C2%BrBP;'lB4kggAn>ObA7T4\@q/tW@:<SP?sd8J?=$oC>[1N<
>?Y35=]ed-=&r@%<E)pr;c6Lj:f'q`:/4MW9M8#N8P)HC7n,s:6psC/5s[b#5<_4n4?GSb3B/rU2Dm<I
~>
<~q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XUX
p\4FVp\4FVp\4FVp\4CTp@e4Rp@e4Rp@\+Op%A"Np%@tLo^qeJo^qbHoCMSFo()ABo()>@naZ/>nF5r:
nF,i7n*]W3mdBK0mHs9,m-O'(lg!d#lKRQtkih6nkND!ik2k^djQ,C^j5].YiSibRi8<GLhVR)Egt^]>
gY1B7g"=s/f@JO'e^W*te'c[ld*U+bcHa\Ybfe2PaiVWEa2Z-<`5KR1_83q%^V7Cp]Xtbd\[],W[^EKK
~>
<~q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XUX
p\4FVp\4FVp\4FVp\4CTp@e4Rp@e4Rp@\+Op%A"Np%@tLo^qeJo^qbHoCMSFo()ABo()>@naZ/>nF5r:
nF,i7n*]W3mdBK0mHs9,m-O'(lg!d#lKRQtkih6nkND!ik2k^djQ,C^j5].YiSibRi8<GLhVR)Egt^]>
gY1B7g"=s/f@JO'e^W*te'c[ld*U+bcHa\Ybfe2PaiVWEa2Z-<`5KR1_83q%^V7Cp]Xtbd\[],W[^EKK
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
429.741 269.998 mo
424.887 269.969 420.1 269.661 415.393 269.09 cv
390.076 264.315 367.87 247.718 352.527 223.967 cv
366.156 232.772 382.135 239.316 399.598 242.897 cv
409.116 253.742 419.595 263.17 429.741 269.998 cv
.984314 .788235 .556863 rgb
f
430.494 270.5 mo
425.36 270.5 420.318 270.019 415.393 269.09 cv
420.1 269.661 424.887 269.969 429.741 269.998 cv
429.992 270.167 430.244 270.334 430.494 270.5 cv
430.494 270.5 430.494 270.5 430.494 270.5 cv
.486274 .290196 .0588235 rgb
f
393.049 172.497 mo
391.71 169.786 390.846 166.806 390.441 163.649 cv
391.887 164.338 393.406 164.994 394.989 165.613 cv
398.666 167.052 402.712 168.298 407.159 169.335 cv
403.466 170.54 398.727 171.746 393.049 172.497 cv
.984314 .788235 .556863 rgb
f
407.159 169.335 mo
402.712 168.298 398.666 167.052 394.989 165.613 cv
398.666 167.052 402.711 168.297 407.158 169.335 cv
407.158 169.335 li
.733333 .788235 .556863 rgb
f
364.546 171.834 mo
348.163 169.07 328.51 161.848 306.494 146.353 cv
306.494 146.236 306.494 146.117 306.494 146 cv
306.494 145.883 306.494 145.764 306.494 145.647 cv
312.423 141.474 318.179 137.902 323.747 134.855 cv
326.275 133.472 328.763 132.197 331.21 131.023 cv
331.21 131.023 li
343.396 125.181 354.576 121.848 364.545 120.167 cv
364.545 120.167 li
364.545 120.167 li
363.952 129.56 365.58 138.369 370.085 145.999 cv
370.085 146 li
370.086 146.002 li
365.581 153.632 363.953 162.44 364.546 171.834 cv
390.441 128.351 mo
390.846 125.194 391.71 122.214 393.049 119.503 cv
395.87 119.876 398.46 120.362 400.804 120.903 cv
403.178 121.452 405.301 122.059 407.158 122.665 cv
400.796 124.149 395.245 126.064 390.441 128.351 cv
333.597 115.105 mo
333.597 115.104 li
345.625 104.548 359.387 95.1802 373.267 88.772 cv
373.266 88.7731 li
359.39 95.1811 345.622 104.552 333.597 115.105 cv
.984314 .788235 .556863 rgb
f
306.494 146.353 mo
306.327 146.236 306.161 146.118 305.994 146 cv
305.994 146 li
305.994 146 305.994 146 305.994 146 cv
305.994 146 305.994 146 305.994 146 cv
305.994 146 li
305.994 146 305.994 146 305.994 146 cv
305.994 146 li
305.994 146 305.994 146 305.994 146 cv
305.994 146 li
306.161 145.882 306.327 145.764 306.494 145.647 cv
306.494 145.764 306.494 145.883 306.494 146 cv
306.494 146.117 306.494 146.236 306.494 146.353 cv
.486274 .290196 .0588235 rgb
f
370.085 145.999 mo
365.58 138.369 363.952 129.56 364.545 120.167 cv
370.568 119.151 376.15 118.738 381.244 118.738 cv
388.922 118.738 395.491 119.675 400.804 120.903 cv
398.46 120.362 395.87 119.876 393.049 119.503 cv
391.71 122.214 390.846 125.194 390.441 128.351 cv
380.859 132.912 374.245 138.952 370.085 145.999 cv
306.494 145.647 mo
306.494 145.647 li
312.423 141.474 318.179 137.902 323.747 134.855 cv
318.179 137.902 312.423 141.474 306.494 145.647 cv
331.21 131.023 mo
331.732 125.604 332.535 120.287 333.597 115.105 cv
345.622 104.552 359.39 95.1811 373.266 88.7731 cv
368.351 99.4159 365.179 110.122 364.545 120.167 cv
354.576 121.848 343.396 125.181 331.21 131.023 cv
.733333 .788235 .556863 rgb
f
305.994 146 mo
305.994 146 li
305.994 146 li
305.994 146 li
306.161 145.882 306.327 145.764 306.494 145.647 cv
306.494 145.647 li
306.327 145.764 306.161 145.882 305.994 146 cv
.486274 .541176 .309804 rgb
f
352.527 68.0325 mo
367.871 44.2817 390.077 27.685 415.394 22.9101 cv
420.101 22.3387 424.887 22.0311 429.741 22.0023 cv
429.436 22.2078 429.131 22.4151 428.825 22.6253 cv
418.966 29.3984 408.83 38.5846 399.599 49.1032 cv
382.136 52.6843 366.156 59.2277 352.527 68.0325 cv
.984314 .788235 .556863 rgb
f
415.394 22.9101 mo
420.319 21.9812 425.36 21.5 430.494 21.5 cv
430.494 21.4996 430.494 21.4996 430.494 21.4996 cv
430.244 21.6656 429.992 21.8334 429.741 22.0023 cv
424.887 22.0311 420.101 22.3387 415.394 22.9101 cv
.486274 .290196 .0588235 rgb
f
429.741 22.0023 mo
429.992 21.8334 430.244 21.6656 430.494 21.5 cv
430.494 21.4996 430.494 21.4996 430.494 21.4996 cv
430.244 21.6656 429.992 21.8334 429.741 22.0023 cv
429.741 22.0023 li
.486274 .541176 .309804 rgb
f
453.83 169.334 mo
453.911 169.253 453.991 169.172 454.071 169.09 cv
461.035 162.054 465.925 153.988 468.556 145.999 cv
470.562 152.091 471.255 158.139 470.548 163.647 cv
465.743 165.934 460.19 167.85 453.828 169.334 cv
490.902 145.999 mo
486.742 138.951 480.129 132.912 470.547 128.351 cv
470.547 128.351 li
480.129 132.911 486.742 138.951 490.903 145.998 cv
490.902 145.999 li
554.494 145.647 mo
545.874 139.58 537.619 134.783 529.778 131.023 cv
529.256 125.604 528.454 120.287 527.391 115.105 cv
538.236 124.623 547.664 135.101 554.492 145.247 cv
554.493 145.381 554.493 145.513 554.494 145.647 cv
453.828 122.665 mo
453.828 122.665 li
455.034 118.973 456.24 114.233 456.991 108.555 cv
456.991 108.555 li
458.025 100.74 458.198 91.1447 456.327 80.0507 cv
466.372 80.6848 477.079 83.8578 487.722 88.7728 cv
492.637 99.4156 495.809 110.122 496.443 120.166 cv
490.419 119.15 484.84 118.738 479.744 118.738 cv
475.456 118.738 471.51 119.031 467.939 119.503 cv
467.939 119.502 li
462.258 120.253 457.521 121.459 453.828 122.665 cv
.498039 .498039 1 rgb
f
554.994 146 mo
554.994 146 li
554.956 145.973 554.917 145.945 554.879 145.918 cv
554.838 145.889 554.801 145.863 554.76 145.834 cv
554.672 145.772 554.581 145.708 554.494 145.647 cv
554.493 145.513 554.493 145.381 554.492 145.247 cv
554.561 145.35 554.63 145.453 554.699 145.556 cv
554.715 145.58 554.731 145.603 554.747 145.627 cv
554.749 145.63 554.749 145.63 554.751 145.633 cv
554.751 145.633 li
554.779 145.676 554.809 145.72 554.837 145.763 cv
554.851 145.784 554.868 145.81 554.882 145.831 cv
554.902 145.861 554.923 145.892 554.943 145.922 cv
554.961 145.949 554.976 145.973 554.994 146 cv
554.994 146 li
0 0 .501961 rgb
f
453.828 169.334 mo
453.909 169.253 453.991 169.171 454.071 169.09 cv
453.991 169.172 453.911 169.253 453.83 169.334 cv
453.828 169.334 453.828 169.334 453.828 169.334 cv
453.828 122.665 mo
453.828 122.665 li
453.828 122.665 453.828 122.665 453.828 122.665 cv
453.828 122.665 453.828 122.665 453.828 122.665 cv
level3{
gsave
clp
[33 0 0 33 430.494 146 ]ct
/3 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.47451 .47451 .976471 ]
/C1 [.2 .2 .701961 ]
/N 2.96295 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33 0 0 33 430.494 146 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+FV
GB\7TGB\7TGB\7TGB\4RG'8%PG'8%PG'.qMF`hhLF`heJFEDVHFEDSFF)uDDEcQ2@EcQ/>EH,u<E,]c8
E,TZ5Df0H1DJj<.D/F**Ci!m&CMIU!C2%BrBP;'lB4kggAn>ObA7T4\@q/tW@:<SP?sd8J?=$oC>[1N<
>?Y35=]ed-=&r@%<E)pr;c6Lj:f'q`:/4MW9M8#N8P)HC7n,s:6psC/5s[b#5<_4n4?GSb3B/rU2Dm<I
~>
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+FV
GB\7TGB\7TGB\7TGB\4RG'8%PG'8%PG'.qMF`hhLF`heJFEDVHFEDSFF)uDDEcQ2@EcQ/>EH,u<E,]c8
E,TZ5Df0H1DJj<.D/F**Ci!m&CMIU!C2%BrBP;'lB4kggAn>ObA7T4\@q/tW@:<SP?sd8J?=$oC>[1N<
>?Y35=]ed-=&r@%<E)pr;c6Lj:f'q`:/4MW9M8#N8P)HC7n,s:6psC/5s[b#5<_4n4?GSb3B/rU2Dm<I
~>
<~q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XUX
p\4FVp\4FVp\4FVp\4CTp@e4Rp@e4Rp@\+Op%A"Np%@tLo^qeJo^qbHoCMSFo()ABo()>@naZ/>nF5r:
nF,i7n*]W3mdBK0mHs9,m-O'(lg!d#lKRQtkih6nkND!ik2k^djQ,C^j5].YiSibRi8<GLhVR)Egt^]>
gY1B7g"=s/f@JO'e^W*te'c[ld*U+bcHa\Ybfe2PaiVWEa2Z-<`5KR1_83q%^V7Cp]Xtbd\[],W[^EKK
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
407.159 122.665 mo
407.159 122.665 li
407.16 122.664 407.16 122.664 407.16 122.664 cv
408.067 118.773 409.138 115.179 410.355 111.88 cv
411.127 109.785 411.957 107.813 412.845 105.947 cv
414.248 105.767 415.687 105.678 417.151 105.678 cv
421.437 105.678 425.952 106.443 430.493 107.938 cv
422.411 110.599 414.251 115.573 407.159 122.665 cv
.498039 .498039 1 rgb
f
430.493 107.938 mo
425.952 106.443 421.437 105.678 417.151 105.678 cv
415.687 105.678 414.248 105.767 412.845 105.947 cv
417.406 96.3651 423.447 89.7525 430.495 85.5922 cv
437.542 89.7525 443.582 96.3647 448.142 105.947 cv
446.74 105.767 445.301 105.677 443.837 105.677 cv
439.55 105.677 435.034 106.442 430.493 107.938 cv
.247059 .498039 1 rgb
f
461.39 49.1031 mo
456.207 48.0404 450.89 47.2381 445.471 46.7161 cv
441.711 38.8754 436.914 30.6204 430.848 22.0005 cv
430.982 22.0009 431.114 22.0015 431.247 22.0023 cv
441.393 28.8299 451.872 38.2582 461.39 49.1031 cv
.498039 .498039 1 rgb
f
431.247 22.0023 mo
431.114 22.0015 430.982 22.0009 430.848 22.0005 cv
430.731 21.8338 430.612 21.6665 430.494 21.4996 cv
430.745 21.6656 430.996 21.8334 431.247 22.0023 cv
0 0 .501961 rgb
f
554.492 145.247 mo
547.664 135.101 538.236 124.621 527.391 115.104 cv
523.81 97.6411 517.266 81.6617 508.461 68.0326 cv
532.212 83.3762 548.809 105.582 553.584 130.898 cv
554.155 135.605 554.463 140.392 554.492 145.247 cv
487.721 88.7722 mo
487.721 88.7721 li
486.535 86.2028 485.246 83.6357 483.868 81.0845 cv
485.246 83.6357 486.535 86.2029 487.721 88.7722 cv
1 .498039 .498039 rgb
f
554.994 146 mo
554.976 145.973 554.961 145.949 554.943 145.922 cv
554.923 145.892 554.902 145.861 554.882 145.831 cv
554.868 145.81 554.851 145.784 554.837 145.763 cv
554.809 145.72 554.779 145.676 554.751 145.633 cv
554.751 145.633 li
554.749 145.63 554.749 145.63 554.747 145.627 cv
554.731 145.603 554.715 145.58 554.699 145.556 cv
554.63 145.453 554.561 145.35 554.492 145.247 cv
554.463 140.392 554.155 135.605 553.584 130.898 cv
554.513 135.824 554.994 140.866 554.994 146 cv
.501961 0 0 rgb
f
306.496 145.248 mo
306.525 140.397 306.832 135.61 307.403 130.907 cv
312.175 105.586 328.773 83.3781 352.527 68.0325 cv
343.722 81.6616 337.179 97.641 333.597 115.104 cv
326.621 121.227 320.233 127.745 314.743 134.32 cv
314.738 134.326 314.734 134.331 314.729 134.337 cv
314.721 134.346 314.712 134.357 314.705 134.366 cv
311.676 137.996 308.921 141.644 306.496 145.248 cv
1 .498039 .498039 rgb
f
305.994 146 mo
305.994 140.87 306.475 135.83 307.403 130.907 cv
306.832 135.61 306.525 140.397 306.496 145.248 cv
306.327 145.499 306.16 145.749 305.994 146 cv
305.994 146 305.994 146 305.994 146 cv
.501961 0 0 rgb
f
306.496 145.248 mo
306.496 145.248 li
308.921 141.644 311.676 137.996 314.705 134.366 cv
311.676 137.996 308.921 141.644 306.496 145.248 cv
314.729 134.337 mo
314.734 134.331 314.738 134.326 314.743 134.32 cv
314.738 134.326 314.734 134.331 314.729 134.337 cv
.74902 .498039 .498039 rgb
f
305.994 146 mo
306.16 145.749 306.327 145.499 306.496 145.248 cv
306.496 145.248 li
306.327 145.499 306.16 145.749 305.994 146 cv
305.994 146 305.994 146 305.994 146 cv
.501961 .25098 .25098 rgb
f
453.828 122.664 mo
452.351 116.328 450.446 110.799 448.172 106.008 cv
448.162 105.989 448.152 105.966 448.142 105.947 cv
451.299 106.352 454.28 107.216 456.991 108.555 cv
456.24 114.233 455.034 118.972 453.828 122.664 cv
1 .498039 .498039 rgb
f
448.172 106.008 mo
448.162 105.989 448.152 105.966 448.142 105.947 cv
448.142 105.947 li
448.152 105.966 448.162 105.989 448.172 106.008 cv
.74902 .498039 .498039 rgb
f
407.16 122.664 mo
405.954 118.972 404.749 114.233 403.997 108.555 cv
406.708 107.216 409.688 106.352 412.845 105.947 cv
411.957 107.813 411.127 109.785 410.355 111.88 cv
409.138 115.179 408.067 118.774 407.159 122.665 cv
373.267 88.772 mo
379.675 74.8961 389.046 61.1277 399.599 49.1032 cv
399.599 49.1031 li
389.046 61.1276 379.675 74.8959 373.267 88.7718 cv
373.267 88.772 li
430.495 85.5918 mo
423.862 81.6762 416.341 79.9345 408.317 79.9345 cv
407.11 79.9345 405.889 79.9741 404.661 80.0516 cv
404.661 80.0507 li
404.661 80.0507 li
407.424 63.6674 414.646 44.0166 430.141 22.0005 cv
430.258 22.0002 430.377 22 430.494 22 cv
430.611 22 430.731 22.0002 430.848 22.0005 cv
446.342 44.0166 453.564 63.668 456.327 80.0511 cv
455.099 79.9738 453.877 79.934 452.671 79.934 cv
444.65 79.934 437.125 81.6779 430.495 85.5918 cv
1 .498039 .498039 rgb
f
430.848 22.0005 mo
430.731 22.0002 430.611 22 430.494 22 cv
430.377 22 430.258 22.0002 430.141 22.0005 cv
430.258 21.8338 430.376 21.667 430.494 21.5 cv
430.494 21.5 li
430.494 21.5 li
430.494 21.5 li
430.494 21.5 li
430.494 21.5 li
430.494 21.4996 430.494 21.4996 430.494 21.4996 cv
430.494 21.4996 li
430.494 21.5 430.494 21.5 430.494 21.5 cv
430.494 21.5 li
430.612 21.667 430.73 21.8338 430.848 22.0005 cv
.501961 0 0 rgb
f
403.997 108.555 mo
402.963 100.74 402.79 91.1456 404.661 80.0516 cv
405.889 79.9741 407.11 79.9345 408.317 79.9345 cv
416.341 79.9345 423.862 81.6762 430.495 85.5918 cv
430.495 85.5922 li
430.492 85.5907 li
423.445 89.751 417.405 96.3653 412.845 105.947 cv
409.688 106.352 406.708 107.216 403.997 108.555 cv
373.267 88.7718 mo
379.675 74.8959 389.046 61.1276 399.599 49.1031 cv
404.781 48.0404 410.098 47.2381 415.518 46.7161 cv
419.277 38.8754 424.074 30.6204 430.14 22.0005 cv
430.141 22.0005 li
414.646 44.0166 407.424 63.6674 404.661 80.0507 cv
394.617 80.683 383.91 83.858 373.267 88.7718 cv
.74902 .498039 .498039 rgb
f
430.14 22.0005 mo
430.258 21.8338 430.376 21.6665 430.494 21.4996 cv
430.494 21.5 430.494 21.5 430.494 21.5 cv
430.376 21.667 430.258 21.8338 430.141 22.0005 cv
430.14 22.0005 li
.501961 .25098 .25098 rgb
f
333.597 115.104 mo
337.179 97.641 343.722 81.6616 352.527 68.0325 cv
366.156 59.2277 382.136 52.6843 399.599 49.1032 cv
389.046 61.1277 379.675 74.8961 373.267 88.772 cv
359.387 95.1802 345.625 104.548 333.597 115.104 cv
.992157 .392157 .278431 rgb
f
554.492 145.247 mo
547.664 135.101 538.236 124.623 527.391 115.105 cv
527.391 115.104 li
538.236 124.621 547.664 135.101 554.492 145.247 cv
554.492 145.247 li
456.991 108.555 mo
454.28 107.216 451.299 106.352 448.142 105.947 cv
443.581 96.3647 437.542 89.7522 430.495 85.5918 cv
437.125 81.6779 444.65 79.934 452.671 79.934 cv
453.877 79.934 455.099 79.9738 456.327 80.0511 cv
453.564 63.668 446.342 44.0166 430.848 22.0005 cv
430.848 22.0005 li
436.914 30.6204 441.711 38.8754 445.471 46.7161 cv
450.89 47.2381 456.207 48.0404 461.39 49.1031 cv
469.988 58.9011 477.803 69.8578 483.868 81.0845 cv
485.246 83.6357 486.535 86.2028 487.721 88.7721 cv
487.721 88.7722 li
487.722 88.7728 li
477.079 83.8578 466.372 80.6848 456.327 80.0507 cv
458.198 91.1447 458.025 100.74 456.991 108.555 cv
.74902 .247059 .498039 rgb
f
554.699 145.556 mo
554.63 145.453 554.561 145.35 554.492 145.247 cv
554.492 145.247 li
554.561 145.35 554.63 145.453 554.699 145.556 cv
430.848 22.0005 mo
430.848 22.0005 li
430.73 21.8338 430.612 21.667 430.494 21.5 cv
430.494 21.5 li
430.494 21.5 li
430.494 21.5 li
430.612 21.6665 430.731 21.8338 430.848 22.0005 cv
.501961 0 .25098 rgb
f
448.142 105.947 mo
448.142 105.947 li
443.582 96.3647 437.542 89.7525 430.495 85.5922 cv
430.495 85.5918 li
437.542 89.7522 443.581 96.3647 448.142 105.947 cv
.623529 .247059 .498039 rgb
f
407.16 122.664 mo
407.16 122.664 li
408.067 118.774 409.138 115.179 410.355 111.88 cv
409.138 115.179 408.067 118.773 407.16 122.664 cv
.74902 .247059 .498039 rgb
f
430.14 269.999 mo
430.007 269.999 429.875 269.998 429.741 269.998 cv
419.595 263.17 409.116 253.742 399.599 242.897 cv
404.781 243.96 410.098 244.762 415.518 245.284 cv
419.277 253.125 424.074 261.38 430.14 269.999 cv
404.661 211.949 mo
394.616 211.315 383.909 208.142 373.266 203.227 cv
368.351 192.584 365.179 181.878 364.545 171.833 cv
370.57 172.85 376.149 173.262 381.244 173.262 cv
385.532 173.262 389.478 172.969 393.049 172.497 cv
393.049 172.498 li
398.73 171.747 403.467 170.541 407.16 169.335 cv
407.16 169.335 407.16 169.335 407.16 169.335 cv
405.954 173.027 404.749 177.767 403.997 183.445 cv
403.997 183.445 li
402.963 191.26 402.79 200.855 404.661 211.949 cv
443.838 186.322 mo
439.552 186.322 435.036 185.557 430.496 184.062 cv
438.577 181.401 446.737 176.427 453.829 169.335 cv
453.829 169.335 li
453.828 169.336 453.828 169.336 453.828 169.336 cv
452.811 173.696 451.594 177.671 450.191 181.289 cv
449.547 182.951 448.863 184.541 448.143 186.053 cv
446.739 186.233 445.303 186.322 443.838 186.322 cv
.788235 .576471 .780392 rgb
f
430.494 270.5 mo
430.244 270.334 429.992 270.167 429.741 269.998 cv
429.875 269.998 430.007 269.999 430.14 269.999 cv
430.258 270.166 430.376 270.333 430.494 270.5 cv
.290196 .0784314 .282353 rgb
f
407.16 169.335 mo
407.16 169.335 li
407.16 169.335 407.16 169.335 407.16 169.335 cv
407.16 169.335 li
level3{
gsave
clp
[33 0 0 33 430.494 146 ]ct
/4 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.760784 .54902 .752941 ]
/C1 [.490196 .27451 .482353 ]
/N 2.96295 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33 0 0 33 430.494 146 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83q&
^qdb$^qdb$^qdb$^qd_"^V@Ou^V@Ou^V7Fr^:q=q^:q:o]tM+m]tM(k]Y(ni]Xtef]=Y\d]"5Ja\[f8]
\[]/Z\@B#W\$rfS[^NTO[C*BK['[0GZa-mBZE^[>Yct@8YHP+3Y-"h.XK8M(X/`2"WMuhpW2HPjVPU,c
Unjc\U8"?TTV.pLSt;LDS=H(<R[KS2R$X/*Q'ISuPEM)kOcYWbNfB$WMi3ILM26qAL4t;5K7\Z)J:E#r
~>
<~Mi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3LOMi3IM
MMd:KMMd:KMMd:KMMd7IM2@(GM2@(GM26tDLkpkCLkphALPLY?LPLV=L5(G;KnY57KnY25KS5#3K7ef/
K7\],Jq8K(JUr?%J:N-!It)orIXQWmI=-EiH[C*cH?sj^H$FRYGB\7SG'8"NFEDVGF)l;AEH,r:Df9Q3
DJa6,Chmg$C2%BqBP1siAn>Oa@q/tW@:<PN?X@&E>[1K:>$5!1='&F&<)cdo;Gg7e:JOVY9M7uL8Ou?@
~>
<~^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ls
^:q=q^:q=q^:q=q^:q:o]tM+m]tM+m]tD"j]Y(ni]Y(kg]=Y\e]=YYc]"5Ja]",A^\[f8\\@B&Y\$riU
\$i`R[^NTO[C*BK['[0GZa6sCZEga?Z*:I:Yck76Y-+q0Xf\\+XK/D&WiE(uWMlboVl-DhVPU,bUna][
U8"?TTV.pLSt;LDS=H(<R[TY4R$X/*QBd`"PEV/mOcYZcO,f3ZN/NUOM2@%DLPCM9KS+l-JUi6!IXQTj
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
333.597 176.895 mo
322.752 167.378 313.324 156.898 306.496 146.752 cv
306.495 146.618 306.495 146.487 306.494 146.353 cv
315.114 152.42 323.37 157.218 331.21 160.977 cv
331.732 166.396 332.535 171.713 333.597 176.895 cv
.788235 .576471 .780392 rgb
f
306.496 146.752 mo
306.345 146.528 306.194 146.301 306.046 146.078 cv
306.028 146.051 306.012 146.027 305.994 146 cv
306.161 146.118 306.327 146.236 306.494 146.353 cv
306.495 146.487 306.495 146.618 306.496 146.752 cv
.290196 .0784314 .282353 rgb
f
390.441 163.649 mo
380.859 159.088 374.246 153.049 370.086 146.002 cv
370.086 146.001 li
374.246 153.049 380.859 159.088 390.441 163.649 cv
390.441 163.649 li
392.432 146.001 mo
390.426 139.909 389.734 133.861 390.44 128.352 cv
395.245 126.066 400.798 124.15 407.16 122.666 cv
407.078 122.747 406.999 122.827 406.919 122.908 cv
399.955 129.944 395.063 138.012 392.432 146.001 cv
.788235 .576471 .780392 rgb
f
406.919 122.908 mo
406.999 122.827 407.078 122.747 407.158 122.666 cv
407.16 122.666 407.16 122.666 407.16 122.666 cv
407.079 122.747 406.999 122.827 406.919 122.908 cv
level3{
gsave
clp
[33 0 0 33 430.494 146 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33 0 0 33 430.494 146 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
390.441 163.649 mo
380.859 159.088 374.246 153.049 370.086 146.001 cv
374.246 138.954 380.859 132.913 390.44 128.352 cv
389.734 133.861 390.426 139.909 392.432 146.001 cv
390.426 152.093 389.734 158.14 390.441 163.649 cv
.537255 .576471 .780392 rgb
f
429.741 269.998 mo
429.741 269.998 li
419.595 263.17 409.116 253.742 399.598 242.897 cv
399.599 242.897 li
409.116 253.742 419.595 263.17 429.741 269.998 cv
.780392 .470588 .560784 rgb
f
430.494 270.5 mo
430.244 270.334 429.992 270.167 429.741 269.998 cv
429.741 269.998 li
429.992 270.167 430.244 270.334 430.494 270.5 cv
430.494 270.5 430.494 270.5 430.494 270.5 cv
.533333 .219608 .309804 rgb
f
373.266 203.227 mo
359.391 196.819 345.622 187.448 333.597 176.895 cv
332.535 171.713 331.732 166.396 331.21 160.977 cv
323.37 157.218 315.114 152.42 306.494 146.353 cv
306.494 146.353 li
328.51 161.848 348.163 169.07 364.546 171.834 cv
363.953 162.44 365.581 153.632 370.086 146.002 cv
374.246 153.049 380.859 159.088 390.441 163.649 cv
390.846 166.806 391.71 169.786 393.049 172.497 cv
389.478 172.969 385.532 173.262 381.244 173.262 cv
376.149 173.262 370.57 172.85 364.545 171.833 cv
365.179 181.878 368.351 192.584 373.266 203.227 cv
.780392 .470588 .560784 rgb
f
306.494 146.353 mo
306.327 146.236 306.161 146.118 305.994 146 cv
305.994 146 305.994 146 305.994 146 cv
306.161 146.118 306.327 146.236 306.494 146.353 cv
306.494 146.353 li
.533333 .219608 .309804 rgb
f
430.494 270 mo
430.377 270 430.258 270 430.141 269.999 cv
414.646 247.983 407.424 228.332 404.661 211.949 cv
405.889 212.026 407.111 212.066 408.318 212.066 cv
416.338 212.065 423.863 210.322 430.493 206.408 cv
437.126 210.324 444.648 212.066 452.672 212.065 cv
453.879 212.065 455.099 212.026 456.327 211.948 cv
456.327 211.949 li
456.328 211.949 li
453.564 228.333 446.342 247.983 430.848 269.999 cv
430.731 270 430.611 270 430.494 270 cv
352.527 223.967 mo
328.773 208.622 312.175 186.414 307.403 161.093 cv
306.832 156.388 306.525 151.605 306.496 146.752 cv
313.324 156.898 322.752 167.379 333.597 176.896 cv
337.179 194.359 343.722 210.338 352.527 223.967 cv
382.427 219.982 mo
378.965 214.49 375.871 208.866 373.267 203.228 cv
373.267 203.228 li
375.871 208.866 378.965 214.49 382.427 219.982 cv
412.846 186.053 mo
409.689 185.648 406.708 184.784 403.997 183.445 cv
404.749 177.767 405.954 173.028 407.16 169.336 cv
408.597 175.497 410.436 180.892 412.628 185.591 cv
412.699 185.744 412.774 185.902 412.846 186.053 cv
.686274 .607843 .537255 rgb
f
430.494 270.5 mo
430.494 270.5 li
430.494 270.5 430.494 270.5 430.494 270.5 cv
430.494 270.5 li
430.494 270.5 li
430.494 270.5 li
430.494 270.5 li
430.376 270.333 430.258 270.166 430.141 269.999 cv
430.258 270 430.377 270 430.494 270 cv
430.611 270 430.731 270 430.848 269.999 cv
430.73 270.166 430.612 270.333 430.494 270.5 cv
430.494 270.5 li
430.494 270.5 430.494 270.5 430.494 270.5 cv
430.494 270.5 430.494 270.5 430.494 270.5 cv
430.494 270.5 li
430.494 270.5 430.494 270.5 430.494 270.5 cv
307.403 161.093 mo
306.475 156.171 305.994 151.13 305.994 146 cv
305.994 146 305.994 146 305.994 146 cv
306.012 146.027 306.028 146.051 306.046 146.078 cv
306.194 146.301 306.345 146.528 306.496 146.752 cv
306.525 151.605 306.832 156.388 307.403 161.093 cv
.188235 .109804 .0392157 rgb
f
399.598 242.897 mo
382.135 239.316 366.156 232.772 352.527 223.967 cv
343.722 210.338 337.179 194.359 333.597 176.896 cv
345.625 187.451 359.387 196.82 373.267 203.228 cv
375.871 208.866 378.965 214.49 382.427 219.982 cv
387.485 228.005 393.334 235.758 399.598 242.897 cv
.678431 .501961 .313725 rgb
f
430.141 269.999 mo
430.14 269.999 li
424.074 261.38 419.277 253.125 415.518 245.284 cv
410.098 244.762 404.781 243.96 399.599 242.897 cv
393.334 235.758 387.485 228.005 382.427 219.982 cv
378.965 214.49 375.871 208.866 373.267 203.228 cv
373.267 203.228 li
373.266 203.227 li
383.909 208.142 394.616 211.315 404.661 211.949 cv
402.79 200.855 402.963 191.26 403.997 183.445 cv
406.708 184.784 409.689 185.648 412.846 186.053 cv
417.407 195.635 423.446 202.248 430.493 206.408 cv
423.863 210.322 416.338 212.065 408.318 212.066 cv
407.111 212.066 405.889 212.026 404.661 211.949 cv
407.424 228.332 414.646 247.983 430.141 269.999 cv
.580392 .396078 .427451 rgb
f
430.494 270.5 mo
430.494 270.5 li
430.376 270.333 430.258 270.166 430.14 269.999 cv
430.141 269.999 li
430.258 270.166 430.376 270.333 430.494 270.5 cv
.333333 .14902 .176471 rgb
f
333.597 176.896 mo
322.752 167.379 313.324 156.898 306.496 146.752 cv
306.496 146.752 li
313.324 156.898 322.752 167.378 333.597 176.895 cv
333.597 176.896 li
.580392 .396078 .427451 rgb
f
399.599 242.897 mo
399.598 242.897 li
393.334 235.758 387.485 228.005 382.427 219.982 cv
387.485 228.005 393.334 235.758 399.599 242.897 cv
.576471 .345098 .317647 rgb
f
373.267 203.228 mo
359.387 196.82 345.625 187.451 333.597 176.896 cv
333.597 176.895 li
345.622 187.448 359.391 196.819 373.266 203.227 cv
373.267 203.228 li
f
461.39 242.897 mo
471.942 230.872 481.313 217.104 487.721 203.228 cv
487.721 203.228 li
481.313 217.104 471.942 230.872 461.39 242.897 cv
461.39 242.897 li
508.461 223.968 mo
517.266 210.338 523.81 194.359 527.391 176.896 cv
534.442 170.708 540.89 164.117 546.419 157.471 cv
549.394 153.895 552.103 150.302 554.492 146.753 cv
554.463 151.608 554.155 156.395 553.584 161.102 cv
548.809 186.419 532.212 208.624 508.461 223.968 cv
.686274 .607843 .537255 rgb
f
553.584 161.102 mo
554.155 156.395 554.463 151.608 554.492 146.753 cv
554.661 146.502 554.828 146.251 554.994 146 cv
554.994 146 li
554.994 151.134 554.513 156.176 553.584 161.102 cv
.188235 .109804 .0392157 rgb
f
448.144 186.053 mo
448.863 184.541 449.547 182.951 450.191 181.289 cv
451.594 177.671 452.812 173.695 453.829 169.335 cv
455.034 173.028 456.24 177.767 456.991 183.445 cv
454.28 184.784 451.3 185.648 448.144 186.053 cv
.686274 .607843 .537255 rgb
f
450.191 181.289 mo
451.594 177.671 452.811 173.696 453.828 169.336 cv
453.828 169.336 li
452.812 173.695 451.594 177.671 450.191 181.289 cv
.580392 .396078 .427451 rgb
f
430.848 269.999 mo
436.914 261.38 441.711 253.125 445.471 245.284 cv
450.89 244.762 456.207 243.96 461.39 242.897 cv
451.872 253.742 441.393 263.17 431.247 269.998 cv
431.114 269.998 430.982 269.999 430.848 269.999 cv
.498039 .701961 .607843 rgb
f
430.494 270.5 mo
430.612 270.333 430.731 270.166 430.848 269.999 cv
430.982 269.999 431.114 269.998 431.247 269.998 cv
430.996 270.167 430.745 270.334 430.494 270.5 cv
0 .203922 .109804 rgb
f
456.328 211.949 mo
456.328 211.948 li
456.327 211.948 li
458.199 200.854 458.025 191.26 456.991 183.445 cv
456.992 183.444 li
456.241 177.766 455.035 173.026 453.829 169.335 cv
455.697 169.944 457.832 170.554 460.222 171.105 cv
465.528 172.329 472.085 173.263 479.744 173.262 cv
484.838 173.262 490.421 172.849 496.443 171.833 cv
496.443 171.834 li
496.443 171.833 li
495.809 181.878 492.637 192.584 487.722 203.227 cv
487.722 203.227 li
487.721 203.228 li
477.078 208.142 466.372 211.317 456.328 211.949 cv
430.496 206.409 mo
430.494 206.408 li
437.541 202.247 443.582 195.635 448.143 186.053 cv
448.144 186.053 li
443.583 195.635 437.543 202.249 430.496 206.409 cv
417.151 186.323 mo
415.687 186.323 414.248 186.233 412.846 186.053 cv
412.774 185.902 412.699 185.744 412.628 185.591 cv
410.436 180.892 408.597 175.496 407.16 169.335 cv
407.22 169.395 407.279 169.454 407.339 169.513 cv
414.39 176.51 422.482 181.424 430.496 184.062 cv
425.954 185.558 421.438 186.323 417.151 186.323 cv
.498039 .701961 .607843 rgb
f
407.339 169.513 mo
407.279 169.454 407.22 169.395 407.16 169.335 cv
407.16 169.335 407.16 169.335 407.16 169.335 cv
407.22 169.394 407.279 169.453 407.339 169.513 cv
level3{
gsave
clp
[33 0 0 33 430.494 146 ]ct
/5 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.47451 .678431 .580392 ]
/C1 [.2 .403922 .305882 ]
/N 2.96295 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[33 0 0 33 430.494 146 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+FV
GB\7TGB\7TGB\7TGB\4RG'8%PG'8%PG'.qMF`hhLF`heJFEDVHFEDSFF)uDDEcQ2@EcQ/>EH,u<E,]c8
E,TZ5Df0H1DJj<.D/F**Ci!m&CMIU!C2%BrBP;'lB4kggAn>ObA7T4\@q/tW@:<SP?sd8J?=$oC>[1N<
>?Y35=]ed-=&r@%<E)pr;c6Lj:f'q`:/4MW9M8#N8P)HC7n,s:6psC/5s[b#5<_4n4?GSb3B/rU2Dm<I
~>
<~XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8J'
X/i;%X/i;%X/i;%X/i8#WiE)!WiE)!Wi;tsWMukrWMuhpW2QYnW2QVlVl-GjVP^5fVP^2dV5:#bUnjf^
Una][US=KWU8"?TTqS-PTV.pLT:VXGSt2FCS=H+=S"#k8R[KS3R$a8-Q^=#(Q'IW!P`q;pP*1riOH>Qb
O,f6[NJrgSMi*CKM26tCLPCP;KS4u1JqAQ(J:E&tI=6KiH[:!`G^+FUF`heIF)l8?E,TW3D/=!&C2%?o
~>
<~PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV/m
P*1ukP*1ukP*1ukP*1riOcbcgOcbcgOcYZdOH>QcOH>NaO,o?_O,o<]NfK-[NK&pWNK&mUN/W^SMi3LO
Mi*CLMM[1HM2@%ELkphALPLV=L4t>8KnP,4K7ef.JqAQ)JUi9$It)rsIXZ]nI!g<gH[:!aH$OXZGB\7S
G'.qLFE;MDEcH)<E,TZ4DJa6,CMR["Bk_6nB4baeA7T1Z@UW\Q?XI,F>[1K:>$4s0=&r=$<)Z[l;,C%`
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
430.494 206.408 mo
423.446 202.248 417.407 195.635 412.846 186.053 cv
414.248 186.233 415.687 186.323 417.151 186.323 cv
421.438 186.323 425.954 185.558 430.496 184.062 cv
435.036 185.557 439.552 186.322 443.838 186.322 cv
445.303 186.322 446.739 186.233 448.143 186.053 cv
443.582 195.635 437.541 202.247 430.494 206.408 cv
.392157 .490196 .498039 rgb
f
527.391 176.895 mo
528.454 171.713 529.256 166.396 529.778 160.977 cv
537.619 157.217 545.874 152.42 554.494 146.353 cv
554.493 146.487 554.493 146.619 554.492 146.753 cv
552.103 150.302 549.394 153.895 546.419 157.471 cv
540.891 164.117 534.442 170.707 527.391 176.895 cv
.498039 .701961 .607843 rgb
f
554.492 146.753 mo
554.493 146.619 554.493 146.487 554.494 146.353 cv
554.561 146.306 554.632 146.256 554.699 146.208 cv
554.761 146.165 554.817 146.125 554.879 146.082 cv
554.917 146.055 554.956 146.027 554.994 146 cv
554.994 146 li
554.828 146.251 554.661 146.502 554.492 146.753 cv
0 .203922 .109804 rgb
f
470.548 163.649 mo
470.548 163.647 li
480.13 159.087 486.742 153.046 490.902 145.999 cv
490.903 146 li
486.743 153.048 480.129 159.088 470.548 163.649 cv
468.556 145.999 mo
465.895 137.917 460.921 129.758 453.829 122.665 cv
453.829 122.665 li
453.83 122.665 453.83 122.665 453.83 122.665 cv
459.173 123.911 463.943 125.461 468.18 127.28 cv
468.988 127.627 469.777 127.984 470.547 128.351 cv
471.254 133.86 470.562 139.907 468.556 145.999 cv
.498039 .701961 .607843 rgb
f
470.548 163.647 mo
471.255 158.139 470.562 152.091 468.556 145.999 cv
470.562 139.907 471.254 133.86 470.547 128.351 cv
480.129 132.912 486.742 138.951 490.902 145.999 cv
486.742 153.046 480.13 159.087 470.548 163.647 cv
.247059 .45098 .607843 rgb
f
430.848 269.999 mo
446.342 247.983 453.564 228.333 456.328 211.949 cv
466.372 211.317 477.078 208.142 487.721 203.228 cv
481.313 217.104 471.942 230.872 461.39 242.897 cv
456.207 243.96 450.89 244.762 445.471 245.284 cv
441.711 253.125 436.914 261.38 430.848 269.999 cv
430.848 269.999 li
.341176 .505882 .376471 rgb
f
430.494 270.5 mo
430.612 270.333 430.73 270.166 430.848 269.999 cv
430.848 269.999 li
430.731 270.166 430.612 270.333 430.494 270.5 cv
430.494 270.5 430.494 270.5 430.494 270.5 cv
.0941176 .258824 .129412 rgb
f
452.672 212.065 mo
444.648 212.066 437.126 210.324 430.493 206.408 cv
430.494 206.408 li
430.496 206.409 li
437.543 202.249 443.583 195.635 448.144 186.053 cv
451.3 185.648 454.28 184.784 456.991 183.445 cv
458.025 191.26 458.199 200.854 456.327 211.948 cv
455.099 212.026 453.879 212.065 452.672 212.065 cv
412.846 186.053 mo
412.846 186.053 li
412.774 185.902 412.699 185.744 412.628 185.591 cv
412.699 185.744 412.774 185.902 412.846 186.053 cv
.341176 .505882 .376471 rgb
f
430.493 206.408 mo
423.446 202.248 417.407 195.635 412.846 186.053 cv
412.846 186.053 li
417.407 195.635 423.446 202.248 430.494 206.408 cv
430.493 206.408 li
.290196 .403922 .321569 rgb
f
546.419 157.471 mo
549.394 153.895 552.103 150.302 554.492 146.753 cv
554.492 146.753 li
552.103 150.302 549.394 153.895 546.419 157.471 cv
.341176 .505882 .376471 rgb
f
554.492 146.753 mo
554.492 146.753 li
554.661 146.502 554.828 146.251 554.994 146 cv
554.994 146 li
554.828 146.251 554.661 146.502 554.492 146.753 cv
554.994 146 mo
554.994 146 li
554.994 146 li
554.994 146 li
554.994 146 li
554.994 146 li
.0941176 .258824 .129412 rgb
f
431.247 269.998 mo
441.393 263.17 451.872 253.742 461.39 242.897 cv
478.853 239.316 494.832 232.772 508.461 223.968 cv
493.118 247.718 470.913 264.315 445.596 269.09 cv
440.889 269.661 436.102 269.969 431.247 269.998 cv
1 1 .498039 rgb
f
430.494 270.5 mo
430.494 270.5 li
430.745 270.334 430.996 270.167 431.247 269.998 cv
436.102 269.969 440.889 269.661 445.596 269.09 cv
440.67 270.019 435.628 270.5 430.494 270.5 cv
.501961 .501961 0 rgb
f
487.721 203.228 mo
487.722 203.227 li
501.598 196.819 515.367 187.448 527.391 176.895 cv
527.391 176.896 li
515.363 187.452 501.601 196.82 487.721 203.228 cv
467.939 172.497 mo
465.133 172.126 462.556 171.644 460.222 171.105 cv
457.833 170.554 455.697 169.944 453.83 169.335 cv
460.192 167.851 465.743 165.936 470.548 163.649 cv
470.143 166.806 469.278 169.786 467.939 172.497 cv
496.443 171.833 mo
496.443 171.833 li
496.443 171.833 li
497.036 162.44 495.408 153.631 490.903 146 cv
490.903 146 li
490.903 145.998 li
495.407 138.368 497.035 129.56 496.442 120.166 cv
512.826 122.93 532.478 130.152 554.494 145.647 cv
554.494 145.764 554.494 145.883 554.494 146 cv
554.494 146.117 554.494 146.236 554.494 146.353 cv
545.874 152.42 537.619 157.217 529.778 160.976 cv
529.778 160.977 li
517.593 166.819 506.412 170.152 496.443 171.833 cv
470.547 128.351 mo
469.777 127.984 468.988 127.627 468.18 127.28 cv
463.943 125.461 459.172 123.911 453.829 122.665 cv
457.522 121.46 462.261 120.254 467.939 119.503 cv
469.278 122.214 470.142 125.194 470.547 128.351 cv
508.461 68.0326 mo
494.832 59.2278 478.853 52.6844 461.39 49.1032 cv
451.873 38.2584 441.393 28.8297 431.247 22.0023 cv
436.102 22.0311 440.888 22.3388 445.595 22.9102 cv
470.912 27.6851 493.118 44.2818 508.461 68.0326 cv
1 1 .498039 rgb
f
554.494 146.353 mo
554.494 146.236 554.494 146.117 554.494 146 cv
554.494 145.883 554.494 145.764 554.494 145.647 cv
554.581 145.708 554.672 145.772 554.76 145.834 cv
554.801 145.863 554.838 145.889 554.879 145.918 cv
554.917 145.945 554.956 145.973 554.994 146 cv
554.994 146 li
554.994 146 li
554.956 146.027 554.917 146.055 554.879 146.082 cv
554.817 146.125 554.761 146.165 554.699 146.208 cv
554.632 146.256 554.561 146.306 554.494 146.353 cv
445.595 22.9102 mo
440.888 22.3388 436.102 22.0311 431.247 22.0023 cv
430.996 21.8334 430.745 21.6656 430.494 21.5 cv
430.494 21.4996 430.494 21.4996 430.494 21.4996 cv
435.628 21.5 440.669 21.9813 445.595 22.9102 cv
.501961 .501961 0 rgb
f
490.903 145.998 mo
486.742 138.951 480.129 132.911 470.547 128.351 cv
470.142 125.194 469.278 122.214 467.939 119.503 cv
471.51 119.031 475.456 118.738 479.744 118.738 cv
484.84 118.738 490.419 119.15 496.443 120.166 cv
495.809 110.122 492.637 99.4156 487.722 88.7728 cv
501.598 95.1809 515.367 104.552 527.391 115.105 cv
528.454 120.287 529.256 125.604 529.778 131.023 cv
537.619 134.783 545.874 139.58 554.494 145.647 cv
554.494 145.647 li
532.478 130.152 512.826 122.93 496.442 120.166 cv
497.035 129.56 495.407 138.368 490.903 145.998 cv
.74902 .74902 .498039 rgb
f
461.39 49.1032 mo
461.39 49.1031 li
451.872 38.2582 441.393 28.8299 431.247 22.0023 cv
431.247 22.0023 li
441.393 28.8297 451.873 38.2584 461.39 49.1032 cv
f
431.247 22.0023 mo
431.247 22.0023 li
430.996 21.8334 430.745 21.6656 430.494 21.5 cv
430.494 21.4996 430.494 21.4996 430.494 21.4996 cv
430.745 21.6656 430.996 21.8334 431.247 22.0023 cv
.501961 .501961 .25098 rgb
f
527.391 115.104 mo
515.363 104.549 501.601 95.1804 487.721 88.7722 cv
486.535 86.2029 485.246 83.6357 483.868 81.0845 cv
477.803 69.8578 469.989 58.9011 461.39 49.1032 cv
478.853 52.6844 494.832 59.2278 508.461 68.0326 cv
517.266 81.6617 523.81 97.6411 527.391 115.104 cv
1 .74902 .247059 rgb
f
527.391 115.105 mo
515.367 104.552 501.598 95.1809 487.722 88.7728 cv
487.721 88.7722 li
501.601 95.1804 515.363 104.549 527.391 115.104 cv
527.391 115.105 li
483.868 81.0845 mo
477.803 69.8578 469.988 58.9011 461.39 49.1031 cv
461.39 49.1032 li
469.989 58.9011 477.803 69.8578 483.868 81.0845 cv
.87451 .623529 .247059 rgb
f
461.39 242.897 mo
471.942 230.872 481.313 217.104 487.721 203.228 cv
501.601 196.82 515.363 187.452 527.391 176.896 cv
523.81 194.359 517.266 210.338 508.461 223.968 cv
494.832 232.772 478.853 239.316 461.39 242.897 cv
.843137 .803922 .266667 rgb
f
487.722 203.227 mo
492.637 192.584 495.809 181.878 496.443 171.833 cv
506.412 170.152 517.593 166.819 529.778 160.977 cv
529.256 166.396 528.454 171.713 527.391 176.895 cv
515.367 187.448 501.598 196.819 487.722 203.227 cv
479.744 173.262 mo
472.085 173.263 465.528 172.329 460.222 171.105 cv
462.556 171.644 465.133 172.126 467.939 172.497 cv
469.278 169.786 470.143 166.806 470.548 163.649 cv
480.129 159.088 486.743 153.048 490.903 146 cv
495.408 153.631 497.036 162.44 496.443 171.833 cv
490.421 172.849 484.838 173.262 479.744 173.262 cv
.74902 .85098 .301961 rgb
f
468.18 127.28 mo
463.943 125.461 459.173 123.911 453.83 122.665 cv
453.83 122.665 li
459.172 123.911 463.943 125.461 468.18 127.28 cv
f
176.5 146 mo
176 146 li
176 154.976 172.363 163.098 166.481 168.981 cv
160.598 174.863 152.476 178.5 143.5 178.5 cv
134.524 178.5 126.402 174.863 120.519 168.981 cv
114.637 163.098 111 154.976 111 146 cv
111 137.024 114.637 128.902 120.519 123.019 cv
126.402 117.137 134.524 113.5 143.5 113.5 cv
152.476 113.5 160.598 117.137 166.481 123.019 cv
172.363 128.902 176 137.024 176 146 cv
176.5 146 li
177 146 li
177 127.498 162.002 112.5 143.5 112.5 cv
124.998 112.5 110 127.498 110 146 cv
110 164.502 124.998 179.5 143.5 179.5 cv
162.002 179.5 177 164.502 177 146 cv
176.5 146 li
cp
0 0 0 rgb
f
121.933 124.434 mo
120.957 125.409 119.374 125.409 118.398 124.434 cv
117.422 123.457 117.422 121.874 118.397 120.898 cv
119.374 119.922 120.957 119.922 121.934 120.898 cv
122.909 121.874 122.909 123.457 121.933 124.434 cv
cp
f
121.933 124.434 mo
121.58 124.08 li
121.188 124.471 120.679 124.665 120.166 124.665 cv
119.652 124.665 119.143 124.471 118.751 124.08 cv
118.36 123.688 118.166 123.179 118.166 122.665 cv
118.166 122.152 118.36 121.643 118.751 121.251 cv
119.143 120.86 119.652 120.666 120.166 120.666 cv
120.679 120.666 121.188 120.86 121.58 121.252 cv
121.971 121.643 122.165 122.152 122.165 122.665 cv
122.165 123.179 121.971 123.688 121.579 124.08 cv
121.933 124.434 li
122.287 124.787 li
122.872 124.202 123.166 123.431 123.165 122.665 cv
123.166 121.899 122.871 121.129 122.287 120.544 cv
121.702 119.96 120.932 119.665 120.166 119.666 cv
119.399 119.665 118.629 119.96 118.044 120.544 cv
117.46 121.129 117.165 121.899 117.166 122.665 cv
117.165 123.431 117.459 124.202 118.044 124.787 cv
118.629 125.372 119.4 125.666 120.166 125.665 cv
120.931 125.666 121.702 125.372 122.287 124.787 cv
121.933 124.434 li
cp
f
21.5 146 mo
21.5 147.381 20.3809 148.5 19 148.5 cv
17.6191 148.5 16.5 147.381 16.5 146 cv
16.5 144.619 17.6191 143.5 19 143.5 cv
20.3809 143.5 21.5 144.619 21.5 146 cv
cp
f
21.5 146 mo
21 146 li
20.998 147.105 20.1046 147.998 19 148 cv
17.8954 147.998 17.002 147.105 17 146 cv
17.002 144.895 17.8954 144.002 19 144 cv
20.1046 144.002 20.998 144.895 21 146 cv
21.5 146 li
22 146 li
21.9997 144.343 20.6571 143 19 143 cv
17.3429 143 16.0003 144.343 16 146 cv
16.0003 147.657 17.3429 149 19 149 cv
20.6571 149 21.9997 147.657 22 146 cv
21.5 146 li
cp
f
165.067 124.434 mo
164.091 123.457 164.091 121.874 165.067 120.897 cv
166.043 119.922 167.626 119.922 168.603 120.898 cv
169.578 121.874 169.579 123.457 168.603 124.434 cv
167.626 125.41 166.043 125.409 165.067 124.434 cv
cp
f
165.067 124.434 mo
165.421 124.08 li
165.029 123.688 164.835 123.179 164.835 122.666 cv
164.835 122.152 165.029 121.643 165.421 121.251 cv
165.812 120.86 166.321 120.666 166.834 120.666 cv
167.348 120.666 167.857 120.86 168.249 121.252 cv
168.64 121.643 168.834 122.152 168.834 122.666 cv
168.834 123.179 168.64 123.688 168.249 124.08 cv
167.857 124.471 167.348 124.665 166.835 124.665 cv
166.321 124.665 165.812 124.471 165.42 124.08 cv
165.067 124.434 li
164.713 124.787 li
165.298 125.372 166.068 125.666 166.835 125.665 cv
167.6 125.666 168.371 125.372 168.956 124.787 cv
169.541 124.202 169.835 123.432 169.834 122.666 cv
169.835 121.899 169.541 121.129 168.956 120.544 cv
168.371 119.959 167.6 119.665 166.834 119.666 cv
166.068 119.665 165.298 119.96 164.713 120.544 cv
164.129 121.129 163.834 121.899 163.835 122.666 cv
163.834 123.432 164.129 124.202 164.713 124.787 cv
165.067 124.434 li
cp
f
143.5 24 mo
142.119 24 141 22.8809 141 21.5 cv
141 20.1191 142.119 19 143.5 19 cv
144.881 19 146 20.1191 146 21.5 cv
146 22.8809 144.881 24 143.5 24 cv
cp
f
143.5 24 mo
143.5 23.5 li
142.395 23.498 141.502 22.6046 141.5 21.5 cv
141.502 20.3954 142.395 19.502 143.5 19.5 cv
144.605 19.502 145.498 20.3954 145.5 21.5 cv
145.498 22.6046 144.605 23.498 143.5 23.5 cv
143.5 24 li
143.5 24.5 li
145.157 24.4997 146.5 23.1571 146.5 21.5 cv
146.5 19.8429 145.157 18.5003 143.5 18.5 cv
141.843 18.5003 140.5 19.8429 140.5 21.5 cv
140.5 23.1571 141.843 24.4997 143.5 24.5 cv
143.5 24 li
cp
f
165.066 167.567 mo
166.043 166.591 167.626 166.591 168.603 167.567 cv
169.579 168.543 169.579 170.126 168.603 171.103 cv
167.626 172.079 166.043 172.079 165.067 171.103 cv
164.091 170.126 164.091 168.543 165.066 167.567 cv
cp
f
165.066 167.567 mo
165.42 167.921 li
165.812 167.529 166.321 167.335 166.834 167.335 cv
167.348 167.335 167.857 167.529 168.249 167.921 cv
168.64 168.312 168.834 168.821 168.835 169.335 cv
168.834 169.848 168.64 170.357 168.249 170.749 cv
167.857 171.14 167.348 171.334 166.835 171.335 cv
166.321 171.334 165.812 171.14 165.42 170.749 cv
165.029 170.357 164.835 169.848 164.835 169.334 cv
164.835 168.821 165.029 168.312 165.42 167.92 cv
165.066 167.567 li
164.713 167.213 li
164.128 167.798 163.834 168.568 163.835 169.334 cv
163.834 170.1 164.128 170.871 164.713 171.456 cv
165.298 172.041 166.068 172.335 166.835 172.335 cv
167.601 172.335 168.371 172.041 168.956 171.456 cv
169.541 170.871 169.835 170.101 169.835 169.335 cv
169.835 168.568 169.541 167.798 168.956 167.213 cv
168.371 166.629 167.601 166.334 166.834 166.335 cv
166.068 166.334 165.298 166.629 164.713 167.213 cv
165.066 167.567 li
cp
f
265.5 146 mo
265.5 144.619 266.619 143.5 268 143.5 cv
269.381 143.5 270.5 144.619 270.5 146 cv
270.5 147.381 269.381 148.5 268 148.5 cv
266.619 148.5 265.5 147.381 265.5 146 cv
cp
f
265.5 146 mo
266 146 li
266.002 144.895 266.895 144.002 268 144 cv
269.105 144.002 269.998 144.895 270 146 cv
269.998 147.105 269.105 147.998 268 148 cv
266.895 147.998 266.002 147.105 266 146 cv
265.5 146 li
265 146 li
265 147.657 266.343 149 268 149 cv
269.657 149 271 147.657 271 146 cv
271 144.343 269.657 143 268 143 cv
266.343 143 265 144.343 265 146 cv
265.5 146 li
cp
f
121.934 167.567 mo
122.909 168.543 122.91 170.126 121.934 171.103 cv
120.957 172.079 119.374 172.079 118.397 171.103 cv
117.421 170.126 117.421 168.543 118.397 167.567 cv
119.374 166.59 120.957 166.591 121.934 167.567 cv
cp
f
121.934 167.567 mo
121.58 167.92 li
121.971 168.312 122.165 168.821 122.166 169.335 cv
122.165 169.848 121.971 170.357 121.58 170.749 cv
121.188 171.141 120.679 171.334 120.166 171.335 cv
119.652 171.334 119.143 171.14 118.751 170.749 cv
118.36 170.357 118.166 169.848 118.165 169.335 cv
118.166 168.821 118.36 168.312 118.751 167.92 cv
119.143 167.529 119.652 167.335 120.166 167.335 cv
120.679 167.335 121.188 167.529 121.58 167.921 cv
121.934 167.567 li
122.287 167.213 li
121.702 166.629 120.932 166.334 120.166 166.335 cv
119.399 166.334 118.629 166.628 118.044 167.213 cv
117.459 167.798 117.165 168.568 117.165 169.335 cv
117.165 170.101 117.459 170.871 118.044 171.456 cv
118.629 172.041 119.399 172.335 120.166 172.335 cv
120.932 172.335 121.702 172.041 122.287 171.456 cv
122.872 170.871 123.166 170.101 123.166 169.335 cv
123.166 168.569 122.872 167.798 122.287 167.213 cv
121.934 167.567 li
cp
f
143.5 268 mo
144.881 268 146 269.119 146 270.5 cv
146 271.881 144.881 273 143.5 273 cv
142.119 273 141 271.881 141 270.5 cv
141 269.119 142.119 268 143.5 268 cv
cp
f
143.5 268 mo
143.5 268.5 li
144.605 268.502 145.498 269.395 145.5 270.5 cv
145.498 271.605 144.605 272.498 143.5 272.5 cv
142.395 272.498 141.502 271.605 141.5 270.5 cv
141.502 269.395 142.395 268.502 143.5 268.5 cv
143.5 268 li
143.5 267.5 li
141.843 267.5 140.5 268.843 140.5 270.5 cv
140.5 272.157 141.843 273.5 143.5 273.5 cv
145.157 273.5 146.5 272.157 146.5 270.5 cv
146.5 268.843 145.157 267.5 143.5 267.5 cv
143.5 268 li
cp
f
120.519 123.02 mo
131.513 112.022 145.093 106.174 156.843 106.178 cv
164.358 106.18 171.108 108.556 176.027 113.473 cv
180.945 118.392 183.32 125.142 183.322 132.657 cv
183.326 144.407 177.478 157.988 166.481 168.981 cv
167.188 169.689 li
178.346 158.527 184.319 144.737 184.322 132.657 cv
184.324 124.937 181.869 117.899 176.734 112.766 cv
171.601 107.632 164.564 105.176 156.843 105.178 cv
144.764 105.182 130.974 111.154 119.812 122.312 cv
120.519 123.02 li
cp
.968627 .576471 .117647 rgb
f
19.5 146 mo
19.5005 118.559 33.3435 93.7018 55.7782 75.6791 cv
78.2111 57.6596 109.229 46.4993 143.5 46.5 cv
177.771 46.4993 208.789 57.6596 231.222 75.6791 cv
253.656 93.7018 267.499 118.559 267.5 146 cv
268.5 146 li
268.5 118.212 254.473 93.0696 231.848 74.8995 cv
209.221 56.7261 177.988 45.5007 143.5 45.5 cv
109.012 45.5007 77.7792 56.7261 55.152 74.8995 cv
32.5266 93.0697 18.4995 118.212 18.5 146 cv
19.5 146 li
cp
f
166.481 123.019 mo
177.478 134.012 183.326 147.593 183.322 159.343 cv
183.32 166.858 180.944 173.608 176.027 178.527 cv
171.108 183.445 164.358 185.821 156.843 185.823 cv
145.093 185.826 131.512 179.978 120.519 168.981 cv
119.812 169.689 li
130.973 180.846 144.763 186.819 156.843 186.823 cv
164.563 186.824 171.601 184.369 176.734 179.234 cv
181.868 174.101 184.324 167.063 184.322 159.343 cv
184.318 147.263 178.346 133.473 167.189 122.312 cv
166.481 123.019 li
cp
f
143.5 22 mo
170.941 22.0005 195.798 35.8435 213.821 58.2782 cv
231.84 80.7111 243.001 111.729 243 146 cv
243.001 180.271 231.84 211.289 213.821 233.722 cv
195.798 256.156 170.941 269.999 143.5 270 cv
143.5 271 li
171.288 271 196.43 256.973 214.601 234.348 cv
232.774 211.721 243.999 180.488 244 146 cv
243.999 111.512 232.774 80.2792 214.601 57.652 cv
196.43 35.0266 171.288 20.9995 143.5 21 cv
143.5 22 li
cp
f
166.481 168.981 mo
155.488 179.978 141.907 185.826 130.157 185.822 cv
122.642 185.82 115.892 183.445 110.973 178.527 cv
106.056 173.608 103.68 166.858 103.678 159.343 cv
103.674 147.593 109.522 134.013 120.519 123.02 cv
119.812 122.312 li
108.654 133.474 102.682 147.264 102.678 159.343 cv
102.676 167.064 105.132 174.101 110.266 179.234 cv
115.399 184.369 122.437 186.824 130.157 186.822 cv
142.237 186.819 156.027 180.846 167.188 169.689 cv
166.481 168.981 li
cp
f
267.5 146 mo
267.499 173.441 253.656 198.298 231.222 216.321 cv
208.789 234.34 177.771 245.501 143.5 245.5 cv
109.229 245.501 78.2113 234.34 55.7784 216.321 cv
33.3436 198.298 19.5005 173.441 19.5 146 cv
18.5 146 li
18.4995 173.788 32.5267 198.93 55.1522 217.101 cv
77.7794 235.274 109.012 246.499 143.5 246.5 cv
177.988 246.499 209.221 235.274 231.848 217.101 cv
254.473 198.93 268.5 173.788 268.5 146 cv
267.5 146 li
cp
f
120.519 168.981 mo
109.522 157.988 103.674 144.407 103.677 132.657 cv
103.679 125.142 106.055 118.392 110.973 113.473 cv
115.892 108.556 122.642 106.18 130.157 106.178 cv
141.907 106.174 155.488 112.022 166.481 123.019 cv
167.189 122.312 li
156.027 111.154 142.237 105.181 130.157 105.178 cv
122.437 105.176 115.399 107.632 110.266 112.766 cv
105.131 117.899 102.676 124.937 102.677 132.657 cv
102.681 144.737 108.654 158.527 119.812 169.689 cv
120.519 168.981 li
cp
f
143.5 270 mo
116.059 269.999 91.2018 256.156 73.1791 233.722 cv
55.1596 211.289 43.9993 180.271 44 146 cv
43.9993 111.729 55.1596 80.7113 73.1791 58.2784 cv
91.2018 35.8436 116.059 22.0005 143.5 22 cv
143.5 21 li
115.712 20.9995 90.5696 35.0267 72.3995 57.6522 cv
54.2261 80.2794 43.0007 111.512 43 146 cv
43.0007 180.488 54.2261 211.721 72.3995 234.348 cv
90.5697 256.973 115.712 271 143.5 271 cv
143.5 270 li
cp
f
143.092 21.211 mo
121.557 51.6104 115.736 77.5918 115.738 96.751 cv
115.738 107.917 117.712 116.763 119.69 122.821 cv
120.641 122.51 li
118.691 116.539 116.738 107.798 116.738 96.751 cv
116.739 77.7956 122.481 52.0415 143.908 21.789 cv
143.092 21.211 li
cp
1 0 0 rgb
f
143.092 21.789 mo
164.519 52.0415 170.261 77.7956 170.262 96.751 cv
170.262 107.798 168.309 116.539 166.359 122.51 cv
167.31 122.821 li
169.288 116.763 171.262 107.917 171.262 96.751 cv
171.264 77.5919 165.443 51.6104 143.908 21.211 cv
143.092 21.789 li
cp
f
18.711 146.408 mo
49.1104 167.943 75.0918 173.764 94.251 173.762 cv
105.417 173.762 114.263 171.788 120.321 169.81 cv
120.01 168.859 li
114.039 170.809 105.298 172.762 94.251 172.762 cv
75.2956 172.761 49.5415 167.019 19.289 145.592 cv
18.711 146.408 li
cp
f
19.289 146.408 mo
49.5415 124.981 75.2956 119.239 94.251 119.238 cv
105.298 119.238 114.039 121.191 120.01 123.141 cv
120.321 122.19 li
114.263 120.212 105.417 118.238 94.251 118.238 cv
75.0919 118.236 49.1104 124.057 18.711 145.592 cv
19.289 146.408 li
cp
f
143.908 270.789 mo
165.443 240.39 171.264 214.408 171.262 195.249 cv
171.262 184.083 169.288 175.237 167.31 169.179 cv
166.359 169.49 li
168.309 175.461 170.262 184.201 170.262 195.249 cv
170.261 214.204 164.519 239.958 143.092 270.211 cv
143.908 270.789 li
cp
f
143.908 270.211 mo
122.481 239.958 116.739 214.204 116.738 195.249 cv
116.738 184.201 118.691 175.461 120.641 169.49 cv
119.69 169.179 li
117.712 175.237 115.738 184.083 115.738 195.249 cv
115.736 214.408 121.557 240.39 143.092 270.789 cv
143.908 270.211 li
cp
f
268.289 145.592 mo
237.89 124.057 211.908 118.236 192.749 118.238 cv
181.583 118.238 172.737 120.212 166.679 122.19 cv
166.99 123.141 li
172.961 121.191 181.701 119.238 192.749 119.238 cv
211.704 119.239 237.458 124.981 267.711 146.408 cv
268.289 145.592 li
cp
f
267.711 145.592 mo
237.458 167.019 211.704 172.761 192.749 172.762 cv
181.701 172.762 172.961 170.809 166.99 168.859 cv
166.679 169.81 li
172.737 171.788 181.583 173.762 192.749 173.762 cv
211.908 173.764 237.89 167.943 268.289 146.408 cv
267.711 145.592 li
cp
f
143.224 21.0829 mo
127.517 31.4719 110.969 48.1284 98.3246 66.6959 cv
85.6857 85.2652 76.9402 105.74 76.9345 123.823 cv
76.932 134.326 79.9032 144.034 86.8005 152.004 cv
93.6964 159.976 104.486 166.192 120.052 169.821 cv
120.279 168.848 li
104.855 165.25 94.2789 159.122 87.5568 151.35 cv
80.8362 143.578 77.9371 134.143 77.9345 123.823 cv
77.9289 106.064 86.577 85.7196 99.1512 67.2587 cv
111.72 48.7961 128.205 32.212 143.776 21.9171 cv
143.224 21.0829 li
cp
f
143.224 21.9171 mo
158.795 32.2119 175.28 48.7961 187.849 67.2587 cv
200.423 85.7196 209.071 106.064 209.065 123.823 cv
209.063 134.143 206.164 143.578 199.443 151.35 cv
192.721 159.122 182.145 165.25 166.721 168.848 cv
166.948 169.821 li
182.514 166.192 193.304 159.976 200.199 152.004 cv
207.097 144.034 210.068 134.326 210.065 123.823 cv
210.06 105.74 201.314 85.2652 188.675 66.6959 cv
176.031 48.1284 159.483 31.472 143.776 21.0829 cv
143.224 21.9171 li
cp
f
18.5829 146.276 mo
28.9719 161.983 45.6284 178.531 64.1959 191.175 cv
82.7652 203.814 103.24 212.56 121.323 212.565 cv
131.826 212.568 141.534 209.597 149.504 202.699 cv
157.476 195.804 163.692 185.014 167.321 169.448 cv
166.348 169.221 li
162.75 184.645 156.622 195.221 148.85 201.943 cv
141.078 208.664 131.643 211.563 121.323 211.565 cv
103.564 211.571 83.2196 202.923 64.7587 190.349 cv
46.2961 177.78 29.712 161.295 19.4171 145.724 cv
18.5829 146.276 li
cp
f
19.4171 146.276 mo
29.7119 130.705 46.2961 114.22 64.7587 101.651 cv
83.2196 89.077 103.564 80.4288 121.323 80.4345 cv
131.643 80.4371 141.078 83.3362 148.85 90.0568 cv
156.622 96.7789 162.75 107.355 166.348 122.779 cv
167.321 122.552 li
163.692 106.986 157.476 96.1963 149.504 89.3005 cv
141.534 82.4032 131.826 79.432 121.323 79.4345 cv
103.24 79.4402 82.7652 88.1857 64.1959 100.825 cv
45.6284 113.469 28.972 130.017 18.5829 145.724 cv
19.4171 146.276 li
cp
f
268.417 145.724 mo
258.028 130.017 241.372 113.469 222.804 100.825 cv
204.235 88.1857 183.76 79.4402 165.677 79.4345 cv
155.174 79.432 145.466 82.4032 137.496 89.3005 cv
129.523 96.1964 123.308 106.986 119.679 122.552 cv
120.652 122.779 li
124.25 107.355 130.378 96.7789 138.15 90.0568 cv
145.922 83.3362 155.357 80.4371 165.677 80.4345 cv
183.436 80.4289 203.78 89.077 222.241 101.651 cv
240.704 114.22 257.288 130.705 267.583 146.276 cv
268.417 145.724 li
cp
f
267.583 145.724 mo
257.288 161.295 240.704 177.78 222.241 190.349 cv
203.78 202.923 183.436 211.571 165.677 211.565 cv
155.357 211.563 145.922 208.664 138.15 201.943 cv
130.378 195.221 124.25 184.645 120.652 169.221 cv
119.679 169.448 li
123.308 185.014 129.523 195.804 137.496 202.699 cv
145.466 209.597 155.174 212.568 165.677 212.565 cv
183.76 212.56 204.235 203.814 222.804 191.175 cv
241.372 178.531 258.028 161.983 268.417 146.276 cv
267.583 145.724 li
cp
f
143.776 270.917 mo
159.483 260.528 176.031 243.872 188.675 225.304 cv
201.314 206.735 210.06 186.26 210.065 168.177 cv
210.068 157.674 207.097 147.966 200.199 139.996 cv
193.304 132.023 182.514 125.808 166.948 122.179 cv
166.721 123.152 li
182.145 126.75 192.721 132.878 199.443 140.65 cv
206.164 148.422 209.063 157.857 209.065 168.177 cv
209.071 185.936 200.423 206.28 187.849 224.741 cv
175.28 243.204 158.795 259.788 143.224 270.083 cv
143.776 270.917 li
cp
f
143.776 270.083 mo
128.205 259.788 111.72 243.204 99.1512 224.741 cv
86.577 206.28 77.9288 185.936 77.9345 168.177 cv
77.9371 157.857 80.8362 148.422 87.5568 140.65 cv
94.2789 132.878 104.855 126.75 120.279 123.152 cv
120.052 122.179 li
104.486 125.808 93.6963 132.023 86.8005 139.996 cv
79.9032 147.966 76.932 157.674 76.9345 168.177 cv
76.9402 186.26 85.6857 206.735 98.3246 225.304 cv
110.969 243.872 127.517 260.528 143.224 270.917 cv
143.776 270.083 li
cp
f
463.494 146 mo
462.994 146 li
462.994 154.976 459.357 163.098 453.475 168.981 cv
447.592 174.863 439.47 178.5 430.494 178.5 cv
421.517 178.5 413.396 174.863 407.513 168.981 cv
401.631 163.098 397.994 154.976 397.994 146 cv
397.994 137.024 401.631 128.902 407.513 123.019 cv
413.396 117.137 421.517 113.5 430.494 113.5 cv
439.47 113.5 447.592 117.137 453.475 123.019 cv
459.357 128.902 462.994 137.024 462.994 146 cv
463.494 146 li
463.994 146 li
463.994 127.498 448.995 112.5 430.494 112.5 cv
411.991 112.5 396.994 127.498 396.994 146 cv
396.994 164.502 411.991 179.5 430.494 179.5 cv
448.995 179.5 463.994 164.502 463.994 146 cv
463.494 146 li
cp
0 0 0 rgb
f
408.927 124.434 mo
407.951 125.409 406.367 125.409 405.392 124.434 cv
404.416 123.457 404.416 121.874 405.391 120.898 cv
406.367 119.922 407.951 119.922 408.928 120.898 cv
409.902 121.874 409.902 123.457 408.927 124.434 cv
cp
f
408.927 124.434 mo
408.573 124.08 li
408.182 124.471 407.673 124.665 407.159 124.665 cv
406.645 124.665 406.136 124.471 405.745 124.08 cv
405.354 123.688 405.16 123.179 405.16 122.665 cv
405.16 122.151 405.354 121.643 405.744 121.251 cv
406.136 120.86 406.645 120.666 407.159 120.666 cv
407.673 120.666 408.182 120.86 408.574 121.252 cv
408.964 121.643 409.158 122.151 409.159 122.665 cv
409.158 123.179 408.964 123.688 408.573 124.08 cv
408.927 124.434 li
409.28 124.787 li
409.865 124.202 410.159 123.431 410.159 122.665 cv
410.159 121.899 409.865 121.129 409.282 120.545 cv
408.697 119.96 407.925 119.665 407.159 119.666 cv
406.393 119.665 405.622 119.96 405.037 120.544 cv
404.453 121.129 404.159 121.899 404.16 122.665 cv
404.159 123.431 404.453 124.202 405.038 124.787 cv
405.622 125.372 406.393 125.666 407.159 125.665 cv
407.925 125.666 408.696 125.372 409.28 124.787 cv
408.927 124.434 li
cp
f
308.494 146 mo
308.494 147.381 307.375 148.5 305.994 148.5 cv
304.613 148.5 303.494 147.381 303.494 146 cv
303.494 144.619 304.613 143.5 305.994 143.5 cv
307.375 143.5 308.494 144.619 308.494 146 cv
cp
f
308.494 146 mo
307.994 146 li
307.992 147.105 307.098 147.998 305.994 148 cv
304.889 147.998 303.996 147.105 303.994 146 cv
303.996 144.895 304.889 144.002 305.994 144 cv
307.098 144.002 307.992 144.895 307.994 146 cv
308.494 146 li
308.994 146 li
308.993 144.343 307.651 143 305.994 143 cv
304.336 143 302.994 144.343 302.994 146 cv
302.994 147.657 304.336 149 305.994 149 cv
307.651 149 308.993 147.657 308.994 146 cv
308.494 146 li
cp
f
452.061 124.434 mo
451.084 123.457 451.084 121.874 452.061 120.897 cv
453.037 119.922 454.619 119.922 455.596 120.898 cv
456.572 121.874 456.572 123.457 455.596 124.434 cv
454.619 125.41 453.037 125.409 452.061 124.434 cv
cp
f
452.061 124.434 mo
452.414 124.08 li
452.022 123.688 451.829 123.179 451.828 122.666 cv
451.829 122.152 452.022 121.643 452.414 121.251 cv
452.806 120.86 453.314 120.666 453.827 120.666 cv
454.341 120.666 454.85 120.86 455.242 121.252 cv
455.634 121.643 455.828 122.152 455.828 122.666 cv
455.828 123.179 455.634 123.688 455.242 124.08 cv
454.85 124.471 454.341 124.665 453.828 124.665 cv
453.315 124.665 452.806 124.471 452.414 124.08 cv
452.061 124.434 li
451.707 124.787 li
452.292 125.372 453.062 125.666 453.828 125.665 cv
454.594 125.666 455.365 125.372 455.949 124.787 cv
456.534 124.203 456.829 123.432 456.828 122.666 cv
456.829 121.899 456.534 121.129 455.949 120.544 cv
455.364 119.959 454.593 119.665 453.827 119.666 cv
453.062 119.665 452.291 119.96 451.707 120.544 cv
451.122 121.128 450.828 121.899 450.828 122.666 cv
450.828 123.432 451.122 124.203 451.707 124.787 cv
452.061 124.434 li
cp
f
430.494 24 mo
429.113 24 427.994 22.8809 427.994 21.5 cv
427.994 20.1191 429.113 19 430.494 19 cv
431.875 19 432.994 20.1191 432.994 21.5 cv
432.994 22.8809 431.875 24 430.494 24 cv
cp
f
430.494 24 mo
430.494 23.5 li
429.39 23.498 428.496 22.6046 428.494 21.5 cv
428.496 20.3954 429.39 19.502 430.494 19.5 cv
431.599 19.502 432.492 20.3954 432.494 21.5 cv
432.492 22.6046 431.599 23.498 430.494 23.5 cv
430.494 24 li
430.494 24.5 li
432.151 24.4997 433.494 23.1571 433.494 21.5 cv
433.494 19.8429 432.151 18.5003 430.494 18.5 cv
428.837 18.5003 427.494 19.8429 427.494 21.5 cv
427.494 23.1571 428.837 24.4997 430.494 24.5 cv
430.494 24 li
cp
f
452.061 167.567 mo
453.037 166.591 454.619 166.591 455.596 167.567 cv
456.572 168.543 456.572 170.126 455.596 171.103 cv
454.619 172.079 453.037 172.079 452.061 171.103 cv
451.084 170.126 451.084 168.543 452.061 167.567 cv
cp
f
452.061 167.567 mo
452.414 167.921 li
452.806 167.529 453.315 167.335 453.828 167.335 cv
454.341 167.335 454.85 167.529 455.242 167.921 cv
455.634 168.312 455.828 168.821 455.828 169.335 cv
455.828 169.848 455.634 170.357 455.242 170.749 cv
454.85 171.14 454.341 171.334 453.828 171.335 cv
453.315 171.334 452.806 171.14 452.414 170.749 cv
452.022 170.357 451.829 169.848 451.828 169.335 cv
451.829 168.821 452.022 168.312 452.414 167.921 cv
452.061 167.567 li
451.707 167.213 li
451.122 167.798 450.828 168.568 450.828 169.335 cv
450.828 170.101 451.122 170.871 451.707 171.456 cv
452.292 172.041 453.062 172.335 453.828 172.335 cv
454.594 172.335 455.365 172.041 455.949 171.456 cv
456.534 170.871 456.829 170.101 456.828 169.335 cv
456.829 168.568 456.534 167.798 455.949 167.213 cv
455.365 166.629 454.594 166.334 453.828 166.335 cv
453.062 166.334 452.292 166.629 451.707 167.213 cv
452.061 167.567 li
cp
f
552.494 146 mo
552.494 144.619 553.613 143.5 554.994 143.5 cv
556.375 143.5 557.494 144.619 557.494 146 cv
557.494 147.381 556.375 148.5 554.994 148.5 cv
553.613 148.5 552.494 147.381 552.494 146 cv
cp
f
552.494 146 mo
552.994 146 li
552.996 144.895 553.89 144.002 554.994 144 cv
556.099 144.002 556.992 144.895 556.994 146 cv
556.992 147.105 556.099 147.998 554.994 148 cv
553.89 147.998 552.996 147.105 552.994 146 cv
552.494 146 li
551.994 146 li
551.994 147.657 553.337 149 554.994 149 cv
556.651 149 557.994 147.657 557.994 146 cv
557.994 144.343 556.651 143 554.994 143 cv
553.337 143 551.994 144.343 551.994 146 cv
552.494 146 li
cp
f
408.928 167.567 mo
409.902 168.543 409.904 170.126 408.928 171.103 cv
407.951 172.079 406.367 172.079 405.391 171.103 cv
404.415 170.126 404.415 168.543 405.391 167.567 cv
406.367 166.59 407.951 166.591 408.928 167.567 cv
cp
f
408.928 167.567 mo
408.574 167.92 li
408.965 168.312 409.159 168.822 409.159 169.335 cv
409.159 169.849 408.965 170.357 408.574 170.749 cv
408.182 171.14 407.673 171.334 407.159 171.335 cv
406.645 171.334 406.136 171.14 405.744 170.749 cv
405.353 170.357 405.159 169.848 405.159 169.335 cv
405.159 168.821 405.353 168.312 405.744 167.92 cv
406.136 167.529 406.645 167.335 407.159 167.335 cv
407.673 167.335 408.182 167.529 408.574 167.921 cv
408.928 167.567 li
409.281 167.213 li
408.697 166.629 407.926 166.334 407.159 166.335 cv
406.393 166.334 405.622 166.628 405.037 167.213 cv
404.452 167.798 404.158 168.568 404.159 169.335 cv
404.158 170.101 404.452 170.871 405.037 171.456 cv
405.622 172.041 406.393 172.335 407.159 172.335 cv
407.925 172.335 408.697 172.041 409.281 171.456 cv
409.866 170.872 410.16 170.101 410.159 169.335 cv
410.16 168.569 409.866 167.798 409.282 167.214 cv
408.928 167.567 li
cp
f
430.494 268 mo
431.875 268 432.994 269.119 432.994 270.5 cv
432.994 271.881 431.875 273 430.494 273 cv
429.113 273 427.994 271.881 427.994 270.5 cv
427.994 269.119 429.113 268 430.494 268 cv
cp
f
430.494 268 mo
430.494 268.5 li
431.599 268.502 432.492 269.395 432.494 270.5 cv
432.492 271.605 431.599 272.498 430.494 272.5 cv
429.39 272.498 428.496 271.605 428.494 270.5 cv
428.496 269.395 429.39 268.502 430.494 268.5 cv
430.494 268 li
430.494 267.5 li
428.837 267.5 427.494 268.843 427.494 270.5 cv
427.494 272.157 428.837 273.5 430.494 273.5 cv
432.151 273.5 433.494 272.157 433.494 270.5 cv
433.494 268.843 432.151 267.5 430.494 267.5 cv
430.494 268 li
cp
f
407.513 123.02 mo
418.506 112.022 432.087 106.174 443.837 106.178 cv
451.352 106.18 458.102 108.556 463.021 113.473 cv
467.939 118.392 470.315 125.142 470.316 132.657 cv
470.32 144.407 464.472 157.988 453.475 168.981 cv
454.182 169.689 li
465.34 158.527 471.313 144.737 471.316 132.657 cv
471.318 124.937 468.863 117.899 463.729 112.766 cv
458.595 107.632 451.557 105.176 443.837 105.178 cv
431.757 105.182 417.967 111.154 406.806 122.312 cv
407.513 123.02 li
cp
.968627 .576471 .117647 rgb
f
306.494 146 mo
306.494 118.559 320.337 93.7018 342.772 75.6791 cv
365.205 57.6596 396.223 46.4993 430.494 46.5 cv
464.765 46.4993 495.783 57.6596 518.216 75.6791 cv
540.65 93.7018 554.494 118.559 554.494 146 cv
555.494 146 li
555.495 118.212 541.467 93.0696 518.842 74.8995 cv
496.214 56.7261 464.982 45.5007 430.494 45.5 cv
396.006 45.5007 364.773 56.7261 342.146 74.8995 cv
319.52 93.0696 305.493 118.212 305.494 146 cv
306.494 146 li
cp
f
453.475 123.019 mo
464.472 134.012 470.32 147.593 470.316 159.343 cv
470.314 166.858 467.938 173.608 463.02 178.527 cv
458.102 183.445 451.351 185.821 443.836 185.823 cv
432.087 185.826 418.506 179.978 407.513 168.981 cv
406.806 169.689 li
417.967 180.846 431.757 186.819 443.836 186.823 cv
451.557 186.824 458.594 184.369 463.728 179.234 cv
468.862 174.101 471.318 167.063 471.316 159.343 cv
471.312 147.263 465.34 133.473 454.182 122.312 cv
453.475 123.019 li
cp
f
430.494 22 mo
457.935 22.0005 482.792 35.8435 500.815 58.2782 cv
518.834 80.7111 529.995 111.729 529.994 146 cv
529.995 180.271 518.834 211.289 500.815 233.722 cv
482.792 256.156 457.935 269.999 430.494 270 cv
430.494 271 li
458.282 271 483.424 256.973 501.595 234.348 cv
519.768 211.721 530.993 180.488 530.994 146 cv
530.993 111.512 519.768 80.2792 501.595 57.652 cv
483.424 35.0266 458.282 20.9995 430.494 21 cv
430.494 22 li
cp
f
453.475 168.981 mo
442.481 179.978 428.9 185.826 417.15 185.822 cv
409.636 185.82 402.885 183.445 397.967 178.527 cv
393.049 173.608 390.674 166.858 390.672 159.343 cv
390.668 147.593 396.516 134.013 407.513 123.02 cv
406.806 122.312 li
395.648 133.474 389.675 147.263 389.672 159.343 cv
389.67 167.064 392.125 174.101 397.26 179.234 cv
402.393 184.369 409.43 186.824 417.15 186.822 cv
429.23 186.819 443.02 180.846 454.182 169.689 cv
453.475 168.981 li
cp
f
554.494 146 mo
554.494 173.441 540.651 198.298 518.216 216.321 cv
495.783 234.34 464.765 245.501 430.494 245.5 cv
396.223 245.501 365.205 234.34 342.772 216.321 cv
320.337 198.298 306.494 173.441 306.494 146 cv
305.494 146 li
305.493 173.788 319.52 198.93 342.146 217.101 cv
364.773 235.274 396.005 246.499 430.494 246.5 cv
464.983 246.499 496.215 235.274 518.842 217.101 cv
541.467 198.93 555.495 173.788 555.494 146 cv
554.494 146 li
cp
f
407.513 168.981 mo
396.516 157.988 390.668 144.407 390.671 132.657 cv
390.673 125.142 393.049 118.392 397.967 113.473 cv
402.885 108.556 409.636 106.18 417.151 106.178 cv
428.901 106.174 442.481 112.022 453.475 123.019 cv
454.182 122.312 li
443.02 111.154 429.23 105.181 417.151 105.178 cv
409.43 105.176 402.393 107.632 397.26 112.766 cv
392.125 117.899 389.669 124.937 389.671 132.657 cv
389.675 144.737 395.648 158.527 406.806 169.689 cv
407.513 168.981 li
cp
f
430.494 270 mo
403.053 269.999 378.196 256.156 360.173 233.722 cv
342.154 211.289 330.993 180.271 330.994 146 cv
330.993 111.729 342.154 80.7113 360.173 58.2784 cv
378.196 35.8436 403.053 22.0005 430.494 22 cv
430.494 21 li
402.706 20.9995 377.564 35.0267 359.394 57.6522 cv
341.22 80.2794 329.995 111.512 329.994 146 cv
329.995 180.488 341.22 211.721 359.394 234.348 cv
377.564 256.973 402.706 271 430.494 271 cv
430.494 270 li
cp
f
430.086 21.211 mo
408.551 51.6108 402.729 77.5926 402.731 96.7518 cv
402.731 107.917 404.705 116.763 406.684 122.821 cv
407.634 122.51 li
405.684 116.539 403.731 107.799 403.731 96.7518 cv
403.733 77.7963 409.475 52.042 430.902 21.789 cv
430.086 21.211 li
cp
1 0 0 rgb
f
430.086 21.789 mo
451.512 52.0411 457.254 77.7948 457.256 96.7502 cv
457.256 107.798 455.303 116.539 453.353 122.51 cv
454.303 122.821 li
456.281 116.763 458.256 107.916 458.256 96.7502 cv
458.258 77.5911 452.437 51.61 430.902 21.211 cv
430.086 21.789 li
cp
f
305.705 146.408 mo
336.104 167.943 362.086 173.764 381.245 173.762 cv
392.41 173.762 401.257 171.788 407.314 169.81 cv
407.004 168.859 li
401.032 170.809 392.292 172.762 381.245 172.762 cv
362.289 172.761 336.535 167.019 306.283 145.592 cv
305.705 146.408 li
cp
f
306.283 146.408 mo
336.535 124.981 362.289 119.239 381.245 119.238 cv
392.292 119.238 401.032 121.191 407.004 123.141 cv
407.314 122.19 li
401.257 120.212 392.41 118.238 381.245 118.238 cv
362.086 118.236 336.104 124.057 305.705 145.592 cv
306.283 146.408 li
cp
f
430.902 270.789 mo
452.437 240.39 458.258 214.409 458.256 195.25 cv
458.256 184.084 456.281 175.237 454.303 169.179 cv
453.353 169.49 li
455.303 175.461 457.256 184.202 457.256 195.25 cv
457.254 214.205 451.512 239.959 430.086 270.211 cv
430.902 270.789 li
cp
f
430.902 270.211 mo
409.475 239.958 403.733 214.204 403.731 195.248 cv
403.731 184.201 405.684 175.461 407.634 169.49 cv
406.684 169.179 li
404.705 175.237 402.731 184.083 402.731 195.248 cv
402.729 214.407 408.551 240.389 430.086 270.789 cv
430.902 270.211 li
cp
f
555.283 145.592 mo
524.884 124.057 498.902 118.236 479.743 118.238 cv
468.577 118.238 459.73 120.212 453.673 122.19 cv
453.983 123.141 li
459.955 121.191 468.695 119.238 479.743 119.238 cv
498.698 119.239 524.453 124.981 554.705 146.408 cv
555.283 145.592 li
cp
f
554.705 145.592 mo
524.453 167.019 498.698 172.761 479.743 172.762 cv
468.695 172.762 459.955 170.809 453.983 168.859 cv
453.673 169.81 li
459.73 171.788 468.577 173.762 479.743 173.762 cv
498.902 173.764 524.884 167.943 555.283 146.408 cv
554.705 145.592 li
cp
f
430.218 21.0829 mo
414.511 31.472 397.963 48.1285 385.319 66.6961 cv
372.68 85.2654 363.934 105.74 363.928 123.823 cv
363.926 134.326 366.897 144.034 373.794 152.004 cv
380.69 159.976 391.48 166.192 407.046 169.821 cv
407.273 168.848 li
391.848 165.25 381.273 159.122 374.551 151.35 cv
367.83 143.578 364.931 134.143 364.928 123.823 cv
364.923 106.064 373.571 85.7198 386.145 67.2589 cv
398.714 48.7962 415.199 32.212 430.77 21.917 cv
430.218 21.0829 li
cp
f
430.218 21.9171 mo
445.789 32.2119 462.274 48.796 474.843 67.2586 cv
487.417 85.7194 496.065 106.064 496.059 123.823 cv
496.056 134.143 493.157 143.577 486.437 151.35 cv
479.715 159.122 469.139 165.25 453.715 168.848 cv
453.942 169.821 li
469.507 166.192 480.297 159.976 487.193 152.004 cv
494.09 144.033 497.061 134.326 497.059 123.823 cv
497.053 105.74 488.308 85.265 475.669 66.6958 cv
463.025 48.1283 446.477 31.4719 430.77 21.0829 cv
430.218 21.917 li
cp
f
305.577 146.276 mo
315.965 161.983 332.622 178.531 351.189 191.175 cv
369.758 203.814 390.233 212.56 408.317 212.565 cv
418.819 212.568 428.527 209.597 436.498 202.699 cv
444.47 195.804 450.686 185.014 454.315 169.448 cv
453.341 169.221 li
449.744 184.645 443.615 195.221 435.844 201.943 cv
428.071 208.664 418.636 211.563 408.317 211.565 cv
390.557 211.571 370.213 202.923 351.752 190.349 cv
333.289 177.78 316.705 161.295 306.411 145.724 cv
305.577 146.276 li
cp
f
306.411 146.276 mo
316.705 130.705 333.289 114.22 351.752 101.651 cv
370.213 89.077 390.557 80.4288 408.317 80.4345 cv
418.636 80.4371 428.071 83.3362 435.844 90.0568 cv
443.615 96.7789 449.744 107.355 453.341 122.779 cv
454.315 122.552 li
450.686 106.986 444.47 96.1963 436.498 89.3005 cv
428.527 82.4032 418.819 79.432 408.317 79.4345 cv
390.233 79.4402 369.758 88.1857 351.189 100.825 cv
332.622 113.469 315.965 130.017 305.577 145.724 cv
306.411 146.276 li
cp
f
555.411 145.724 mo
545.022 130.017 528.365 113.469 509.797 100.825 cv
491.228 88.1857 470.753 79.4402 452.67 79.4345 cv
442.167 79.432 432.46 82.4032 424.489 89.3005 cv
416.517 96.1964 410.301 106.986 406.672 122.552 cv
407.646 122.779 li
411.243 107.355 417.372 96.7789 425.143 90.0568 cv
432.916 83.3362 442.35 80.4371 452.67 80.4345 cv
470.429 80.4288 490.774 89.077 509.235 101.651 cv
527.697 114.22 544.282 130.705 554.577 146.276 cv
555.411 145.724 li
cp
f
554.577 145.724 mo
544.282 161.295 527.697 177.78 509.235 190.349 cv
490.774 202.923 470.429 211.571 452.67 211.565 cv
442.35 211.563 432.916 208.664 425.143 201.943 cv
417.372 195.221 411.243 184.645 407.646 169.221 cv
406.672 169.448 li
410.301 185.014 416.517 195.804 424.489 202.699 cv
432.46 209.597 442.167 212.568 452.67 212.565 cv
470.753 212.56 491.228 203.814 509.797 191.175 cv
528.365 178.531 545.022 161.983 555.411 146.276 cv
554.577 145.724 li
cp
f
430.77 270.917 mo
446.477 260.528 463.025 243.872 475.669 225.304 cv
488.308 206.735 497.053 186.26 497.059 168.177 cv
497.061 157.674 494.09 147.966 487.193 139.996 cv
480.297 132.024 469.507 125.808 453.942 122.179 cv
453.715 123.152 li
469.139 126.75 479.715 132.878 486.437 140.65 cv
493.157 148.422 496.056 157.857 496.059 168.177 cv
496.065 185.936 487.417 206.28 474.843 224.741 cv
462.274 243.204 445.789 259.788 430.218 270.083 cv
430.77 270.917 li
cp
f
430.77 270.083 mo
415.199 259.788 398.714 243.204 386.145 224.741 cv
373.571 206.28 364.923 185.936 364.928 168.176 cv
364.931 157.857 367.83 148.422 374.551 140.65 cv
381.273 132.878 391.848 126.75 407.273 123.152 cv
407.046 122.179 li
391.48 125.808 380.69 132.023 373.794 139.995 cv
366.897 147.966 363.926 157.674 363.928 168.176 cv
363.934 186.259 372.68 206.735 385.319 225.304 cv
397.963 243.871 414.511 260.528 430.218 270.917 cv
430.77 270.083 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Vincent Pilaud) ()%%Title: (2triangCylinderStars.eps)%%CreationDate: 29/10/12 22:49%%Canvassize: 16383%AI9_DataStream%Gb"-6l]N70FXHkdq%!4uD93lML#:^#CMT6(<N2)hPhOb8LL]&C2@*S60nW+P)GR7+NV"3:Ys%!TKh#1<05NJEPnIMZWq;8>lg]&r%4?iT%q"F#4?bCdXLZ@-=rPcLYI0sIk9AJ-qm6:@,^V0Qq_cIY`4>")-knp2BS`+9(3U#jSDdRnjqVf]r:Z&j6naP(1Vmikd^AI13%qpRLMhs>jgr"&GEoDS]6GkL@hTD-B-cX6V=h'[um0;"kD^3VcRIJ<U6qgDS</gq.uoAeFU?[_I*?bcT,LNgMcVqOt;53FDFo+feE%e`(KrrqeW-?@Ddk_l$Ju_\[h&R_Jb.?aS/Tn'<'3^Sh'0:BG\0=+>FaqtH$I_Um-5q,\)6rqjIDU\k)ScaC$%Dng\ur8%DP9((re%6K;>3]3de8rpnV2pCBA8H!+f]iY_=foXE[K_rJA#Uj^1*XY9S"r;1Wb*rbg&iQo93R<nDoc24tWrD?&]l,sku:PX/_5C<5+d_J5I%7c]'pk#Yp)H?f1R2_X(3&.a7TjO%>KrSle$(@h"Z=3pp9Q&Rc)s2tkdIfAaG&+=5OhnJs`rQDZgIXrZc=0rObSq$A$DJe=(^3k1s%laOXj*^=?`m<_TT$uaMM[BtAG>^rmQ&;N1^m!kuN[@e#1*)uPZ/\sZbHhiG`DgnBcCS1X_]9cm+b8C-*6o45FGmmLGoJ>i(3_SL^%s8Lu:G+PYuoZOX#>-M@_-I)JbO$mr*T"i4>`P/O$hl/u`#O9LgoCpQcoqCLGIs^tBrUHBO+L6_#V1eka`W'H+s3o(^;o8!fn81em%2C81mI)aY+<3<[2<d^n^GL_S_C-A2k:7Bdfs)AQd^4E3&^g1I.0)UG'ES'H.]1s_9GrjoRdg>c=chR3]Xqaa)chRKeQ=m#6dU27"%Zmahk8c(]Jh'_t>G@=2?+*V-e2H'>\,JsJj#:%+c(q7bC4GtrQIsf+hn3:ZNH'4UN,5dLAj#9Rb-F>5..IH.JN!o[GT(<h2[Q`oc%bd#BdbS'oA-Y;AeHg/079j1'5D2mllq1lR955^J1A-HPonsuj!IcE&>cW4.[7@qKnn39*FFL(o@?[@_Fr/\HD55[(7-r_D^.da!"%UB1#Bkf;7JqBrV0]4Bc7?=`-FHh:S>-1+=L[U+!0rPLc8SP^_'LSn_5nh%k:s)FCP2o[4d,1#7ugk4#A4u(3g]d#<\/I6J<%3)Dd%[@ubM.7+EN05O?ohPGEOldDr[)gZBP@UkV9j">+QC7",FHhf$PQ^oST/8HkZ,;l"eT@!&<gZ=jZ-am72SRqE"d_8PedJZ[eG^?20%gZe#RgFTPoJ0*B;iotSDXKU2^CKKed-UV#2++=T!%/MVHq.BRWruf&FDuD9fG+Y!C-0oLFf:%(nJ'5U`j`BnAG1V5!K7($)Q@HrM%HsV<G^YL8]G>baGQ@JZ'np10crtbV^r#BL-s(,KtZ[J"o1qo>Q\X`*iI6.#l?*`@YJ"P&290Moj-bncT./2*;=2-o?[tfu^54ip1%UE4$]s7lQ\f=SZ&D>3([G#nnH7/K9"lridY>2._Ynq3NmgE,?gJ#:Y:=3pQp:@1HA:L$D]lI`K!ma-$(54S6B<Y'bQ0)GM%Q04LE%kM#6(P-f[OLNY_Ndd_FTm;hEg_]^"c&oc`3([;<NfLo8/f/'q.E``eZD6Up_*6Te&qIuU5Y"*)`CV%"&XE/RkVh8m01]<S6#PsG[%kt/H*8os%d0)G4MVFDLFmGjqG"<&0NHt98EmW=NU:p8Gm\/6+676MM^CINPj9%q$24k*8?X,l#-jutVs[EDb<MUKObkaCT#%P*Y0%BcakX'#-0h&(Fj0GNEu64C]f"^7nu?9DG])/l2DuqD.ee>9@p7hSJDcD*4"0:s(b`K%WOreB_p<eTHpEI3n/`*TeEc*.%YSs&"*!%[V>/D738R0>1\/%RHB_16Z`PHX"N2^a?;/XQSOT6r^$^2+/k\'Wpd2@o:Y[^)+*]S,a<9AT>[iZ)]A==-&GNpnt3JECVB@.K0VWm%XugUsM=rujI#+n%M`/o[9!*);/#^GMH0o%i^QOVo^.m,GZdCL@NIU]TjuHSif6WI&B):moHQ6`>W9oK@%gl`o_A#`%j@W>8"M4$0%ruSYeSEYLbj!Cu63M1\ciNH1g?&,tsZ*9I:C=51d>VfZgA!pQ:MWp.[,W\^kU6S#lE#`[F5,L@rI@'3D`oH;2g1)t:EM]f7mC_+c%juGX<=7fg/6sXs?QRIVtMEBJS5dT$rcJ%LbmFZ)_6jH8?<c&B-LYCn*BM>rgUX6LPO"9GH`o@i6]fT&aaK^"i\uuVX?aLEIA]aB"%3I`l[[J!>N5t@V5NGLe[%T2!Fd0cFTKkN<uQB#S+P&o]:a>;j%[b$q2e9(r%ha9jW13=QFB]mN/`jOO:f2t<h[PGdlG\(PVBjMhW%iO.Vd[K0o$ne848H^OWhZoZ`]adl$-^3BP"IoYWCLFo\q]d-7jURD_b]&6*P%=WCMG;9ZfC\ek7Tu(T`oVQC,5*m>"\P*nXlS_@:%cAuhG*(4EN^,D7M<,;Qf9A/FQ606:8/%NGof%m,P`p5C>ni5'K2&i8U:dNsd+*.`nV(Kp;_n9aBm2p(E=p<G1#;ZZk=AndV;i!'#%j%V_c_mG.'P=._Xo6a<8%$igC)A_ZiU.8DUStVS!Fl_(8qUfKCg3r;"ca']_f'u14k:"c.C:C?m6$@kRh73`gA*)Xg'h(_l+(q2)%IrW"]04j0k2CYTlQ:L>b3m#[R*Cr59c]sdc:)o\BO8X<:Mse91h^-``/aZe.]no3?m6o>[`$W&82fgd<nLg/-"'TgO)\pApF5W;M%1-84*GH!RjIHF47e)J3BEaE5nCHosdM?!0rV-.SjXqj^RNDhjcBJJKkXZ#78X`WXs)JeY@Dq3BdpR%J?om5_h)_K#$<0r!u*N!oT%%]8,6O"ajZDGrA&PN55)ng67A7OquFObUe=fV-GrK8qhL2c0S,Yu3IE4H3(iXR4tbg.cF\9^DM/V]IasR3l'7fC`5B_H-DY#SSd)%Oc7r'i0Gk-Q'08C\j%`J=fe[+XmB@5X,NBh0BpC(Eu?Y0[!&B2*?%o^gT;DZgU*T,GJN>s?#eHO-^e=9.UkmRV\T//Bc-0l[[N4Z%Is>kjMeA/jg?Q!/aH3&O?Ks?FKY$sT&k?_13RD(qOH"T8[+<SiBuEMJfrX6%9G^)j7+X_JY`*k^]$%^3dN*X7$Xf-l9k:,(LS+g5%bWH99WNPsI]T\$cY@H,VZo<(q)JQuXM'LLLo_3?2jaQR+j$[[-%r2u`UE!'nrQoiYnf#ue@1T]`:Y,[H:tpf_#9K)OLS,l&]5"*L%+4&5N+]0tT-)d)4R7"%gqCk)"F<\GVFk#.)i\FKaQ%.LZGmgfo5I16U>*TlfGO36[N[J#dHeH%+ThuIt@sr(H-e,He<d<cS$IcXI%24dm/#^_MQ'U,`=/_+SekVFJ/YPqYm;P$';WOD8dCTK+Z#4DiKR=)C2^<gLp-uAcjV+>`9`j),Em1N-ca-$-24X7`+s$^T>(X:[N%>RP&%C\sG4NU`UcVH:k($(YiL8Vl*l&Y?/UUXnjHlL,mIBDu^n$"hGi(&j,_3Ct=T*jB1,(ch<24f>QW8:I1e(1btb,LWuC>4IM7%O?.DH@"SYdCDq\6+2(dQ#H<F<[;'B\ntNar*>jb(b4o$E][;[H]s#)q]jPB[k7W(/O%G@+)R])<U&(%\B^8@^n?.imN`\$mn`%.^%8*?/U*N';RmX"c/pOMbm,52a@(qbmu+^l_dBfk)Vjn%]lcdPWIG$VA4%4<,74:6F0IAl=sL.W#6be)q6G"85IS%3h+Z"n1*(q4a-%8DZ$j#8PU7N/(g?RE+^g`1G#$op07C;ahq.B0.q,aMdI\QagcE]Z6LTpX=pWI8qAtdgB^@H,NQl9mO?djj5kCCWt;_1ODd+pj6[K%0ZG@)msF$I+)Vb(Uo/HtkI.V@Ksc/a'0R^KNTP8nVSi5rksBaHZ@Q<>3qCuOf>*ur1!=-p?E/(!s+rlc'Zb,Xg+;Y\)8$k*.gl6-%\Fk8A/)OoeI\g=*!meCI&`[t?Sc"f"@mE7S>Acpc0Q$M7PnR5b4\4&^Z;&$;AcipCkBjhh"F]^9H)GHV&RHOP>0%$ZBn=m>cRhi`%O*IP)SkD*[GW+J/P.IRA)RH&+kB\/n=Cp%JI:)`c`G25p[:Ih.@J4t;S+Y"6arN4/6+RZ-(UQAYV0KYK$Me[WDUB13S+c@Zh/dg\%CtAo`6./o"E!,RhUOBV[/G)0]reJIheR;bFC"Jn.3NMr)IDm+*%$muR\*$c[\nk5e?+Z/Rn&%4cHX-=$WPd%2]_i*abo9IJ,q"E7%O=iO3o9Q%u5,3k>g'5\ke*.2eANMak=:_Zm!d5bukj]p!/@[.nKF;ei&$uejWPj,&8.Tj5fr',aleBIJG\Ldmq=G[?1f#0uXo)Gd%24A7S+Sp.7CMkXe9fH5:kH%%EI?O1.r17LcG3E)g.\[_fAtUq)6?]d8Nkd/B`q]U/ZQ;lQg*/aqlm-AlWfPZ?#?rcPj!BmBC6GKr%6cnb"q'NKil94%:NA;M$3j;`=@6=(lp'Xe[XZsH6ihp5aDem\ZB2(TsD*O3_FC88"0Q-l`obYk]-p<eI\d-7mdrtC'chTHCH)ikG%ml3csl#*4WX!`/BSl`+qcbL:OR77W-eKJ>U`8r\uUQ.S1mlQpJHq0XrQ*s1lY.-_aU,h9LVG\>=ciA4"Z6%H@g=uq>=5\e(D5:<U%P+RAIF81qEk/o_X;]T"NERW7QfKX1$_5b?<;pT02]$KV"bsWgpE0MH-9bG#FHe6t)6"Z*%"2#LWA(\Ik>I*,\Bk1VpRS2Q$5$336%R>d\aiKH,]7,,5UL5/242uI)hZ%q/q^qIN5"BdJ-2XY+p0l#3\Lo623,X.Pt)f1m_.Z<ZL>2\9gUD$G"s"cbD=C_>mok.IFIG;2q%es_TqKAI+#36hV]7L<`+.8@Fm]cAnO?g<'pWtYM0'=,BX(AqC=F8Tneh1\r$,lEK`A$;IYAfE[oT7sGg)&L:Dqfh(UFtXC(Q()cC%d&2!udlhSs>%S.[]NSh2U"+G_FeG!JOOgkTAW9"5(r'T%PS$K&Bn[t%Sgn@j.Fo;WN/Qe"5?*fu-a(#%QliN9q'maF<7\Rq'lW4.%n5Ttm'TGb(V70%&U-!2ModZasZ/6:s8ou,rZKJo+c`Q13j2JOM(6A*3KOmCp]#nPF_08.VeY02e>GU]-5"hfXDPP`:*JJ+MO*p27%(TV2T``IQ9TU++]4Suq)`M%JO_U8f3QSSsY6g0rhqoI3_27eE02t/ojbpmAc<R@7-6Ljp/*ND[5M#hkUc)=9E%R/V"s),*Fe`W&I%p:1.qTnpVI!T18_EJ/nnPuT0eRs;=-?*#M.lu2gJle8VPV(4\Bm3:,#-plC<!bqp`=BehPJ+oKjc5JofDmOb4-@L!rl^;>W\pGMf%O2ft,phLd]D;ilBQ:6S;Yh[L7NkAkai]oSjA.OZtLu*l)nr\>`4>PThhuSVp>1@;Haf2[rAt@&Wl'(7p[];<3Si?S)p%,M/pGEk5%XZ]u\h50m@RuCDWZrt_^CGB^u"-])hq`+(?]u-ku1XI\1r.$S3%m4V&EJ.>%\)-T?IYSHQDE[m81YaT,_T\DPCHU-r37]DP/cNI?%H0[]e*E+<4>07:8igm4iG2FKE^o#ZBj>X?FPi5Y;G!>2Ror2I?aeK-nQ$R/"<SLs?UMQ@Ib.%T9+4Zc/F&F';E6EB:?&bbS<]fpU%q$sI5F$8::/9Zl7?=l:#]MWG+Fj^0+ZFqI>JToL-a)\Zg`f:,0BE`1VmN_$">+=NFf5jA_s&sc_fdC(%TR<(RDEgguqs]uG,C:qn%I?D0/i.LBa_!X4]-6)l,iE\ejT4T[VHcFWLgKmu_HLTHFb:_2Wk#cBUkUlA[2=S.oiTD@HWnk=o]LjD'O)$#K2nK7%JOsZs3*heu%4]c;;KB/hbQg/[aHcUI]B9pu$o7]rFaXJ-oa0j#'$elHJ2;oOXc8JKscX:lZFsm,3W%?dKc'l\Hq2&0V8`HSP%%\np:A-t1+3-hL%S4Xj1JZnFWOK[.aSt,r/%V?Z"6'38[,?jRcl<THs][j],ep\`?dJ(T4ZN$d]O*J_u1@rXLhfG)-HU\Bi-R)2SVL-U$+t]LINT]p$%e5pM(CYhU[6e>SbMp+uCqj]EJY2j;WD=h)4Y'V7SjFTp-WgNgs#Sjgqg##_VQ[X8[DOsMk!NKDulo3V(e4R4Lbrr^?j-fM,cpsZr%Ni'WFp?^HoAC"S]n$HBh/(qs7@lCB235iS1rYP:$5n^<Qa.&M[q\\/qiFhL!@"4?X#Ahu@)`M=r4)Z/[f/Y!67Qlk2&uIe"%0H7%%AoW/cN,(J(TV_eY907haY%(miG3;Q_j[1oEGYup$IZ@`s:u\!fmYBu,gLt&Ar$:]?3hN%WHh?B`eL\-2Sj$pjr?c,r(YcFT]=IMU%47qla"T._4cQ8"SqL)O"^$j>?Xo9"ur*@YXdnfDhHi`/rr,m>_)F2EJ%$LAL]=5!#r^"9i^\OAF*o;DFV'$3BoB6/KQL94t#)L%M%5Opc3o1r_A9jdkT]=2-sq=efVs*".C_\[7kj^J2TGJISb@K0.'o"Q5P]`7g,B>:9MDr88+l8^P\oN?,-m-C#,+.bZGq;or;[CYt1%kO0Jcng-HC+78fH5CN:qqmZ$#YE/_Sm2'-EHItI[lhcH]D]\Ume,>b#4hQ+<jd2oIs*iTbJ+LYY^H[5Bj`e3(l)WucT"j$$q;Wec%I@t<ORYL=N2fG;&Iej"k9n3*`r#jhmm,al'NotN)pLr^bq`jM0Y9)PJn^ZZ#mf)Yll6"kGrrTt0?Td[0m"_e<F$oNbG;o0I$\1Ct%m>p_Mrp#RA?b_$dl9c3ie1hEqjmR^!oiGfqTB$7IgjcE6533%+r6lUQam\!D_uB>`pFh"lG9,PRs,YnSh>KL*P")%XHiNZ;pIpK7%+TI!34$A)dl6XjOQ[aDYid8',@_I2-;el+OV"r:$IsLqVj]AWOD"dU,hkq=CMcUF]IIl"dLY(Ea*TlV\0Ah.CABm:Jge2tip@Xbj%^VZ#%X*t#g1Z/+uf3(9b#!K<N-Vno2Isa%,keEmps,qX(0D7X-bo>Xu%q"]'TLJbIoA-gkIFuU=nVc3fn,CYhErNT#PmYD>q%k]f%h=Mjt\]VnA0!7BD"4p:sKnE`&^J9+2q/quR/ppetlsIW;MjZ4i8?7,\^'7q`WZLu!^t9Z5pO&Ol3A#?H(AX<]Wk25m(n3Ql#J,q;%5tekclTQtD@H;)8pLiOnk=Sh=m-$f#dRAJ,^<?7mS]e;h$YQXh]!;<&ak@bW*QkA:d</f_)S#+DQ<Mt$f'=IMr`DthNim`WU)'3E%83P-XG*o_hgS!lZNbh>F[rYo$VB`\/F"b6#epAK\+mJ:An+qGsO+e>L+J-Nnh:0^[ol)>Z^i?coEOYh[5b?#WHX3]AoE28.bA0%b%\A*&imY0c^H:7X"n*/!fR-(GU>?W-?[G+OR9],Sn?./L9h/mLj]Bs'Kl8I@&l.Teh*>Z3jQ%JXeW3PcGM6QGlT^-]#aqhQHWc"5%%!CYJ2k<#PTU1bofO>Bb8'(c3<cuQTGpZ7?,WB*%>GGf2LCS>L@l\<JtA[4KnA:;4.B;07:lmS)MjE^O1f<ks8#^no]f\O$amM1o`%/ok6@O6Cauc^/0gadfiYWoUa&a2^]oGU:k-87t7H&euUm44*3#OQ`7??6rSre>NdX86(J2a`YYr]!C6GYo3uSWAZ&&@DL0;-XpY-%h(c;U]e[P>_;6]Q$GenQfp-6)&KAhiANPI+bj8HQo-=:I<VW2t6J^?WqTh&;=?/nm6ql):<k7jVjL;EAE0.C]">Bglo"k2?485=j%-n@hbM6IM)pX+F_9V1GBENa-mL*(@t;I+M4TD.M!fB'cZMsE3*7pJ.OFarmrpso%PIT=(K3S\8\P$ZAPFt1=rH/G1gP/cV@M68(1%#JQj5FhTgiP:ie`,$Db9if4j$Gj^19c0;=4br\+Ujf$9Jm(c,7gSpd#GsTtK$5h])O>Fp5?2*.>l$1u(O2h@%FJSjU)`S[S]F;VP%4?5Z=*R6JPG8rM(*Y*tAfj]qN0U\/YaB:sT37Al';;9,3LNa!&P\g]51D-)eA*IWp^,r!EW.mTAB-Sam8QnUs1CF15*!e_>MsMF0%/Asb_$bNjs1JPiF3d2]IgM4EakD_TBjEVur)gVF:jI,b7I"$IPqrcf+F=DXfYbs]@BbZF(+CtXf$ps2LpklYf`(.T&54%ULNMg;Y%i1NE:o!@."T7>'7O'b`p8`a8>+2LMEb/j2[4;YQU+(=fW%:oL$.a#%-bLE@1;$Zap-O-QZchr(Gf>X)ZqY8L`a`hgsh4/jO-f<1j%GB<?2S:!7ChtR.pX7/>rKf:C:btPg=WAcKQNBD.?GpCWSH/>'=s7)Y-nX>LlDHqQ]_B81A04*Vr@pHY1_tX76s3S1&5O&KWEokH)%Y%6-Zs+m-pCp(mB0JVn*l!"*-G:,O_c*+9OeZ2rcns(`I[Bi*iMUU[Y>]Y?J><OKXQ-33-N[-apZTU(]4YY>jYHA;dY,\S50KYRN%.9hhVRW0o@n]DE((+t$uSGL=^)Z8;KFu/>0na2T_$h$9cN$J>8PESE^%PBm!\N',!j5NG:GeN%q)_Sj7-8$8Xr4<&^;f`Bn1[iJ[%o[7[u:C6hje8_:eoiuO[+YQ5'a4(c/mB_m*4]-u]/A%9Y+EcU1IIC\V`oYFuaq(6;mrA:BYHWG6CH$[O`Z76b4m!Z/mIZJ7_<Zsd%noT>&3WIar+32WKfN`j9RU7i]=]n/F$!3M(JT68$#<0D7s-Wm)$`L[o'<Ktsjora8N"MRcIGM12AI(B[$,REh^&ZGTS3&"X&5cq>%M]<_4g9;-FE*:cej9!Zk'Ak2OmkF0Lk3H?aLhVL]8T:P$hD$gCm(F.Q:fP=G9oC`l_S5Zl!ZX\J?1(ucm*9)bE>a#cmru-08*Wc$%Q'b8qTe*">h[un2e6L69$n%T;D*QFX#;_p@@_rFjG;QuX[TJ@S`41meIi".7.JHY1a%IS;q/Nk`R0cTnkG);^`@L9sj4[ep^>F?E%;\o/^I>d51=1iR-bA1Z$]*l;<Xt<G<s#oK`\>inIVn=5LAUHh^3/@CU[42[PFe#Y+Z]E#B4"`NaR5g#m&E=sSjW`V-4(fjDAoc=^%*E38H3K!<jl9$A6FBA5E?+[@$Hb&%<QfEh>#a=62#V.LKprpZjm_F9qb\@=e4iA6jb])2]<L.^cq1_`r9W'Z#8ROZ'!TP>3G#Zc9%G,6naM9LA8M,'(lfFKg1"*LW?_@.h("1fiq,e?d2R9@lS/1;K]b^p1(&6X;QUk9`,DtB+kr>2[,mUKM6l,+6ajFc(C6e>*5kT@J&%Pq,)1P$L0JA)hY-(5LUYO3Oc%qc.k**m9"H;Mp0[eIuPpQuJ`_q7kWQ*G"&/S;]c0-gYSZf\j.ka+T9f]>T_ahF'Jfk7)8KG/VY@%_8*Yqp_-ju?pY*13++U89ccJW"?:nn*2s2*'dl"oRU&phMsQf]gp<t935q^*2h2N]a.-NK'.M9mf[tbR3,BGISa%;VooG3#*UitP%n,>fR+"Bf8,m56#'8Y9DZ[ahY(#0f\((?0IC;b!Lb(aRKLYfm<MruZnK7gYSnAha%ELt*UE:'M5nHW=`6e>*5a</(;Q)d*[RU&#R%UMm<?\ZVj5>gK+Thd*+M4N`SnQ<CN<-^do*1q@PL-+Q]n>'!6CBhk6_Eg]%qgLQB#D\AQmF%.]nDeO1?ac](P>spK<G+6u.9A#`?%7HVOc[S:T/,SA46C:3N-1d.WjXa)(UaE7(04O%0[S35lm8N%W1nW8OXOasnc%Z:EM(X`XHhHE7)og&B8h;M%#)2V'(@b9Xr(GXap%Jd+!3b6`sG+,Jn5e&"S;#F2+'J`OiLrN`24bJ\We8YFQ24Y:`f0qjY8iJe0"R*^g!h3cRH[)*aq\hTlt'Dc-2BM+TSF]ho$diXu=%JV8d/8'-1?A-H5$3RHNN%e2n-ie3(/Rm1n\r:#j6qb`1]q-"t1^*Q,DF;<XF+`<,J[mZ$V,/iBG_HS5&/J7!.#]WLjpmY</98'f$%6JN1sDM\pSdgC#M&@Y&`>9_#[nPNN<c2I[i/%iFmDsmXpqu7Far0p`3@mW+$FCRWr-M07!nA^-!9^'KLDM\oh8Ku+7X7ngUihsD<%s#4IUr;47r?bLjYn,N+Zjh$;?n#huIo[p.I_SHlV"75`t>PH(6I0Dfk[I=Z1ch]]o#)^'5$6T""Gb=IHg$o9/_]UIJ$/5m_IZ0j<%U=V?R^SQ@RHTC%^M1.T7DbK]fR?$t;*)sLZJ*Zd69'=Yqot42r]Cb@'dM"]ti?m]r-6L*bp^Q$#M4Ml]@ct`MVmC18^`2LYDBX7M%mc!V3h?Z:K('BW-`6ep^jm_8%bRMj,nN`iZq01i^*Lo^aj-eRM(`g,N"oZC(0CG`qJA]0l4Rm_qg7X#*BVJ4)Gaf3.dW&7p!m;9>%##:2/'8!Fji.A8qbY5P2+f'Pu*;HTHaA/.=@CEb@&j;70.fZSr>3O*hn""6sB.io6F?8VCDL'&K^\^jS*W*jZSI=.0-\L^;TR8T[%Z8in(%_d(+g*o/k7GYlGku8CgWf4*lY["o&m,`<2@M'MD>=)JL.EcC?V(A=@4*Gb<R@])#R#[\q\e<APGR[N/na'!bGpK+D/(ZCu%mIGI`_Nl$t*4!`JPuAM[Ye](3(rhjYetZd-@q=aIA2hBTLgmhk`O?-#9>^Ii"#tM4Ic(X[qopR[H4HjcIsZ5JV_B):PeQK**KY*%%1:*S<`,_,JG"OD<+*pU6Qc*@/EmV&DabU,+Hq/8[)?Fu2WSB:D6tRD]Nq&a^=Lck_^\+hSh,OdeFna.;Q`Cf7P.!_26-(DP5e\V9%H@.'N"Y55\'-;<D1/0=c"qfu<O^oS4KN:$fnk>TI6u0KpD>!Wk9Sq</_[a6sobMjX,B>aU!<cU"b/tW%2(34!f+gn]j;"4#1i.;9%d;V5%UnZ\;8PQ&lT.<e"iCrUsI't`c4\(Ej<'9Bf7^j'Ag#)k@L#Xn3I"pC,%r,m--sPh$fE.\WG0ag'*B=;-n+^S(_C9`NZWm2E%[6$N;D/aU0E`bEFR;$tRg<#CJCOSqq+-O)(1XbWC[/#*Vc08o1)tG">U[>30P=aoWEH=<Ih?79=,LRWe@!<NA7J=bfU9MS0/.@Ff%OL+)#+RolVfL@,b3$&_n"\jTS-P"=[e9;n$6#8G&3m.gR&t_UOAn[F+&<U.lk01*!P=KC,LMX<9Cj$`(3H<]kJi47ITr0c8E[-8W%.GRJQ7LCq#r,A/)d]!.RO,7/WW3Q<;5NMA_B,gi*5Pmfu$`iNOZKJDLf!lK4?I0mbb0:X8RGpgG2cKWdMLQ!_ge@7-.K3iVh+[@.%.=P4,s8T3Chal]q$9(kmOhq>tEQHqMY(?N&1]P5!.=QaCk)6G;s75INRhoUhc_&cj\;fb-rfHHdbjIBGi%KBP#J*'a+0hih?fLeS%mE7`,H$KAg@K5KWbBNSCrh`9%>"l&o^MrmbrfWbcjQ8,+q+GW)P+05IjtF:@95a`lRq6[tP&I.8,D@'cr8mnjnMH'(?(UbUb\Vb+%"kggm@;eqO\U(l9o)h-#,<`.SEW6[?LctTO<]_&?d"3W@^'/RCh^&$[e)t8L^O&=Krb#TPI/!Qh_cLC%qk*a*SsH44I0`V?Krk0U%A/(hfb>_:gNT4gQ=hNM(qh@?7"9&&1W:8.1]`7*mTE")[s+8FDpFH)_=n1gW9^CP"_mEc-\1P(cT3\E.AT,)pJ!.9gP#bQ`lU[H9%jQkZcfQu[E8BkFD#Jq^G*9-sAc`)rWBn91;f;BjUHGk6?Z<!st34+&)U%`ZBd%5]0V+-^JSr)i"MtD9uQMob_pV%?qqfi-UUL3qZ%d`9%>$T.od8rP><P]Z2<kgK>>b>[,Oqc'22g@X0I.uT$Lgh:tCGe0]UO6pXPFAE2,.9SP-q1T;(P6JST[*[lCk%QZW@9'BOQ)CH1%8KZEu*/X.em\1#]c+VF[$,ki50j;-I"oK3`1e(d>dOs_\1_=HW?OlCU:>nNH'/.->AnmZFDN#u"f9_(%ZKPbr=DfZO^5?`Ol%Fc\%PeQS_dYW4'cBoD;)Eh)]?;nNo%-di_0,do==u(E&"Z#rDPk=qIXoXj;Z<-(Y[4OLOA[TmBd_'fNNI%+.J\<K_i23SCI[>31la\"f%3bL[KbQ^qbaDF`=7Uh;=b_e`8>00\!%iR6d!%m$UPj"]6F$`?WIn"WCmH.<@QSmd5R>B/RYg;#3*q:HNh,<*6'e*O=]bULe'<E5%%,4E*DE%r'!-/"gE2s:0A5KF60]*%NkIfO]Gru!\.c_`/Wj_5RaLuE%d[6WdU1>2DaaI35P5.;<s0eZNtXH093p*2d'7S04>XEboZ%dnJ=S`_Y/kgddIH&oEq]cWmp*[-i9g\jZ&7p,&O7r!^gQIE';@k);34mELM2R6&Hm81Z;K>t_Osla.@ok0J:\SgInVkjahB%[&4f%$uV%/S+]!BcZ=Urc7"I<NE&0o-jq^iD1TW:V9sLo7^PSg3*7BhM.]Aui6Qsj;K';Rg=tOHqAe4-?k'L1WJh8O[\nI%ks5+GBtM^r%MGHfXU7maW$)Iukjen*L6=`X!Z/?CsJp($CfQ+OELe?-u?btl<NHc/U9.R,C@m9Ds)V_u'CDj4?*[,EW3Gqf#VSUV(O]3^L^'t!5%X-5'c:l/KHBcE7f.#lS3!TTo'd:Os,g.?<^UEh\6;HOR.:5_obZ*ke$:b+8uL>aIgXnr<2";t"Bf1@WhcT!$UK)m1IVimK]g8!>p%rPgWbc&lgZ."aFfYDo!KXbRsM"jn:ubW9FDaeB@8Tj))3&s4b`WJs**%)<uiPOAa)%FN6[#2`#a*D\1!%)8I))$d9\`+PLIBu-&/%E-r96(bQG(r#paI==c29Lnp&>EetPU[R079KCo+oV<.)2oo]r>H8)J2LNI%+QY*>W?E02W's/kpM7[#+X[nYKC-(RBDP=8$V\e?f%9_6UoA]A8=FddR+.3P#O*>:j<PpW:X@:52Hk.m-\gAEITUD':J&e^ueb91Nt408TZ/ue"r@;tMu.ks0U$JMUB@*hnW=$DcSm3kfa%+O\*h9FF.]JpRecN9GCld%d[A&J@eJ.JS8dN<,Gn6)7DO)%>f[*]F\Q(!t_;"Y4,",UsqZ!'B_e1fB49BkYJ@NWfP!Qsei>`I]sF%"L7_6M?16++reYC0$PXrRuT75j:PlNctB<Q!5UTJ_o/D8F4QoSferFq<QH8_;*ZK=bjkjqJukLGm``$2H7m.7+b7Yd!A(c@LE`If%mBK&40[6WYYhhf20nRuX)Z+>f]b$S_A[IjqfR"XG5fC+/QE3>N$gj#4jhoG[/r+!n'1@J0U&,UE\^tn*,3>#s%I^11CJM0q<GLM2%lfT)$Z<L%=)/Z,LN4.9qT=#^%NEQMf7Am8J6psV(Mmm2gR;fMd<b?cf3\JJEPN`9*F_[8^_c_pb-k"F@V3Rpp`%7Ab,"ZZg,8QhP%^<E$.m1+)L+V\B:A<CB1iolq5n;q@/V"*Ll-a&5.M%JQLTH\SFA5ct?bam;2fNIE,VO\'^Sln():cpJ36oJg`9TYd>]>.O*#:2'B%0_tsQ*TiIE%b+BoMtVR5Ck1S+R$>]X@N%hr\-"LC*i>f:h#!+;TIXOg<n./Dql,Ii)kiu=X+Y4]Z]q_R1nr&Y@24GVKb2;Cc(aD%%.V%::WmF=;a9L'3#F$-jZD;a/H;%f!WY7i]#u*NW;DYl5%-U,*Q>^4g7-FuPJXYAI5pUZTi8g@W8PG><+[ZX2Ve4?PR9Bf*JC:a.%3qZ[C#rfu=/[,]JiD(%'T_pFJDRk;.4J!PH-"El/jg2ikE1WV8<SQl%<3#G3G^VJDP-:hgX&$bB^<\sLEE7;c^jKsg:r;4*hoWTZ%U,jc.0QH@Al>@#q'OTXZ!bhn`d`!SQahVVCV&YmjKPK8ib+`i"[WtHF!JrIk=X/ifA"QcX7VJ2j"smbQQ2#!+aRg#XA[9TQ7GD#]%)&aN[@Vs+K]D[`'=J>K?C:P>4:WCl)Y,1A9dS<^[OkMF`<KJ(ob&Q5JB[ER/_5t[H+0Z>J]:ik@;nIXK6\YB'M'%j&L0[AS7bq_P%Db(hdk=Y:_m6DnB+m'03)\o[eM*IA0!t-ri9DV=/,>S=h(IK_pg&Os^125cJ1n[4`DbM*r118e^]V`-bTfO&1[%t&R&pqk-,]a%+%_SRGP8)tW"lWs;r<[^5:V\SKb\-H_\A6Unc%!#e*L,=aG.:G/n.QFgLVZ=JD"cN06W3hpk^jM65*ebsjpMSiD-u?(TGVV?=EeL!M%C&!g63Y<5%+Gg1jFfE]iD5eWG03G[t/LNJLqj[E6CKW9U_o+oU#mr#KC<_)`Wb<9"X%FG'=7faO570kq`b3^+0^7JNY/0js.R'o1%c]fuQIk+QOPU.b'`Og^9Bi5k&Xaa*?At>aSLpi*tp_d2S=Psh92\r5f]#!3$.-)Gt6M"Kd0N,>.!gWuUp2VqfA;\mWo/[FE,pGTU%;s9s[do<VM<1q%4\i`N]`XE!;!Wu>`=9lpC2`8[_GU<dml^gRCThlHW/,7q/;pr+N3@0rk)u%L7oWJ=S/+Gb'HOWmfU^lbJ9M7k@%-X.-D\8f8SXR\3s/u?:7g?CPr+SnI3"3q3QiRiZ28c4QYBbC5<W7UF(P.91!bA,Z8A6so,f_**l#i<+2=Tp1Hp1Xp*k6O^tA?kYr%eR\)ZFV3q1fOr\\PO!!5@tfpY5Jard5[KH+TVIXT6D"Lh)lV83r,nhSHi^;t6-fnobn@=Jf_6_E,!],4;$H+r,kVGr5Dtgo.th.*%*nmj&)W=oBclKs-i4=TNd[#jZ75.J[Y9Z)STrYDiX%#2\*?^9_`9nXH2+^rH7bHp\:pL-aU'k0O@Rkt]kCr_M_j\bY</<S3#b<oi%;hcnN>$[Lk3\L@Z##Kf,F<81#OeYJD5P.%gVum//$'k__:2R!='3W3F%hTmkrBb_GU=$KD>s=_NdnaRN5]K7$0EE<^c)7*oS9Aj*%73+B=U6'6]<CKoXF\62LTZ1!'Fd]s4FBc6V(F9a#LY6WS'B"Si"fjY&>t4PF;kqtanEdI#*C4Sk37JLD/)J2V0'k!;MTXL<:n8Ru%3BI;C3*)h03,bI9d[gpg4<X44!#HkQU6Ho^YYP!\e_<K^#t@Gn3ZZF"&i>-YM`eeUl"OJ4=i&D9__=kP+1?SIe/`e112+Uc2#9Af%%ph\e`>tGjfZ$@\k-]fT*h-7cm'`'(C"<rfVboKFMNatqk.&:pN0lRK'9,c'_+>r6SRVei:H6NhccWYsp0o1SU8NgG)rK3(]n3eu%j=b@=%NCs4Dhk.t-SC27BO,&VAn^G.F!Z[A$Yij!(GV@f<ur&/X9\)PG^#hId*co":"X/OCq8)@JEMMb$!S%Rb\LcS&PGXS>JTmA%(U,nTZQ5Djd*4Ue@*I,,Qi[d#3=Uhg6$m(5BJPci!VlqkmU8<D^E.TRl]5W_%`TKI,.+Rt=`9\fEEQEDC!6oTYO&'3H%Eu$15pN0%,GD_kZJho$qeT!?&/@XVBJX+I=<1\\C#4pd=LaI)j*1;I[$jM&1;a3$d*d%0pU]h2$4DFh:!AnhI"m^B.r`'kW3K#B3oUEGm=dBe%3/IP@mrm9"LgrA^m=biF`!X+G(Te<h0CcA^;c[::`'*\'HluGbdH/Gsa;i4dXI+/Z:9V&:@\TepJRqQ7W?VVinN3sK)H1/[`=5"?%6L]+q)69rWl;K:1=,8Ml=9._%DooM1c#?H3.ZcVhfHk^.f\=Q/ler#a0a#&fr$GNc"dMVXq/T:r>pQODN1!cZ#G,)UMQm)9s1mqj%=os,ta:Efi#>5@e@#dFf>\N-1!bkI?*.V1:1R'%t#nuTS\.7kA,/$Oc2-ad+H*M=]3JJ3'ft7U<"o8lIO=X*l3V.d[5caCM^sHe3%]o^si+t>omieGl@Z4l.SHXUdQKtVi,.8Of?`IU,T&hG^g$3q$'3S2\G?Ts=Pa5Jofn"JBkd'=g76XGT^9sGq*^!FV:TSAkE$&/kf%kf@+m<`E/H'h/9[$g&()lt*-/:s&uE1'`:h!asFGLmTJV?KH#-[T':1ak2U\dSbi7f_DgeKO@,`9`@oMJDd[:2m%%dLe2H&@92'2%"&jbY>ahE)!@Cqcjp;.GU^:toRWo8-W8jef8l)NKjF3lL`&,":BcJ-+P]gepPS#hdD$*lu=Y^et<ep`fN@BHS#,[mtR(TLYOp!gK%K2'K<)u6mEoP*8Nd0g_+ai`a@Xm?q80KN:Woae'Ke+4#q'OpU?C3ZhTOU21-!itL[,JZ_/&28iuBF]I:h?Qmc#:R1$((6k_<O)L1%XCZWJ=jNs08eifP6H/_O&0\GWj>0n<j#)KKUgQSeo=;7OrX[k.,_qfZd::h.X=,F6\!e`E@YPTe@1%o;7M*L=j>^%F%lNTQUnEOT%#<+2[ZE/M@!5/Y%VLhB@Y:D,p#bA4e!BgQZT=E`kC'-47+s'W5J-1o6<BFoB)TjCBH*g>:ho(ReNZ]+E#+$!L'\hP.&#Ms\.?!R#%]farg<!C3RM.qlc(t]_BDHaJL^t!-kMsW\!Sd0M/kfFMr4N"u9(oj)P_QjM43DsI&+f4W8,WP&-V$lD=OK#tsFn'M2Y/3Al.Ii19%],K6+-Kqj(\YdCk9pP&P/kFuoJ0VWM:/,e$l^$>5Je:=4i-cSuQa)1AG8R;Y9gj*$Al8Jjl&J%C;`+]=*LX/paNbB5K''I/h@5uK%-6m$Xg5oIsq94pDKkZ)1%a5W7<NSup#;GY`/SV>3=k)9L%KuR%i;WnS8B>ho`m?Sn7Vg%sSf&54AnX(_+6p9-N;4gu&Y'^=1DE;Y%*@_SO(fLmYFJjSb[PL\[M=/@COL0j(4H.?!]VD,a[\'P176`$fdfQ6uPIlI9#J\NF'1MQBTh-4A8IMohE9u/k];m.`#GHf/^f81n%3Eqag9/lp_L$ZW/@=9uk#RK3/A5<U\<HP-i@mk_5o!O*K0+t3n*OA<C+0cVQGgo=VNWF;2fa!X[YjOc[#bi]ONa![M&pc&Pgg[1]%+#&V63+=8.CWMX2Kchn%pC8r<L6rE<VV0sl[3k<FL.FZU#TFdaZPd.d0-''5G1>CgMSqG>EQG-d`5=?N8/ip''X1c#_/!XRCXP!K%_:'tR5!4b=6S7K^]eodS&64Co]?!0+C'8]:e4o:2c9FTF0IkUo7b`haa;?%a*GdY;7bL?u;P55N8C,5rgp4!bcAP>Y[D_C$,YF\m%O<GqT`!a=DMg@>iO\#iL)qC*S3)dr#9Vbu=-%gA_JH:QfiPNf-5'*?Yl-OZ[S77<-iu!#N[b9S^8#TgGJjhDifj\i^K2=5'F%-sK%<_,DN9sOlLU=0G:JG:og1TM;0A/6@jfY8R`;m2;_BXU]8_i'H*UiL7q$S)UI0hi,S5s"!1M4L.V<2K:u&uVnQ'g<:7lTq&3*0Y_$%99p\+0kJ^/TY3]p;L=PNaZ.Ao9/,nZatZ.7`5[&lPNlBAo(&kIZYa-s]4#,C%@V$'BRu`AE>:QrN9).RU,s79#ZnnU(F:P=N\9Hi%6++iPq&\"\rhPF5RS=B+djm%LdqM[_5%g@i(U1!e+g/hF^M5t2b<ESmI;C;1,KnF*[\t^Wm^p@0);#!qg?:bJk)s>fXl=jFHMI;D%1qLC.mjicQ3J\:e3#YTc^u`G5)CRX=C1Wn;`=X:)DPoJU"=:9?DS&0"7)[K9jHN3^Rrr<qBOOegiE7@mcMN(#pS3XR)1EV"m'.dN%YWG"E+gSf!X-0/ne?TrBlsFGbCHaR%]WoAG8X5:F!p'to9f9s/=21^DfiX)U-F$cM9m\I'XSa<t$6qpT*Fp(:AreChr)2WhghOU8%00W_!&Hk(<:kO2RAI^4i>H4NCEKVO8Z&!#8b3#=LLQO4/]SfoH![3qSY^Q9[^CdoFTX<-dfHCL.*D%VgMh5!h[k]6S90<L%A&QZ%%8'!:QhEg]\dP>3XKe.CiLPHmaPF?rT['N"\LCsqC%?A%OSF+N\GV?4Yo&K2N`pp1Nj'S8:g2U:n7?U)o`2?%9V].]snMpr-jMeEm%&psK-14mW`q2CI-ZC-(679g0f0^MY$)6lJ+kZ@u%NE`;p5UnQ,IF")"MB!W>7Bq&>1Djr[/tU6)6oQSudg2,BD>T8o7V,T++;N@>%4c2=SPtP[$R!t'W2;&f@Xt37?SF;@Ed4s;2aL^)`FXSeOWQig*;ZU#2?(aT:%s/(RR&1Ek9I,1sBb.\Rm^XGf!ZM\/\jh_o-dZK\%l3I+Y_El_44;1\Z]%",]P*`QI6<X]&o77SpXXbUf#Q"W<hhf@=aI][CXcRTk@C!_#Y5.2#O3&<+j=E&q@&'fTYd4t2fKcdq]X<fJ%U:Q.<T^Af)eA*RGRcU2$Z6(BVPOoCE/XB)L<Pc9n8N=q_?dE:!bp6j$'!uD$&)OK66$A9=Y'E6#/:#]^KOl?6\Kk6p=L^&D6hQqa%;Wb65_mXm4AYYKo5m#_K=p`C&P#X#`V_JgF]$s?$b#D*6_'CCq4drtd?#N&#h1Rq#JAS6IW:+:d'S+B<5(6HQ/M9T8Dp(bbCp0,?%RH$^u3T@ncZD]I[@30CcRPeMT)`?RmH0nX8KuI0HFgeO,J>V-J70?Oibm(7Pns<D#[7S:?kusbi[p1qR!a`e_V3&KsWKF7+_-H2?%N;.opm\]d+r-P4j'hLf)cPpoJ+9pVb9s(8BJlbS)HuoiC7`fMF"fY1rXCGedb$Vr2/>Qi@7aB';clB-$A@>JE_XXLA)F-0($qmOV%=;8Bj\p/4piZ"PgOYncLYrma:%BMgRO;[Kq<hM4.`>MbYMMKJ,K,%R:"BK2G$WcJ""'.ZRq'B,Dq(X[-!O@+T/&9JV$!)S""7Djj%"d7WWp_Bl<\UnR[10VLl"V%Sa9L5bFTbZ]X5sm0\3rp^J@'2dpQ5-J$UT&o:@"ho.K,'JM5D']tiu+q+fncTLcjH(tBP7Rm75VBg%S;Lun"jEAQlQ"me,[a(ln;=%m)eC^kV!UXFjY%?*BH*f>5"Y'0Z(Ui'UB!df%tSX5kfK<R13fFem7'[;nf-/>,(6(A$<he`;36#a%D\OVERuK1j37;uF+@D+Qb3MfZlnN;A:-jsgcSg?brt-=:l,*C[5Xm<*qk)$a9u":>fkWQ;'@csk5AL\-+M7Xq:*QFaliDXRrr9>0%!.a's!s"?*@=4=e=Xf6(F4;KrMBo,J=A^>P\Ul$aAB<g[P/s5Gi$ac4X-U1B');'l74F6"Sjc$`$qJ/P3H;?8'M!b>X/%I,_iZ3f%g]tl^4:*Re])tWfG(?tB"-P?uA-J-L7GOdF,XII;'S:m?JhaNo7hTL'+D%WFZ'Mpgo1.6LfYrEJnONQ_b0L!!5MuM/^[F@J?PlnG%6M,g,VG!(+'=&pZaV?de&N-+8+ZTcG\Xhjc1Za=5Q"5&^PC*r5Jq7ep?7tun%2L[\/@F0_V^hWFItmY(G"o8(_+3D%]WtWe4Dd--%(@$PX)G6]W3h`b[hIiNWaIC@L-i!!Al9oEL[MJ-2K^)F5'2%K*hIR.=&tO"(N/'Hf%&DffG@hkk+gXtu,+ZXoR9<Xf'B8:SUpFj&%SjthM:Mh;Hd&GrTSKj\]`B[U/U_<s!_?b`#nAg[:-7Ss9m;/(4n'TE(/^;[<BKnY+Y`m>:;CpJRb*??^Xhm!Ka[1.\G!a1rdp3`*%S&.WHHPfTP&m4=)cA,B]:=Dk.4cgr**@)ja@Zn(%9U\Mb(r8)\ZFWGoOL?CT#hgRY&lKA'_Q:.4%RHr`p]E:a@!1C>:&mP6+=B9a%F.4GkK-o`^lTVW'"$Vr6o.^o;Tm"B$2@+OX1B]g6ET455DD.M;^I>p_3X>9#b/ge97C)iZq:XpKrbc;%IRbEG(k]44L+)0np76C'%!b#eSelRL<?]N1U.XnbtK<S<,Fb>)91.A:27<YOOg2iQr[Mee1TWKd$bMWU.laJqQo)qIj1./*H*<p/cG%St1ou5(TY?&^*Gh/;Z%naqM@FA@*NDd/?TeN"nH]7\eqi=$rL!:Ol;/o)&^F-)o&<S6I@Msa"@=4\?)b\h8kE-LW&(4!snq29h%A4\i5ZY@;7MTrCeg`>Z$%UI#^`%fSf+o*4XnV_c[?L3KQA$aLESmgd,'JdBkZGNXq7'HHQ_OE4^.j5'O!(h^L.69r(A"J4HH]fP!jK41SI"l;CM;JY.Ih,-W.%ea`&><dA_q43.0ffYH=*H!)9`'XeJU)cLgf4$<I![RY:\#kKdn(@DYID1[V%a]fbQNWbnVap(#R5do5amlmf_`Oh>"`!J.3hEA.*%Qrgp^0EccLKa$4fe&l9A)\Uspnrj+2OVo*B?P2``\XZ!u,2SqW):*gA)'#i!!cXRSGdNas5Ssad+dF(<cnOo>'O,b)4$#'u5i+eU%D%#5OS7k_=]a(/RFA`505o%[nL@.4Hn@QdLY\HtC8;`?NpLr3!Ck-l"q'sDgYh03NjAm8lNi=*:LD6Zt+TpRU_6FRZk.Kh6'[4*e%;^cmA8U,g*7`*@t1DH>-f,]YV>%$-g!jP&3Ht^G$`("pt&Gq9iAWW`/L%[JTP^!a&')q_mCd]=JfYF`!aO&C,Am!c58d*Rqnd$0?%2I)_]Jn6/\(1D%jB<D)WL.-HW5c:^kK2u241]H+>@V+,9WSq;7`kV$]7eI2'p+h=r,?5GjdU:Tbp*X[-f2N<7$FidV]tnLRcP%GT%arGZ.FVq&\>+&gNedj:;ITd2IA,45W'S;$1(<j)lfq0k5LgdC[>XEVX2573!ed^[Y@G*8"Lnb01O<_VPJ8<XHjnKP1>:3rqV<W;@%-pS4ZAcfHeE29>76!H-GW+Q?>,G8>;6`iAl?T,VCXV7>)eJr;JW]RJ-6Wu9D5SBPF88D6ij4F@6JXC5)b*Mt2+W`Im=X0mfK's=`%%H$(f#8J)s)EKG_'rHUW(m-]uA<J4cFb?oQT9"9P`Mk++cA.PoLG#&`8Rb;YLQ\l_Cc[f6Ypn.q,^AA_=Ujbh!>-!P3Wnc^A4KZ&%c^'[FVSHq7X?!Po4IV<K=)AU+q+>p!$rq-XEXAbSdES%n)rBr#j=IRXMhu*G(4^-DCJaa.Vm[5W5puGT8o^@Xi8o!*J4$:\S:G`6%@s@!;K7."`c!"Q^BRASYdb;VJUUFK2R<I"nfT+r=@o&&m0r274;LhqS8p(7oG\.Z"0I*O\F3(%l&CcN[AQYL\TLS,T&HY<rF./L:%NSt.X\3?V\."WAfB1Y*n"Ed$`pbF`5C+;kfWJ7(#YTLY@.tX3!&GQGV"Eicm3P%SV3T4_pNh?T\LJa:7U(_Qh6&(,dL2<lcA12mF%:,m(D)*],RQqQ9*di$60'HB;r<"fD@B(Rpq6/Z>ZSq`>^d9tmHW)$n0IpMP#fJa_>SX],VOHsG0Bp^He[a3T?U^uRU*'9/@S0>GC%Nh,<Sm@#"V*V>a;3t2:Lb;B!N4JE$=LLR1[o7WZhCul(J`D4>!MBP!'Rc^%(S>"DG8H3;_1o)$aOs-_VBB%sl=?5ahRE6+_3Ynt&%'fjOYl%k@i7`m3T,r9R&"Yk$$3K9Q`+_gP,S4:Y%$>"j[L8GP/]8r*'&_>p>NgrR<\sG!j)AZkICj(P.o*,QPU!m7:l5Sr/5^8t^%Egfqu,t4A'E3PIj=<A]aU!t<FHq$k$_"Pd:CB1geC#Y/CVFekMWP1bqA!:Acc,f-K74C%RFQ/gGiQ,`;U*AmC?QD-9C_g!>))r'Y%(S?ndGng;[#d@FXVZhXm\,rWi1l=X+(apM<8/gZI^#GoijGD3]Bf>:sE6pGYbD6]KBH$]D3"L&L9LIeU3R`bYm-H.Dd1Oh5\9,\Z%)djRqN(6m\F:FBo/Pp+"b_2977=q7W#;VG-E3(mdG'o\,"I5j2=RIS6RQ`&D81@=1Efs3_Q$c#V!fH?'Os]mhTf*f[)?XSo;DHU2%p_e8[OTrTELtTWOIg'8DPT:p,r)d&61I/N:[--`LBHS8H<Mf3K$DN\q%3<^8]h<<`1a5=F3]%c0R!hF;17GZ%_@R1\7TW:j11538%aFE"'U6,k9e1H;A(V%*;0N9lj$DieRT]j5pM&T-1iABfcOQ_9qHT=$A/OkIe^tCFEU'hC$3];6H49SqtE+j,_e'Js>K/d'Q)_cB]%1HGpPNK/(]>HuO?`um&s6_TVf\e)gu&j"dX.ftA.Blc'\%[r0;S)^00O"\Tge2,QmhOpOX:n`mu#TBR@)8S&S)1giA#Q\5"@ga7V%NQa,u?,Jn%p!BbWT;eZE\X_'ncs:(\)Yf`8;[!f"8&jJQoJ_=b6OYN/`p^u].l57e7W-$j%V\[4,$-Se)+lZ#CF]L^J[<;[Yg5*>%fuk)5CipSfg"Mikcdim_oDWMGQfBen+bT;m@n_\k.l4ss)uqFr(!+V(V-LKKBAgp'9jJ,e594,`Kf_e"?7Hm"16V+#!*rahZ:YPH%Cb<nFBBtSCq%+8+HoWGk.UoY*Y8QT[&FGa])iFipAQ=S3ESQ;4BD!Z"ZcGb(#bBqE1TQKccC)-8!\Isf+!\+6Pisf6NXtAGbD9N"%*K5%D3E'9'CGK)5Bg'PS<L!+:G^d7!8X<34%!#s8(kZ]0j;]&k;B4a+P:MIGi/rLsQ%8@#O>@Tt]EAI"-Pj.#"*,`#A`aS7S4aWV%SjAl&&sImLRLmc7O@Yh4,Fm_$b,%2:)+:p_]KnLZd*tR,J29Nb!kFM-^dU=ppK)T\64sOn1kR_W,U"lV<bsecmTT/chOGDPfa3WI%S.'#D*LIoPknb#A3O*<6*8?EC)D#%/2CBp#%*2f9rNMiNKHiJ3T9236P!b`'HZ&!ZfaMp+Ch<l0_m2un"N<6.CN8cs_O?$!`=-"G%R\=sM\hSi+/'(D)m5\Ml<[*J@__cF`Fc2;'bubiS_AU`08V,r?"Z0lY/igD"4d6h7N`\MrB83UVc+FA.S;'9W%F#<4QqMNTo;*>7%MP>S3KfEOr-R^cm<Bf&-ON^OhOhbd(k/pfdZiMp,FTqAS3+ePr>n*\_RFVFES5@H%h%K<u&9D,f]aVe0q8-hJ@7D.^Ga]hD@0f/q%0F5!&";?I!"9AuNK"6F06?E2`&fRI>bQ-c0muIHD)8?S!%;nUe0,Fb!E(7p%?H/jX_6M211H;V8Yst7JbW<[q>j`Tm9*SWj@M\IO%L0H:O@gccK>=L:)7Q8gPGX#..6S0)sgIH\q=pA`FVS'_r6gVZV1rqF/VPml7F;Zj.M<aAVAHZ!MeZ=#W$q+)(%Tc,jd)'D%1*Cjb%A-XW;iq]oiPr[`qe.#@p3cC,X/`*#.$#%VGb##hg8b[7uE^I9PaUV8SE/i1E:n2Q/,R8";.@2UK^`,nV+IPcOl@G('X9i4-P[RhK%&iM0"'ZF05PVT`p:bRQ$/fJ64"=]Z]k6B0JAU',bTH?2EXt4&6(d^55"T8t,N-%>Y<H$=e1ID+?3ZqY-;`\<L'^8=Q+;A?MBPrDL%-OmX+4;hJS78-D[GgbcnJ>Fh[3<8kU_Zl]ke.#.V:j=abm,E5!a:"/=aZQ3Cae=Q;DWkW`48<XUABrn/:nbdj+f<0gcL>?i`-"(U%S`.Zjq'12BTp$)IJ7HOEa`'eh?6,RFZR[\?K2)WYb/)@3:58IsKK]JcF5kin)fTh.oKY3O1/]53Gc0J19GQJ,'0,doT524C0TAXK%Bf/ZkKZ!Q&\Q*E=)Kr6Q,:o`(FB,RTSP14PPd3S&_d<Usj,'0lj&NsCCfG%B)R#4M1*O[uIq_4s,C]`fCI9K@ks_F.3]V`SCYPMG%O_2B]@QOZB+]W/73]Z]9>Au@,=<*jd3GRX5A-C'66C>U2a<q9(9b&;XQlVV(cQgK(->7GJ#d%NZE7uYuWX_bc`@d4F4&*A/1GftX%2PbF61mq:A_f09Ee/6WK*^Q!p_Ea.+J7:K&K>WNjcX\gk0bU6km=/D$0d(^D/0]i_'3d#l/.>8^$%dM93&0GZ;)Z7I$X5%(iP^hs%;6gBG'a+ccW,2Va^?ibXLG`Dl=/n=??'#OC##bbN2)$a]@sg\u"dU"#KKj:-&jsimCW2CR!7*rk.?GDC.9(jk*-'M-\0`&4?0!\?%71iUk4W'rHLnT&:ch\8A%&Y,9&efp8?:mC(<tWC;rb97N`7Rj/j[]+)1;p>cn\Y>8imgR(+,53^qLPArM]Og+M&ljckTV]$4j7h3%UA><^b[t#fNZOMYS%g:p(oNf'WBGlhTiSHWXPdO^TL>o(lu6EADK5#^&e*J&*JQ!K[F(Ybi.in^%<NHY_2>H^LQQ-K#_YO"Oh!F)%fKb38&^as<%O3-rMQRoZ(b7Qfb6C"T3Q@ZmZB+@e4@=l+TBBh-@CC1;Zmk]5i]nM4XYXu72Jn\P#`u/[E7^2h5RRaHSo9_./B6uk%3]qptDoJEf?*i#h3nuaf=Z4W8BM^\+d@e@(XQX?hB3M,##Wdnna8$GhkV2B=Ag@R$k#h6_*N!_:$;qp2LEQm<+VKP?"3e]\T0e>/%/-0/*)*/0M5u@@i4%r>$ou7;!S.qc.csbAV(-'5A3fL(bMiXOKLl.P(5n67ZBoX-mG\p'/NZ4"+A4tY7L>d7s@c0hP'E[!&Q$>:e%$.d*"Cm`u&E<@.LZl\uW_[XM)P6KF[\DbMI((?7C_f-G]8MbAAYa9&TO4,Z@e0.ue/qNLbgb@Y6?1KB`2I%!^595WuYNVAb7=dI<%WHl9AY&`C<I#nY-Ong+55*!Jj1')@`&i*_bI5254m*2c:iWLE9"kGS)k01WZ3#^h%q;k\=E3a;dPRUA'G"WIl/`U@T7pi:VA0m59%5/PFIbYZrK_.8Iq+)`Q1p_cC)%[)Mm1'D@U(g0u;AP!AoKa#qeor/4"o7>0e=kMG&<g_PICe.l0KuXtST.V()/<Yn?:W9lV#h&oJ%-=Y1@Ct-kL"riIUpt?,p>P2)m6cMIUJ>IDqN4$3aOc_O\#)oq"0jLO!bm]N;\M7'Zc&I8uD/NrZUs4lb,&M3+&SZ;B"!VT"$kI&n%@sCP6Ri)]MF5pq)RiDMtg>lLJ+jFFT6Qs]_W(9I#(`Et6*JP@i895Vc@$'M*F;1P<(.1BVbO?,IWTaOA"qk/OQB#Ar3Ur:DJ'eBu%YQmI\3X??9cS-IM"Go]]_cK-cO?q5l-O_9KNY?)40p"Z*[c%cgjA(K_*^LprM^?j^";7)"";V^Q$,kRb*5W;Ln7oi`Se7'gr0PnR%!==go=F2T'i5d":?NM?YhP.?_a+KN/El';!"R&:fqgiR8L$RUsJ@q0m"<O]Nh6C/gmo4isg&R5e$1KWSiZC0\0n^#6OYrT[2J7Pk%*i:a/'%0Z1XmEmNZa'TrilqSlQ58s7OsVp^#(Eora96t!&;YlZ/HfP@7gjmli("0+./;1V+9m;%&BG9/Zk/%%+"[V)cpnIpbfE9^%JJdt*+s;VfZj=a3I'a08!?Wlp@^npdJBY5fMguZ2d39\;HaF("%"#>eLnYqB$=]YuO+L&m7uMsIk0\c'L3^-Ka:*C%+GaGI/I5gI%7gjpmLrY1U^g%lKLjFulQBCt^imLAr]`^H<o(*\;^a&JLNZT_,&KXR>m0rEMq96VO#jmG<(Ig\cBZJ8_R-7pJ#bWZM6S\.nfpBT$%W8i%Wrap@-Y@5.po7ao3q(I&TF-gg*n%SedO&jTQIe2^Ho@FL[&52rsNpIPXq;%Ze?dlE.8b;UV2"M*DT;2KI)6%6W$nZE%4@oup%BlTfdMk=8h_nO3KMnOj\AcDIo*=UI%;i0-1ZIJ([`#fDQ`%m-,(oKQPe8V&pEooaJ!s=?<OEs08l;TY1%jc7OBnp/a+S<UT<^[1l%0EC@%U`7r6:D.M%M$U4hHU5u%*&/>Bp6]cOMSR?7IcEASJo%@?gPl[AOR8$W_Ms[p]f\71K"C=3?I"b7,<G5#pHkQG>esD(,&_>R%G!K-e`C3S]\KmAL4"@r<Ru?7/pJ+Y`p\nm9SQ5-r4TF9mbCr"EI_Yd)c?@3GKW&T$Ce4E7.%O$*<4jCLmnN5PiUlliq=6mi=!F;<%J[4Fu9YC/R[MUZ3_V6Q3D(GEInQO&TU3j&6oNn%hd^pc&^ZJuWiCl8B%K:Q#,S_Zn[iL4d]d$jV`CYf>.S4_Q+gJ^)KcH8ig,PC^%^;.pnC=BdPB*ZC8>:O[<Ln,-I6t$dmP^B+BTb(pAMq1!u'l_b?IDLdT,>b<46Hte#/TEF&Z9c`H's;V'*bdH(QO[tP/d`2<,/'W;%m5e[6]!QQsfVp.8)$tUEil\I#Qf84Js(6EiUgJ88hU5l]65!L+0<$-qlU>g!#tq&W]s%RF&;RN)@BVTPn9T?`Lcai&Q`0Ya?VE!6%<_/]V$NUFnk@(kcgQbu_QC8SlPCQUt.1C/68-eXM:ob^-S&GdNi0b@%hP\Tm696k/TjKG'0>)')KubsSJ[JBt@%9qg[:9rc1T>oB%n59OJZka/;fK-6m2dP[dOFAKcaRTg_=n89"ioDL6%e6#[C"*/+=$buqTW6FA&AC?3`.cF3ma!7?Tp0)?4jPPcdSu/o$O8"b$3_H.%iee2K(%;T4UbE<^R3=5IOM["hJ]r7teLMc"ZmC5G+Y*Ym<mp+i0I;FKKI.Y?c?>Br&#:qi$Vjk+8VO8EmE8Zdl+l!\#!5E884H2;%LIGVf%%Rm<)C9NL.r0WKo4ksE:66(MJHO/m0OmhQMNXDD19NtoLrl^"gX`0(oY'="d\JQW$Y5j2KolnU70eM#8TAXV'FUYjdb%Z<%J_?ue45$m7/"(Om3'5t5+p?T1S7l/^&Yk:#-`Y#pda;*$LmZ,)._UOG9F;`a@$DN6F4\:cCld,G!ld(<]h(8H-*oq\Yd:/[,OQ[+%%GUb.`fZ*UgkBLq8djl\"Z73f@^F!&i%E1'l,*Fo_JteMK\7TpH!0,`gJU>BpLg3*.R[+#D<l?X[<oYeH_;K-.8Itg%aoQsYi8It%SQINb\_5j4.DU:bUMh,TE8X'G$-a'`;a$VsmD5_,kd0R7)F?jm-97]/Q7.H0FIR(P,HH@dY4Q$DDE+f*9:I>W$KrrbG0%<?Q7-q]%]N%EkQ#'WsP1lQs>bVL!!uXAqZB]XG:dVV.W4%nRYSb$p@GNTZqiK-cqO%+)'m/L@gZAp=[\,>.IUTG:s3Q*QpnO!AlQ)-BY6<Uf%N#8kf2fK[LCG8*.WqGQ:]W>94E/K;8!_thb$HA6FcbiaYKo&0^Y/lFA"4okTg/L[:!\bLUFb##[.)_77nR;hc7,$,.$Di=s0p7gL%9-GhPZ<T)KV(aPAq.1;jkc+ZNc8.'7TUi"^#`NJ-YY\<:$=7XlN@!6>5eY!)f&T!l,2%4BWCNJ"4IW6>2RQ,IqpJiaUe;'LP+=i$%e8!c4VT-)(EiDqqU8p0;]s4"]a5L($+IXY.E'UL(^tFnueZcf\Bef-0/$?jk0O5R??h?6%cF]TT/_K?"S@=R]noR]alo$)8c:O6e%ieH:MC:(OrEd5RW0e$qlVP`R/ELN8OYL'jFcS<aG/5"kNgA,\'XYdQg?.T:P*`M>?Rf'i7Z6*C&=KF4Mk(U3f"Y5E_8.pBK`OU]2%WaerH.)C$=V6EEnndJrDeWqMGMl"gs-`J3p6UXS\G>kA*pBi/Kb*/d8"oM3dlu=2`KFii;?Y1dAVT;RgT,F::#Z!s!%+Vp81*n+"%e5RL?j/mp'LJEE"\a9,IFfsC/fXJ%Ii1QuIJ0X<'%e/oAW;EI60a,q,Uhg)P4Bb\*pC20BM\[Z[Z\QC]aU1tGOU[P7Vig@]X+3I)%#oaB;lb.&Q%G(e](i1Sl@/>4J77Drh,NH-B2R(\g+H[A,@=o`1jqVjXj[L=\)Jc]HG$IW_^\'j)es$hsF1H-MSpDt^[R7&EGc5c;%%]S+qE4AbTeI$OT<!_*V1MaF'Ui9=Z3(&l[5d;dTGRY//2mR*PD^I[#g'cjMd__q=J5R2N*W5f&(?]4uK>j2lZJSQk,qKX>eXg^,%X,U^HN^Z$*4MnU/(UaS+l7`9SXtC$$>MEanOMWc-p3ru-mQ&p(WDS6<:%ZPQXEP_('<P;dWoBE[_NcYhcXsj$h7/2BrMZCAkd)`t%>_*QXX%$6U,W@R$a+.-a!+c\Ndq'/-[oPeU`fN3=r0\9IhAlI-CJjpF;Uji3OMXG0%,YbtX'sq/+%]m43;/XE6Z!5O6T9rGF'-m@%aKFH5o6R*t`OlmDV;`bY\m:%IETmt1@J.d4c"5Mmga"niE*XJ9CtV<oU'elDeTh_ME)Du7iHO9dRMP1K1J3f;ZJ.biDIE^=mP^"o%WhkD3E8PZ*MD#^/abCf#:]UR.ok]UFR;g7TR!>E+!*"XA*O`MSE,g$Gp)MKdN=u%=@fH9ZOhq>294@IPa/RupR"eHH^H'1]8Ca4M%S<5=U%.mhN[hQ-'9a-f#4FJ$7O?L%\(5?Y+R$;2C\&VSW!\RLS,?&aB,e[2`Ne<MsAH[>I`%!(oGp)\EGuJC=:L?ein.J=OW5SmF%%fSRFC%k/TSrXl)BSF-7Y@+2.'C3V"6HJ%':0c^4ca9('U/b#]%8\gC;/?kH.N]%+^&`[NWeCi-,g&qDL!4YjD-.aB_BQuP3^A"n%<.OmuT'N6U^q]!0`#[B*L!9L'Rs#O27IdiZ>KnX2Y/=3r()_ba]JGqB!n\VBlPFr<>&-!5;Hmqn"4L$`T=+A8373X/!k%S"ANVV\%KJTdIqT8h/X2+Y;_jqji]?JP3Q1&)dc*Z&":#c9T]:3i+ZM#%Gg;Tj;Nk1KBojhI7ajb;E0?L\/YmQ;_X9\$H!,QnI_SkoUOU?%u%PY+s7(!j6HMr)Q\8sGD=Cq[BtRX46rkit!_:9-=cTi"e!8p[qfYTfN@JWjb='?s)Pn@cFt*A+o)5]sZnH,s!,5$?C65aF\k25n*G%s7kG`<p\>[ra[HO_q:l4\WJ7sQZ;61CA)sTc-ldtqG>G8B^4k4H#bmM8@Ak7ZH;'e](Wr$ePO_RHf,huYKueXL`=U(_)eH+S*GnS%Z:j!@"pi"W_&NfaMkZ6KP[1Z\Rc=OgA;X/;BiE/b)\09fOn)b_h5d4lKZ%A<O,+C)l[@Wf>3dkdn5)ORKruFM"8*#<1+jsh'm,cB%_n-YC=g*97^ta\?Zu*L6.HK,*lBG_)JEqZgC@(c]6A3gZ[*YX'b=6=tR6p>AG?NaEj/L(G(trP9*qL7&?=g9`[_&+q:#Y@q?o#+/%\;OPqMY!%kCt_ISH3RNEo?gU\\<UO2gOW4DB>=L98g0fOTYt\.C#O,5S\3"iJZXC>M%Z;Je#ueDd5!mJ9FXa</9.qO=!efceq.^j%O+W_'8Ol^kW&/QnY[(b0Kn?P]^m*A-,iP5Z"3aV[N7"a:<sOk\BA.q5T7@r@)mrBIeH@VgfcD7'T^[4Ik+]oN_nf!AOC&'6Ta@Dp%oFjoaojGkgTfU]KPCi-_dHOMap``c>i'["e*o\0@6'QOFbj)Q(._%m_fMjPa)Mu;]/bMitc>(XdVA"d&k2$,@]CL32\%O8*MWTi6%C,TnZJ/9u$K6]5"F.q)HGdc2hXZS"/LF[18[pPRQUWA=R?0OLqiFRs$mHIL,C+c\N'>L`K=hV$Eoj3*24]`clMZ!(b<a^o<iDu;1%6OcM8Kj/N40s&e]g_Jj#)JT4+VR<O==uoLbUqIITa]qj%5f/glBNB2??%?Iueu[G;],S`FDDfE?N90'S1l/5&@1KW.YmO)D<j0YF%AAnp,5mK5g$j`%m/-gp+Jg.]CQ^#h'1eTfPg'Dq?;RAU5Vden]ij6.r<cr>>6&c5e*0Tnaou@/c>2@BOM_.<897`@ibj`Z`+PF[o%4/8Wk)D-,i<6tf5Wu[*i7g>$O/T4HM;q3"YeD#XHE7T<=HCKWN:dHu!19'jOmk,(&(fH8m(fE4#dC]K[SW'RPLdI#I^64Jk26MU"%1gt[3,HqMS:$"qXpTD2%8dT3"/S(tY)3<Ip-l,O(R`2^;]FI(9>GWq#!'G_f(3*C@Hk1Ro=*ZTP[[=\W4CV@-\oV"^4k!jJ:JRC$%8=3,2Q!j8;_-I#@kJ$0rP%%+IeOrN;`QX:=6)DsQN@$I2fjZO\EnT]0O7UKeVM8Xg[IB06)n1+['utCFPV;`TEIOcSAE-UrCjQ?W%C:.G)PrGYt>+IL0gsAl>h%C<$CO`imYps=Xd_'ls`:cI-EjD:>6BO@Vgpe*mO*d4(]1]9+(+*@L?%q6]A!qe8(9bMEcltog0*L$u%aX"`Y*[gX!RaMIg$Pn41bIdmB:AL$"03,T7IukDP^.MfBeh)'98d3UoSkS[nHD#_maaqJcr*?3SX;17#?+Sn(]-8B&c:I<tgs'5F%.h+mFK#T"=C+W\7[ou-iY>1s:8!iQ>3\k2a62aA,=\&gX'eAQ=CsaiZQK5O_R97Z45eaU"TPaco='=_)@V84]St(JOX4/*s0$VtB%Ti>;S,fjU0).Nu=_pbLJpnPCNR/;`^Mq%*0eA/+s%?FqD8(ID%e?CsFg8kO\5+0[U.9T<^&9T;CUV[o47a5`0!6*VN4kRS,/R>c+%Mgi#aDet]UihNO1ef'c=ENktQVLC*2At'QG4kYGXbgS-uT^eGf\fBP&-/LhND=*90bNl'bnC201=0T\PKs6uHhGL>qKjf9@P0p%M%_32AWS";aRd<e]n9=s,bHGHJZD4\Cr$`P:7l/So&0i"q%OdUgLMRXd>A?`,1Y_H09'eNAa!1rpu74T!9<*h?iCpcs\-dQY+$S;m-%c>D)>L\7]CC7=6(n/M.=d5A;M2^VhO3^4^eNN9$O*q)j"-<eX!P,#%t\q08EQ0>M74]1Gt-'9E";HTG<9E^AWU_q4@IhFCQG4jNd%8m@K]]]uYBmD3>><t"@R!1)EMXk>+E:9cV*%5fAM9Osaf[n2=?H4jMr1`SMb&SuRs21FqlGo\a_&a+-]cT##u*4QAt4n)<r;V6W$%;\j7h33'7UFW'<:DEab>`VQCiYd[U>eZZD-)0_?U1MHsmmt!%0&GRdk.F_`B3Y9PPkBBDLP-Ie\)_8A?LC$+Sd@&Or\k0C5k>[mr%!r,Hqjn1d>.5.`1@21J@7!0RnDI'rgRL"^eATp7]6l5UKI,QEf]tsWjk!)@7ma^JeWF/EF<(gn=XBo'560q?qO/0>*`_$EUT6BTR%"e4tCWk23Jnnsm4W<00so/ZU;6\:YAc=F<O=Q=K'di1DQd>"LtYdKSZhNU`jC"`l[)4OoAH)NWgTOk&!1G.bL!gLro[9-@;RA4<]%RDb3++4V0cXUS"3kE^':Q)*NI=OJ*L-GotBfi=tjQlW1Vb)fP\A>22!ZU6b09(9!%F)\6Mg[6EffOsGSMP^hdMEZ>3N\BhJiaWmE%kk)-?.Cq=OfJY\>gdra\GG*QVWFCeKS+jlA3hU9MnQdHlAd@s>g+-rR8e3]HNE#>^h")l[V6DkIeEYmH'Sf]Z87\_j6&<dKVt8m9%h+0]4*GD-RnG"'%i(6t1(<.iY!`RGt>E8/0QZlH]&)N4)ME=Yd64YcO!>3OL=ZjLHMbf\YIoO\\MaYClCun"I=8*tZbqJ@u<8tV=%[Imp*\gq[87\GWH?W4^9_4&66mQVCt94:r5:_,=&)Ne0=^",;#b>t<j=Z%U&8rsC1f_+HV(RBcl@$\3g%ilFMgP)4CeY?NdFV.%%%_](9l3p;6ejK2*"U.h$7X[Ok>f`I>Ra_0L!QLm"*S^dh"fA6anL($qV4%p)"EBRD-X%TP(9+2PWUI,D\iEjXR)QUQ/_VqX;YU$8W%NTM!N>![*(\7"D8Q[?Q:BmUAJq6!&lkLJ>>f9?7L"q1$DW)oS:'#i]e4aQ\+d5;dVGPXdbSeZgcN%Ds4:]t-LbFs7i,$qPpept?b%X8I!A,D)^'Na?;#DNlW`Bsq3B`9N*^hTFm+G%4+P$c;a^bEhV&Qmh?@rHUT43ZL2QKBgPh`<qB=QfP`'T/B/O:a0?%Uf4+_%$&0f%Sr]u-]@!5B=L<AAE,06TVX:SsIW;Nu[WJQm9jP1-2%$CDMu=&bm@$#B(lrPIoTO0l8qoF6AUjG_\kbiq[cR9b%8[$3'FfE,8a0,d%+_OLkQO:<6S[>lP[!9hXj29>BW(0t5]janqOgth4E^P8U]sIundPEI]l&Zo5?L0,_L&b[!WTVWD2A>C^`J0\LBYiPBb*".&Toig*%UnXGT/?:#3N2*[+cg_kW0LN7>4([Zd4K#pU_.T,,GcP3YCB_k[3OQJqMeQG$(q_Yf9c2<pXTH\,l10!Xm=@`\TI/uH_/X0341:#`%I4aE`S#`Cs(I28rb?A##he4,s:6[]Kj5>Vh7qpZX54_AR2=?LA<A<G5:s3`hPuWYq=:.'85E%o<VmrJk:gC)HC2CkJ)&rgL@Bnpc%H2nA<2.h+K]fEg.$X?#DMCsH)Q$SW-!ERX36<Z\B;q9t.Y%LkX@XH*EmWFI2gU(-dD;T@LV_T]XX7;`(XZS<b>AfY?<R.G*DWR-\%(;gSNpR!]8c#Hq@B3H94RCB@^E@u@u0&esX_Gt4u-A4*^`p'elk&1T06qZF<nfT]">EMYIB-m]qrn-$(AAN$5%J-@S:j6Ol*1AZP%At"Jp?$-nTh\`F/Q=4jX=cB3eo"2B_HCp#d&\N_#g=iZPl`3II)P:p*d+"jO$#HWqDY/7?>%Dp&6*b*AGKKNdHIn^#Yr/&>iNoR_%W:>5<MY>6H!Se6EM$=@*_%!,QAU$4qHJ,@b*)6&`GO]>nOIZ=0Xr%?jF0R'S_"H62+Z)j-J4i[:"*G*uUDCNt9+6AIE%uSULM*37%;m@13>[\$,)GO89k1MYAn!;CaAJN*k)len@';,&-N]O%H.5W"_KR,G(1$;GJXVS939L'>R-?^^CEUZAq2Mo<RIL7fGP1]'95m9G/%dF9IUffeAk8I5!G6qAV@#Y`9Z%<,c_dNKn-cf"F/eQeP&2_<+PVC4p-3L0pVpRH%4U/d*bDmW^BSKXk8C`YV/qLkWi/('`]LH+s9%>9nQ'Uh7qXi\tmZ^"8nWbsIPKb1EZb[BfJ*DhO7%%5Et?A3B0C>*C)m7NF#B+BZ@0iG+h"/Y?`3%pd5V0mj[YXk2n@e2s`:CWm)F%'<9Q]fC0(oD63W3>#7=@8?Jup%NGK#N53Z#`8Ta6RB#\70?B5j8d<B>![qql=3T[ZA]X0S[4Un\i4O(63]9&M98^Vr'j-9rW!]B^%V$TKE%>-!!&5kf<gB9-0c#m5(J$p(Cfr<0i*9S.VeT2;[K=-<?fICpmRoE3)P[9p8j016S/4LYM'kdCrHE(-=cu!k&T]g`FFUf^k%CQTET8==>WZ@YK5jCUO'iiL5el3RH9R(jK6@6)^2au*nje"qhfZHN_fhrjZGK>s4APjrKZqeO?%GN%?<n-1=HRSaYe0V36p2A)q;%ORZHf&)/'i_d.L'J>Vug@U0@GCUS"!4gX:E2bB!T_V+>=_-Lag8bWQmBjulj"VpJ_[P]&LEooqXd6\3IUX5@3GkrBE/QONsdf4u/%",:6!P349J24;8S*!dMn]lYpXr;7`I5fm+i:cs60aU-p(6$C%X>HoYLi!qMJRU?5&c.X\7<I("@I<J_S!Klp?7ZfNX.TI^fieJ@)%K#rnN$<@k\BHp>:GCi)fa[q%>UVsde"4IDO`?Bh=hC0S$lP_V#[dm9seQA?8P8;LBD(AirklA_J3RZ.eUu>H^c,,rt5aFuLbP&qk%QPQ&la4R:58)UK6JtO+8TL"d?gCm'4R0D)Ff>h<eePlq6og!7MgDuf=r^8HT&fC(;Pd`$!O4FSEY7hOA?@/^MTkPbP#7X36+V]3]%i5HGR>Qs3)(#]&(H6tmu87c1RN,?P$m8O5kpGP<>>6T"d(8hCZ%*)U1:LrQ+X)Vh)S5HCJNR9E4SN,tE(hoC0_!eC$`X4kn_=+QD%@:)/Ub=C@nA*3'9a/R6s/_):IS.Bkj2DGOm5bU5e=!``bD0BOVZ3t;uW$u)m)=bq.ZP\X$iZD2@(L%,/UB>FT[/MsXHK5n!kP7Li%BeE#8)]+t^ZTta-PKTt%j(KE$8^n&YZ.,1?09SB$'R*5NGJu1;@[&p_-<-;p/qW5R)[fu/Bk"JANlHItP4AlXJ7:SW@("?'T/uUK%3K=C5d`HdMn+;fQ<`S404^SH^Snn[Sk!+0)Z@a:N6lG^-"uGkOT9L%:<!1Nko]%"V8P'r%+J'G[-MlGRM^(\J6_41jSt)lflhl2P%F's?V'c!g,f]JKCs6Wo%\PQB[R;h[1NUD%6%\6Yl5`]>;8Nfi-nH`rEdEDma)5#`f`Qc7ShMF5R7mp'*7iWXTc2k\3iH2ciBA29!%9gt?!%8(X3FP^%L,h%XI%P`Q,$:g!($;GR5`Ul2dG3O1RB(0"g`75?f]OtuD=^I!Y9XU8H=ci+TGWILmHsI)c-gRm:4:+\aQpH@l%BWG@[;"5+L7Jkdn,T1\sk\Y>c\J>G9=Bd>s+D-P!>&^Z&b@6]lWEK.7,h!4W-;Y5tmE(ZgE7)>kCJIq[g8Q8Db\D[Y/cN#"Tdn;X%U+'kIZKVqi%X>9OYmdHQTF/s'l'@_n*,S^S,c-E*.G6G!cofOrj'HM@)%NKn_I5.7ok4O&&3TjifR(r`jDcMSo\9H@!(dGA1n.rH%&jdt"<(J[\J.i4-`5&f'hmJuHhg6;TDsU#82_HlT4Fo'P^<7-?O#/(UeVp:77"C<#cPFiY5W2SKpfS<uEZHMiLHs!J'9>h[`3<fN%=UGPQ;W>\O+deK+A^RNfSMr\3@?08oiDNr%1<fXTcUmBf#["-(&V!Q3OZW3;U(=&O:'<C7#LN/VR3]U5Wns%7SK7dk#YABo.7`V$%XE)Up)#1McBoY:AJEHhhHa)]*rmgHH^nUlH(>!7o`lr,:l$%fd*(OdJ1u"R-Mdlt\H.Wuq*fT2nn72CjOFb`j,XJqaS=uE<V[7gT%!k<jnFjiS=hLoh%Ai_%$Z$C,00Ht<A`Zd>80/H@QG$<oa2G-=%hi8:45(@#$o%-e"nM`?IIt%PAg#ICe2f-rc&f708$ad:V"Le-n%W3D7WVE)r,P<fS8/]V$G+;pqu,g&C$nHaKE<:BT:0No5H3M(2L8WO`G)-lb%Y@>pKm,o=l_Sq:?7["n-n/%SoILu\[;-]V0oS=r9%bgutk/AApI]_1#6%-+'@R.N&#A,6]?T0\aGr-$!_Cj"MN2_EOaN8FoKY'#%K&6->q,Cp77+\`Nq(\A'VajcR7`-fKMZgaH^VohcE%-<''j@Ct",ep@McWTahW>Qf3S(9FE#-N">*=A`;BKcMog4_?]jK]Er`NGJ*$J&mX2@iVBA'a$_@Me1e>!qYj8>C1_?Lst)4>>@:]%`7p3Q]tOH!\+e1q^^0A!Z^oLthckDV%m(!%RdM6*crmu-CNj^am]G<Y[C`nkpB9(rq?,P:nu'$FJ_1M'pB!7=gX:Fr3=Zo+Q%/i.%naHM>Yap<Phm_$_*uW#R>N+dHB7`nlZ2&=1Gi"<FiJX=;_r2ig_FNZKQkC@#<Un%4SK9r6(7)"7PFf&7Yg)moO2"c;PP]o?mDfJg%HuF,KL"VLp/?X][;@9`1G!*-cmpi`=_o]+pLg"g:AhOO4R=uJ9-8S<"DrUGJp\,7U?6MN4WI&SBQt=t(*o!]"HFCl'O&s8E+n/5*%e_CnYcLG3/MG>D+hA)T,H6V#5d\M6bb"-3ZejdDA)_M$&D?G6N/\Pc8`ai(+CDM8P/)R3/"/].2H;)d_A758Qhi?bTp4hY085?qp%D0i/-)%Cq7PNalUnJOJp+_B0$!@[<:]N+H]#cIHYF6Y9TqML1gqM&o,M9VAh;D,X0[[/>Sbh<FDP>qtqjk1]uSVc?9<TK^1Q*os@%K'g<*4c`u\Z76V2[S&Fq[gL>$*?#F/L@;6lBpGu6hDp>d#<N^uhWa_"A.8-sH)BIZ[Z?IXC:q1kYq_/T"g[$:LkW76f\r=X3uk3d%n'=qrrCR$KN=QSGA"'_M,5LrIhbM53W<!Mq_@J0gXa`DrpnD$59^;TsN?8g$c!.q'dp?\&ck^FBj4L/Sbqnhs2L=p%h[hdi?u%.$%fpq[^ed3D?M,V(XgMu6j'V`B4YLVos4+GmJ:3tlg>S;A0l-nNjlG8_La_91t#J&^0]&[@H*25]-SIDi8SmCs.,fAPMZ>.dJFY_1(%KR7PibHeJQO%G)Ba(/0O3^<X83"gR"A=X4*(Qr"#_ot)'f_4KCUr3*Xp!M3c__cj:3Xe2!X.ihMkqMFFQt9,as+,8/o"U=t@mfB3%]-dM3kqMn"XBIl&2:GuMXK6!rOWTbsK9+-S=Er#T%^X[^5HC!m@tWn0$BK+o__[&E?m#VS8;,a="'j0h0:RZ&GFHS[9Z!tP^c-DM%qWBbKO6Zsoq?YN,FaMLh/>Hm$e.dAICdh)OqN8h`Y0Y6n9/W2:NVY;$2/M@*;Je#9el$A,V-9!k7r(J//^dZbUbNj)Q-@"/BPWGO%9!l!g[[(TBM7/^`X"Vjm4a+\\nh>]'EKB#BLc'#0s$Q[/CUV&fS+qK$D6T.0Zd!uiD91??]QMC%:+LANQAp70QMfGg)ji2T[9L]M%%_k;k@lr=U9WYGRJtlQ'CU\bg?eX^H*DWq%8W@n4=d?A6[2Ur>cRk&?^q\k4?Sf1*6T+n6]5$\'ZR(s^XEaTZO-%UK2NYa8VIf(b%a&OY<=M7WpH7[eX1gt5mWmRT2h*!.c'0E"ZSakSd,%s=OrGAH]RW&0%WuiIe5D?F[+gYq-<.YKtKm:_rb$#)\1lKRaraPh'Rr5K\%k'rO:p]_K1Rk_9ZR+:%Zc*R?l46g4E0"<J'mO&n-Xj6h@"TRDcAJYS0d9.2%J6e!iRW._;PH!7td7<lXneSJ;PFH1iUG4pIT=1`n%Q5;u=L"VqZeN:Md[6NCdr&j<eg`cjH!uNA[!^l?jWt[fH,M:45s3p4.Ci%Ehm=5#/UC$`NV^bTs-aYQjn;",RZf6u54>dDe]o'%b%r>h:.?joR1<s29)>C57KPl?bY:3na@0u8mTY)8'hJ'=c\K]6?+G/2b7,GngQ?:.%!X)2?\qSfkM]=+'Wp<rm4db7r0RnL8$W!ZFI%"mr-(ClDpaS+n8-T=,X,F)Aa9aF)Zo!k-88>3rgNV?/Y]?3@iUd8Gf,q$i/<c\P$_\.XqF;BpcHOh9KoOFLf@XkirPV,s/"cM3Rj%=?4m3V_`%i1N)rT1&fU*lcs&TE(d>qnI\oEh2-%Q/@k2e7qB_aVd6:7ltUSg-[MmUf;`o6<TiYcU$'N"[4,=oBgPnk2!A:!k>u%D%Ibb!)BHd<'>?>GE2(uEjUUiSX7k+H1h5(a5laoff&R=4!3qN"9J)#0dUi]n4hDa[8>a3Vpr1tf"?NK-#m-:Y\?H'E/GBM(>=7a;:%+)!Y4jJoZ]&Kf3>8qA(*`^^$`5%""N5(6-Il8RaFYs'4==[djX,Nn6m[H6:IJWY56)76f$R[pZXj]aXj0["38G3P[<$+m9Y<EP%c%iYU+GNU=-N>lZP6^GB,o__"63A6J&?9K2J(GSL:K@41d2!5e]c?Gob7cM&?u2&S6S=%JeX\5a<'3sk)"A"An:lg,SB)>RVOB=[J'%0gX(pXIHD5oO.<OEKe?3XS5kVRUnG-AumpoKkLaQg2F5]fC=t&GWZ+?c=M@9[BDA6$a+P.m0qpB3a_h9TX)W2bKaHgYE#/hZbF9\%N_XYLc0mh0LiCA<%<R&tf/Cio`>bj'BK;s9rdcY/!Kn4%8kkH)2p='L=A5/mbMMMh2W^P/K_ksakh_s(hq7](9g>L8>F#<Irq@4L%@cPsG5&@0?U%LA*As.LL_F_b_-fG4.mXaib^O+l>G493G1,:qD(A$B#fJnSD@tkCT0%aPj`>cQ45>:%>3(?U.q]$c0M5'.7Dl=67%FU$JsfVEl=1Y1hHD?Y@W$f@&7O,k+5Cejhj*c8<PPnU'?jgX7S(o'U]k<dY"<bL3mddTliU_gbe4e`1P5.sknq[Z@??Jf\2gd/UG%IFZLk%XuiGcTa8'h\;j(l_=j>nbjap[:k!dd^#EIZp&qQGpW#r.*iu9.\N:[S!Oa>^[>@!_h>-Z=(dG$VA6`"9"$O+oiCXr>KQTA%_HOr5bBb\l%))=7nhaM#>KOY1[TRMpYJaHs&h\,Z3DAem&iAqAj7W-9DaY7V*n/bmme-;DHM_s#ID!'Dd;hakf%\6g*TpUE+"sfW%pds5\G44j%E`$3XSQ1dV5Phfnm"hi!\[J\'SpG=#;<1fG^$/J/o@m.>S*BUu5B65j%pjGW"+tKrFjOtGFSch6ZhM9jb[:r`@*Dqi%d-?"_H[g.i*])[5R+<>%d=VsG<a/)SQ6R;\7jkB*EpJhBn&K8cP$9shS4m>Z]$UJ!qNJ2'/Ki3h&DR6YF[fg"`:Uhe[R*082ngm#%;s5>/X9&S)G@eZ+G\=6).%M)VninSi1rJ.9WtMHVnUi\#&W2).B4g*-Co1P:L;XJ3=P=8>9Y\*]F1HmR2rHHnj#655brTaKNnaK[%kQQpnn8TBjLkEQ'laY2#DR5AXXQ)5)\BR'PZf5toSe09D&LeF[+OmS*6<+3@Fp4X;1IQ,H4W*i:X+5\=KPc-d`j,o)+*2l8rb2g7%IXVM#N%Ff#)>K"=q=tma*n7RPWmbk^nC"A^?>"XWGH>s:<_mA2ccoSXcD<g;a`ZeCm&=RFST^k#ZE)6<SENsMSa/)0rk#a_Fgh$]%YL`Al;g&B79qD<?o;8NtHJJ=bi-SJi"/kji%\-]C8bC<Ubq\$9B05mK2#f<XA]10hpSiVV::1"<9^J>K[`"Y^pmA.?ECL)9F#4j.%Lad<POK=)shtW%,lF3'=drmG0?N<[gLQ1@CjX]5MH;Yc-`_D@3IcXECY][(sZ[ne7SQ4)F5;2ub#,f1VC`a`>eG(!0_*4W*bi7r'%p)?h2k63Mg?LUb:-FKP;f?'iSACB@rgH(bpf7o9"'<X(S!Ua<kbrZl9iKF)J5;EO_SLO7_=a'IjX^mZ8j0"J%A"D_`=<D#Dh]FMU%J^^6^QAl#oU%N?E-kOD=a<JR(^uhgH`rnUnoc6o/luB_Y%SH)\q="=jP?_b=d$$3__:8"-^=^%5WtVl9Nuo(K.PYFk7&oq=]&1Rq%fQ5NY(\Op!OS/C)i(NptGDQ*fFRBS7r]Xf2\_eRZ^5;51&;D^RnEMe"e=URs+jSL1D`c"An?(:N1hYt1%kK09J"4nY*nk-@a]1I0%l1Z7PZoYom+@ZppX*i%FBTfTNbAo\mJZp/"rkZV9T5V)&0%nO]_#?9,fOZuYIcS5[&%.#?gEk#i%+`CKAr*OH"4tMC5I@ZO[M?%5%.W\lts.@o6X5b_b%hnu]lG-u!NF-#j]`N9FlNXRg*a1f9`32^Y=;Pa*Tk7D>GcZQuL7OXBcL=qKGcW\`IaA;,Cq=[]bEe[tmq$gH%NnU%P<e$i"YUm-OHQmAY0Hk6#D!ASg19rP"=Fnm115:e9ZKJ%AA$Xl-.B9n4]p!BcEK,*G_cW$SYue7]E=HY'f2u3l3:Tr,)Yf,i%iu0H+!O(N%bH#g<EK+OojQj=q3j,`pE=Ln4`\hSjZl3qDT5n>Y:HGXF3a\n)OdWfkC9ToIW%h<o.>C9_<B+&!@eJ40)FT\^iQ!of%44WXqSFlq^2G\>l-&1_XSks)j=tG"/j@@c6Y)D`!%c?"!><@4JL[WhTI+Ymhg>Q7ML[V-IV=ZQL54&43eb&X@d9CsFCQEE$nZ=sg%BjB41TD\fCo(_"nA!3c,#;+'hK0R?50D0C0E!\e&ZRH"ScT1-_1Jg8SS.?3j.0$7BGJCuf*8XT^huDGI1X8IN!Q/qO*/*q#5m.i8%'osZ26nfZ.U<tCa!mgk'OGY^L/"&q],;CS1]ViSmkVr"WrSQOo'Cb)sr:HmCl9',O]b&I)q"=X?&Io$Z;(CuB5Y,E@(30$gi-RGO%N0'8[)2uT\TYHA:$mrirYVR2V;\@BhiWu29j17GYi,:>",/:&N7>;kF_+tT:ico[WlX7\k<K-%BHNQCYkj1*FY&_'(]]/%A*D8D+%mQ-`3]&Q7%MRZR"'LXRi.VH9-2403IQpUjg_P2&%_p](R6&aT$DF-<M3L9'3gC.aLLZM+*`NtRYR\\EEj1N-*/0B?#B3@;&rlJ_i%!^89!R1J)>(>E5e3GpTe44!*krP<Hu$a'XK[eV^,s"I7CHCYR1ImIaN"/ppDftg1>EQ4Rp7//b^-&1HAn-1$&`;h%:G33t<!FS>G%h\inS>n&bsVm2t%SfNc@\9>S^7L0.G"5QA:__EpRisbLW!nsRa>qj)'n:j?k&c_n1hr,FM764r:T/ZlO+%-&ErqTh%eY=6*V+>@j%#?\:WRfO4+/YNo(+lj@;M*XuNM2,U)9:1Z88b=;E9nK9<1^,.d'kB#bPf/@qIeJPtQuT"tn,G4S%MSD@i;gZdd!5%LA"21DrWsEV%'qY"YEeI0mm%4CP#ET\WMgg;23p@Um%Oo4@]PU5f*("BJGh5jkc^Sk%SUluC:_L,B*-OkdK(RQ0B@Hqp!WnmH:`\$0XpkXsHIQXY%?g$&oKE$B;4m60j_M`lN2$6Zfa4F"K"gXj++7dYZ$93$*%;O:2n-[\0E-`7,7,82r"j5@5\tlmA%Uri%ZmM=u%SfVEo1tK\*0=>^%hDQZ,KI)fpCATI954sX0a+g%<m8UHZHA.TM'\LZd.K7-l/m9jN$/rG-^p-7>[8"-_5BkJ)$jbgG%Jb05\haIO`A9/\bm<+DF.3gm%f]Oq[6,'CB`n"ZG$..uq6N\T;1tNJ$5p!'Mh;JJnOXb:0\0eMhK>7a)?>?h%5MG#o@/(*K79cJ5)^)^[`<L^Y0E<)O`l-ce+cV$<%b\MeSLc?*[M.i&E6D5>o,\,5T4GRuOkc!1p$mn^KX*,t6^g1e/C/H3`Fp3PXN;U718rca<0;^a\6U208N>T(eIKIcbXagBF:/Ak_%$5$V3oS5S$K[7GVf3$Li`L]h&Qqha.OTHW#Sq'"gQ'8&!];0c^0L:i2]klVce,+73%0-8J#7SJ9*Ah!ps#<tB3\Hoq-j4.D*]/TF%E7V_sS-;TdkpI@F@Z`AB&rDg7LpA,m[HlS;o9u4t0]K^d82<acLR*le_i^mDN:OS.oOK)Y9?#n1'f$-b9)6aaPRIC>YrIl)`g,AB%O_?9c<PM-uYNGk^#9m.\OX,<1*[aK&U$pDYh?5Aa&`/Iss,kAA9G!=s=EbgNYF^;**/nUjD)*/mo0eS$aTS&u=H*8H:fIK.0-6l$%'VmZ*$\N'\9:UmZ"crt"1?,r0La8P%K4o(IdXZ=o^a9[^36;[\)MY1;+Y_P+8L+rP,SCt@!Fu4I3"cI(_[-<$6>=9U.6uQ3!XfE:%oaF?#!$:nJO[cAQ$\#ZM8.rLA@q:NdK1qG=1oZpu,bP/VG)XH^J43G!^r"K^i"NmPZu@8[BIjY0--.?#,unmtd0L&@VinjGKp[N<%J7K6(D@@!k%R5.K98[]KiCI'.\jS(jMh]c$Oo#Yj4T$;,kn1Tt\7%qa#U41TJ.&"_Wkh!d;O"a;T"'V:*;:.H'$V:rnHu5"E*OV0%&lb$lV+gYtOpIiE0+\rHPDCO('c&)<&X%+;PR&$U>RdSV@Xs;7UCE";,(OXO,o5XBbeoF63D5G6Ccj1&@Y@@,H+Y>WIYf<fVK`kO%7UV!b%3YZVJ-2Q?,Qr("OARu9PW2TuGU.hE)$*tBLBb<p*0+X!La;ad9pC1HKYNY2e!/2b8BI7?<UhIP8]Hu#;XkV!;(Zd@l'>0.%q1/bX7%]8i8P3A6+VBGoOAHKZ1_PgG$4.)18V&=K_To-[;,WMMa]Mf$7jR)-eUVoiijuu8fMrJsKE7ei>\g!bQiK%eYBi1RE*-XL%YkGr]"Cfh.:O^!e=#:9[#82R]C),bS,B000KE*Y3^*Y%[gVM\1`mKC6-re;6R%:`LpVJm=!&oe^O,ChK;BuiDl7<4N1_J^(N_fj&%$,dT6WlRF;*jEFFLju(:!^dUB)5/6FLEqGL-7I\Y7V/8%7`^K;JThC@k[<E.&7Z>GJq\k#`aV>0(SWJC6noV?VbCXC\1%!kW5t,6%cnEaT#V.)36QAf#!q6j4peG4h#QRST.u9-1!$mA@;M7CM5X8/Ycm9j[JSp@`q$Dg#$Z[\ZO\.D"_\D3/=JTGI8f/qtA<`]#5h<GK%(eZ?8QgLGYYi\NB7Z*kl$'V+-Uk#r_,E0MC>'IdC+C_A$,\^j?$,=;0P3u#<Kq:O<,iTo*!83Q$CRG6u*e$Z^RE6u@BG,FmaV,>`%:_^&]BkCgN*<YtjG[0=O=<nYJo+?WG%5C^BapXCeS2O7X'Q=roeIbY.:*;3_ie0+Z&>=[j&LHC,^u@hXJH1UriWTUAN/398."upR%o:hh3R=IXn>Y^,K1E9&@8VAib!Efg9RS4hB&0t@K$)NfXi:(,-dBI)KTUl,dLf&td6qJATOh?d8!<W`/QV,3VEQ!tOSf&pWr?s=T%i7Lm`9Ro`$<[X#E98#a,8LfJ))75;Fkj`1'%2u=)#XUo.C_9Oj$T^kYfoT[,`$]enT+B":$&Y'F<'8;*8KctEbW+*b_MTPfEs5Vp%1)_D_-ORd8P3Gq$!j"R5DsnqTqa=Dq!g<]"OpRS1R.KAQW>PlZ42DkFd0R#qP!GleScuP_5L71P8WfnV?81t)&N(e(*qPndCH01+%DrKURI;h%4d@@nqi8=P8=.S"Vg]GmK(I)s_^o>H;*4kSE&B009Y,qm<5!*l4#%ZZrH(ZH#HZD$+?Xj7/fiE<)\"/Q\o[963i:_[s%ptZR_mRn,([lWkp1tqJ#!oX*(;F#SK%Mau^X/+3KjuO_([^l=Op!n<K$DjJmZ)B(SW8f/-/<G7P-t).%5X;:nNC-#oN7@YIaBH);%_Jmakl9>d>2UVe;a[HJAgdDHTQ3"l6M<hD<Y@-<T4!Fk49M?/Q'Gpg*R:<tA711meNIfW<fRW&-h2"$;m2$gY*,ucOp#D2\"9o=@%-":;mi/nk5-.&$04<f%o0)_hMc0uAR.T*'nd?$nt".>3<$';A'[,!)96uc&W0*9c[P(1Po!hU[W;Fi0(i^=cC5N%q"[N5H[$h&U:%s/Hc)/>CQe_!MIRG8$@X'S6HmPaKm""SSHA/F=5SDOf=(aEEAt&g[rLoa#KU`07it8b*nC#/9`5YXjQu;Y*^3K29m@+G&05mj2F7%hUtL$oqYX\ilJK66qpH"mg(Q2YjBZS&q!pA^_4:P!X>g]@nI*f?N"6Y7mpBL'[AZ4'KN>Km*Q8c1)`l[YS0!W']T0j$LphQR7ms=%KEQkmcpU:K[4t7Z!%t#l99M]?5-dn^KXCFZhNO!g'0MDT%6mE_"6/k%HW'+f`K=^Q6T@KPeITm/0HVbE7Sk;'$^]q651$cP>7!Kh%?qE`>,^=rKSB2W+"Q[G<_1)k%oXJR2LNsg=3c%%rMG"*)mna'2&6te8QT6L2-:Z&Blj-TPUTl_C-uKDe7HdS.R8O%kAL[Z_oD_MG%"),-&q*rAp$$[0:k+p<3`W^Z^_qf;%DmU)tdVOjm;Hfq>)J4_s4a'"JjO]#d!.9Fs&UCuq08%2KpMLL2ofm,-ZtGIJ,,LKR[da$R%76ZPbP*,%5'rB3+*>g*k-je@4RpF#`?Q+njD!Ct+]G_fT4AB;C"r9^o)4r-!XRT5t?I8>j8I;^3.X)m@rsm8#_--Q!ZarbfT)&PY%eR?pF?I9=tk%$;\qqipGIbd%YNG,iB#B_(q1#1mcbP@lIGsKdG*6M(8da@ra9<=,fR12X!:34rsEB"Pc`kRaH@>([\_e;'LEr"^=%iY@AAJk6fq[_PP;A$eWs.Ui6MXQ&cCj\5W,`J<?18VBchq+4b!o/@.;It'C8;DsaO)@^iub^g,m5/,r9+/m])'!(8@Q9b*fRE*p/%TX)UVfDRs%IJ4<Lba<8K;eY$-,j-/fAkRqCi2eP"A,$EHMa_)Q2La(GF5mHtF"M$gmBN1FF>fqDPSs:m;Zu.I%Y-dc:<(QiNh$SQ%Rs%8;Nuk(3$hF7LBo#>`L2[9.bc'pAVFP-NlhlD##+X9RG]=qZ+N2.EE5HkH@5&CM_/7AP^9An4'Mp$-C<RKXnISO4I+2R.lnM!@%7RNVs`K1(;Vr\n@ra@KN/5M,aO<rsYeVmaRb_Y6W@%9+:YHbFdlAXssVq2gdXW8j(.g<A3Bfd1n/+hb06@U]796M^Y\+f.`huAPS%3rA:$b[:FWhR$ilHLONi=PGQ<3.=\6VsLp/7Cfe*k[$ajI8M`rPiWQ9JZ9Chh\pZi_IQ6[VaJ%lV8m8jN\ua':QN("^LWCrfu]VH%k'!12P0P46"QLSHqNIMF;MI#u(^U=0Wa(Tn>#=)5dRn+=0BY?=R,o0Rc]=]]pKi,<MA-DBS73e*P9Qg+$2NlsH>T\97mL/@%sB,S%5t)Cu#o@UXo(:iNH;p.8&sq2n8N>V(=lg4N!e2oK0j'PI)K+Hs#ScAN5a_1)"3*>*MfX4;lEqV*V"^!sj(>JN"S@HZlsG8t5/9Qh%]J1,RK`-P^L+it9=a"b!K`qm!GVu0<'0.Se+&#I<%5Jh)`)]FkDYCRsl1IG*hD3jlN!)8n?hA*p?=eFQoGG5F@@M?LZH>]m;[.*T%:`8]2TPUTT>_@JUlr@t,f%?[B<@XSG6\Ab9<&3a]4Vg``2)Ccp7M7e]hp!;h8+H-kHn=A?CZqEcKiUoNdQ(^s)00m)BTe(D7p\<K%0s/`sYE6gYM?s<I*d.TC2j$MN"bPIjiEFA3C[#$5QBZcIRdu%TFNZI*:<<Jcc,[:G__#mW*U,j_:k]fFU/F/P9,5MM=cRt<M0/,X%eg)B/`QK_`%J[r_7$qk=+`M0raf.m9n]aa`V8f!CDN2/p`;Eij1q$M6;^q2S4Vs85oFMT/4U(pcOV4@iCc<:,Jh70,m#BCRAd!D;%2$XY!'ACWA*mQjb<ZaHl%Bp'pCgdG/K:pX3A3udfA]*Jg$[2B^OpLc3lGIBtAr!+M+#e,[ah`c96(5:E*A3>9;U$A$q^3naKPoYJ%X_B[^dndCQBKGF+%-VE[:tlOUD*r9PbTNX7m!GYN@'l\!NR#%0&'^U7D)_u?kd>=%\6tL@^sX9;:72M*[Zj1&UIR6H6Rs/.D9]J?%/-f=C[MT!Xp^X*^=E&q8O_u\F(T)?'<3K\g4aIr]A%)9PG\k9YIQ,?@b%3[F68.gZ,gRj`4(-LVYcLJ79/%@7?2(QP?tq*M'u;K>%Taq0^F9_3875I\9k\\]]ft\&c)jq6R2/GNN!Uu:>6=;X9KEObKKp]YhXV;J6@Il\-F[t^o@l0K@NR:c]C5g`d;<nO623*k4")L;7%URCWAqd:C[onM6`4"t1=i@"tK0d&hQk0%3J">UW/h?2,(U$nm_r\Y+)>*4J[]O&bl*8q(T$*m4cDj[ol]a\J->`0Q#3F5bfTk:%*%0cCr(h!>87:Sc\D]5&SpjbE-3c#>!4#F^Md0dc2fZk8P;+B+L#!X1&D=cao'@A?lG/HV:SqVE*3JFa0hX\OpG8!KBt2ul4P<_W.m%8u<J?Bh$):e!,NF:lklSr'GP*)OmnhK*I[-52e],FUi(0kSlsAY-ujdpkOe6bHd[qro+k+Hd0<"<[__3*/r*4$JLG#4Xo`1W#eE;%M5j,d,d+5u$n$p3]clt[9Jn--D+9_DLfHiMEqNs]?^HaA^lj;@KW4_c0H[YAiA$Rn^r@=\\*9#OimQhJod:g'gG[ks3(;%Z\!:,B%a7ZM`+;\$T*@'7jl^6=oTE.,jRb/IU_8lb%e=\\((Qd,H0P=g#?;Cc"/<PHddt<2g?'LoIWE*&O(l3<[SU0lY4U-@Kl(WQr%EG$c%hW*mT'@taR"6!4H+JR1D(*4pS&dh]+ch@EVTMO5Q[gDc(^bH8&AAs9u3G`4bAkX]/UBlDt`\nQQd1%617]gEg1:N8hR<V?;T%Wb0%G4<QpJ=t$TLWr<Ec4JPZR&FrUN!$qM)_im)5mV7R@V?Wd;i,E@7Vst%(qlT_N8>a<@2m8&/Pmu!`K]plTp\cp0Ig&NMtC'75F=67%Hut*+-7^:.mIdIf%&bRJ.k)15=a!/Y+:;`(JBi/<2aQj>b9;dSp>Cs^aMm!_;FIUnmpg0nl&'0POM'FZZP,g;HJ']SYP2AuZ;@Q.%nri9_ciiqB]"2F!*A^>VHnQ"YbWN2_mC^Hb&.Fp:`^89rAsKQ(0UN$>).:8OGu2`E\-68_hE,>4!O<J:2r5(d!\:38O"9k[N9G3+%U)ZV+nn&+K+-odPF[X4#pe(`_*8:^Wr$T[1CSoskiG7$\Nj%E"3@iG3nBHjO`(*PCIDucLAfJC:%U9_Gh:'Y7&5lA2%orFGJc0Z*%-W_A,Qt3YArh5Q((`gd2VBh&DpZ6Ca]ijL]^D4fsHXD@Z&2k(ed[S8Ol?i.!n(PTWO9k[bVJNmnPK+Y;o\QZoC0n?$BGjEGTX8M%%8\[!Q4$=!,>921F(=98)NfH4UkZr:pklPIA#QgcuaEOl.5Va<QiEL+9S$Ga'G]eP]JNn8dor.PFpc\J6_L+/*+c6_(gt"@3R&-hI%[7//74^pEjC(LjjS(G/Fs,?*OG8?;Q=i$b*-hrSacq`U;_"']JN?bLTISLb&2Jd]aI)$>]YOErV.0_Z3@>^:'#:_G1PR:PgoR^Oa%Oou+FG_ieu2.>$==6s$\AN`V&4toBEouJ[QWEq6TOoSUTG>.&*_u(t9+dY#Up](3,@t:6#k'"0qbWsfU@$!D+nk985pJ/%(9HU1\%;J-2SEZ'@A*p>':]Rb("&bD'ia[;A?!Q,t,9c3%8li]H/rr(^r_#!lIfj]ILe3]H9r'"L9Ik^N5fjggQ><mS8H=eO>?nL<GrT!8:%i>I!8^%Tt_OA5@d#cpSRCkk0*&OHVns6']>$[<<0YDMFe:dCM&Ib7)a!ue-7!H=Lo!(cbp`,A0KS7hn>2"'kfM4iT(%3W&*iW+RT%[O14Ga`W@#Z#[*(&EgqSk'!'cNc5X#ht($f[b`UWPVM'Ef6ID7B2G#MMWFjplG/eXoT7D"lS.J,%!?tS@ZXEg.>"A2jT^cj><=Ju%RohkV?<9CAogWHLePEQ'S`<#f#qKARW^It.='Wkdc]K&!L.=pXi#C@$+"4WP1Z^"=@+"6XBiAqFfS9!LJ##Uo8J"H*K;hnWPR?M5%,6$81rqJGb.kkp:^k^=TMsVnLrnW-<O1t@\7(+`M\I;R-[o4@Nf1F*GpNlBN3]PifDN9V(Ah%k#:7jrc;jD"A=b`D&j/$5[/E%qN%d7o30'g<!IIUXh6pDVi3m/)R5bigl'Ek!oP'c/5U3Z7*ENijk"r?tUhG7N'G687X!R-L^"H3!o_$RL!Hr`C3X5$r?Xa+-D/B.G2l%luCdHVD]fu6?MNGpY#/n3S]=4ihW7UCb)*)O5F8,4_JR+i2q!sb''bNb^R%nP"CXbI:'hZSs6nLf"8hZLfJa'**7B7\VoWsRGNAW%4kCb<g[Rd37?4kE6BeKuAbHWtG<?j!jAGpLj-9f*[_E0iX^bEbOSIVR<WefnILPsmCZ9:\5J=dCYo11Ek1e;[hL=#rg%OOQrGTDD%hK)W<1R$YemE&seYM#_`n6<q7I'9pQSk1+oa19LH>H7:@d`V7<LRnM/H_+auea5"Lrgh9i8NYpN;gYu,RI$U2l2(t9p-S<Ko0F`F%%uoEj=g!$DqRS+RK%MWEN,A[LiZ9Fq(Elt]:-M'uq'F>s]E(6\lbtOS49c<2G:%gP^NioQ-Y"AT0?6l<AicMr?[_g\Xf#..Z2'!e%V?_!h:n$+oKN%G0h,.5U8>gR4]0caTV0Ugq&EM$s=Wp3%DjO_C7h55Z_$@.L$>SR>'9/"3./N@)QhH,Oqfg"X^3SRBI,fd3+2Z'+%l/!)fFLpZH(CiY>"?:T1qg5Hko2dc4dXVA2Md/s>"Z4Am8-=+!#=*SGY$iP%MLLJoEeQOu2%Z(/;<j;?Ch@I::LE'DFS]"5C!Th?%C><(]*u4)*CouM5B.p`_BA$HJ!bOY9IsKZLn$F-opMYg#M+%9A<@u\OXpcl/$Z\bsKKZPnpM-sekR#&Q421@LhAngJ&@02ZXHUBQ%>kJ#kPi9.G9f.!9GDKiZ&aOBMR(Q_>0?5DH[A6bHY,&[#-[oMJ.#3/qG;/QQ$9^.7SA\=`UJ,cS3,,D/B(g!"NGRum4IIOmAgS77%(FT3RF2?aK5`U6r4'=/+-J(hdjP:mFjP/2WA$J>dmhQb#o+T@0_4EIpSfA@t.ckLFKLDkX5O_^*S9c))*.PtBT(i$e9iSn(VqI![%gfZ*+IZbhpdmgC&DtP36nC3kYEiqnQgrZe"ETQ+5G?!<Zd#>g"#,>QY$K\F[!F9!u6O=DLhG\XboOtZ"Rc'Zb>TRc>P"FP;oNXbG%^#K_%T'qV!'U4o7Vp"STk4+RmeK0q.mK64uhLWl9b]e$sGTq>-nI4J\"?^g.G0AolX.QN.SJ4D]")j#$nEr<2ZF)L^,BI'NVG"nH%e\/l6mj!_9&ik\85C4G(D,[E\0^"X1Z.]*0(-=bid\D*(]`$oj!:b<la^4^r]?5:uoFVXaSnS&5]c51e5#_as[mGb+cg.!&I/>*p%q5TQ,Q*Ir,GgC\B<BB'L<3#Dsg'A-1EsE+]WE;OZ<1&+/]W9I;MRRe\&hUFYJ$!trW-EFi)#Jd*QTh&dk\7KjcOBB8c;b7Hk(6<B%L""MG5\[tMgHeUY/g%\-^3T)sj3I<mL`i4g-^d3Z[@OX41iqCW`@m:tY/*^W%g]%p3[F[\r#u!(V?S,hDinng<f(Y*hW3%9nBTU#%Sh0%Tq`n>:GLGampX#P:q.1h`+"0FsQq'sJ(Vt_+WQ@H9r\uIE#J#(1:oHu,jNmu7T^6X8cEc^9jP\+^'JE46/P8gbd/u3:1aE>[%"0j?H,D>(Y]nh<u6bcOL9)'$J>Y,2O`k\>Wrld^_eRZTUSOuVV#_9g03qtj+FN$<c\qnB'W!Rit#]VkhHJ+W5Rmf[L)As#+;%MWC%T#\Q/-R\hbUu0NUl:`E$llVn',U-b1RaQ<@Uqrr@q,'5ET%!2bF#7:8SUcWAn.8;#liA:V:Flg%H)CD?<3&pe/gT@4l:U7D]njZ[%@??e;PlERI8t,_j.FC9L.sZX42'u0TXZ$=`^Y"qVR4pB&'I;k^$4)&3GL,kR7Xe2UhI;;;PV<`N>g$LeIe(pP<]o8t9KVkc=s+`d%PX,>!JZD>d052GMQ?uA"Jh%:WY4.?O"IkT%<i/5&i$'a&pi_Z>)1[.7THYQlU(6Miodk6YSTqM6,Z=3N>S'sXBW-p1,uO3diC<i5%P`WtPeWD^]\K\jZK7gq81lG.=!)\bJ]bo(l]Y*;KBiZ?c.Dl>RE9f*t3-?0f#Q"$J,+'Cmll^ZRrc&:HqU;--?Y=/`Vh7m%,eIW3%\IOpHbY'An_o\/_XQ39->hdNi&XP+Wnb2rQZm5]W$>WCFP\H[fANSt<n[9[HIseP/$tc,*!e9_s7sTXH^%5dubf9Au/#@'X]6/_\%0Ju0\jI[aN'-^`kptqj#e&/Af\sHZma^,LX2qdKk\6nl.6=,@i%\EAdRA>0XqK1=NZL>t\E;W]4b$O.MQ]c(;=-83h!rbA?K%7@\%Cq]UMoB&(QIm1CqS8c)YH6BMuUR1$-l.smb0Wl@=[lh6035P$c:cU3_qo.`kjLPN>>rQ$/%>'JXDdJg[_Y_jh8H)HKnd0Om`NMDm%mR4o2:ZfA>Q7"/c:OnnO/He'$ZPTITk?U7.q4p?(msXp8E%cB+5a1hE4FZ*qiU?oSGq+%Ne_Z49:'.@C\'Er=TOVWuec@jXEK6UR%eks%W0IC*##j`PJQkJcD.[#5_G4L>7htB4o6_3j88sh+dSQ)b"(G,Gk8WH0:aEDi^L^uP+!.KL(RgQpmKuL#.MNL]DS`\P7bQ*u"%]j'1c;S-69i/()/9m2rR4@#k,/%sK^a[5eHrgrHD'Z3>K*'Mc&]lNL&lhQ?GVf,XjpD[HWLt5H)>"Yn@c[dK@!2X7i(L40@gKg5R%e9hua]tWiNQAU=:>M,M5-d_5KqmSmfM0Q@IP.S<L!*gTAk@,DX4F(mYYKj2XV8>u#HmC@hG+4;3-]LcnEnVAQ+UW)--iDWQbdX3M%.:9YkYDWF6QQV[1i$n/X]4X=c=^Abb>ap=rY1Ho;I,L/089#Ije`ul7W(,&U[3(B\9iB;V,u=7uDpKWf%YIis_cuu\i>+MR`A;k=%%i`<2DnFN'0=',KlP%Lc!>j&:\<?D&*-`i>"tmH1rkW#i1dP'1]E08lo^YTV!4<Dtp'f&4B(*_Q<5^3&Z/3LWqrI<(>J$RN5R480%;0pMU^hA`0P'#9pO-70hql[D7GTW?<>"\^n"GZ^'RX69b#1RTF^dZ/U@4JlpBLJ8gL4?,3="t9-]cU%HS]fkrW=XCbqpH!.].uL(%>D.eEA5RlZ.(D3;WOG<BSkKL-lW,-l3reP=$49nqe4+/6(F$1nq#uL[Co7iUhoggK^r(iZbj-4Dk=?Fr\SrZ^d(=oI<:o-SrurI^%R2tJ<gr1Q0#RGhfBA^0k]dkoT>^;L^IA4/.^Clsah,e7XrM]7K8_o`g$=LNbk!LN<#1D-#rWh]o_3Qr;S:/*ti@Qrtj!L/0a1VO1%]VlroK%d:o2rS]6_J/CR6gd-egT/hSU-%-[eqq49iOr9:0DaA.8N)mV4r'QR]cGd2Ejui6MYqF;JOiLQ`(-NmgMF!TJS^\^9FlU0%S)FFj8bV^9oTJLP-JlS/hsDnQ)dXC&KYVo5m(sV+oCG\U^=Nk:p5pI?dU.DVaWI\0f3sl*+2GFUA.ss]8!#jEoaANc8P[dD^&fT6%S(uCR!5;R1EZCB28GX&2q)jc)ondms@_.V"3d'tSfc)9[C"/C7ie]1/=47:dA7_N8X4@!6L@Z61&BRF<.F1iHCoosd\R&`$6%o2D%SP8>.W[Fkf6,I<e&6R%fHg%,Jrre^dE0e2?A\Jk%S^>RB.,R$E)eDnn2bb;jpZ;<urq90o%YYY&he>7hNgnXe\`d=DXL)AhM1=?'%!TcUPQ+SK"Q/p>6Be1+;_DDJ569D%;::IOtKoaKFBKS-\k(,hJg!rhFq9H3`aZ]%[Cq8kNFT\,JfEaVMeWr-YZ:&PVX'2NADH?jf%^?=MAkI?@8^shp,O,K"QXuCLcM`bQd[;D7FW>lt;P+QZQJqV"XW:3,@r:ATLJK/Nmo%=ge,%cl(9*Kes-3\5]YpR*9@L]L$jRl"u%qNgFL1in=V,LciG!ZJXB4+Vst-CJKO&`=rUFu0$[iE`TF+LZCm0Mj!@`[A=\_oBsK_/n,$_,VRU_9>ina`Y;5k?P3;Hk)[-,-0cc%.`6jEJ2TN@Tk67AhoI-`&K[,kL_Q7rSX4L@0#uYo#I:2io\fAS<G;&hIats@5\jVH5@j"/n4S:[CW@.%.W$6s!nVYAIMUe(-bViV%\)U4ahRNM^[Pui(d:gdN62RU[o6fc4E-f);iXN<b<>AVaV'>a'/Z#c))rcP-H%G%[KrBW%2P$Vu_cYlbm^]7V:[`</;!6pYb0j\V%oQVUa@@quJjRT"/+i\XAkH>=5-.f;l">9$MHm]d9S.g/MCj;=DJ;roAGBi:+?AlRU>DF**Nf;aDH&qjUAGc1MZW+Fs"("mI4cBI$%ElWQ<,.Yamb_q&j"MVu)(>;+"`iGU)/GSrfZQBJ@kk"qGCmSS+rY[OA7N=HMBsX:gH?2#6n#5aX"UV.S(,>AEU,`44)gF(#V-:up%GM[*@J7FJnV!"NW?09TegV2<?H;8(BC;0$L]`08EI6=2t(cYUU!aRBBQegbi"B[D7M5'OM;L/AMT@lQ.Lp0<AA^1Y!MtXkoc))pS%i0Vm[Nh6Ab:t,qZM+eHIp$OQVk,kii8tF`c0i`rN%`>,+s+ZO9Y>s;t[VWXD]VjkeEg"gR]mAOg%sloDA,+@HMd^A\,M1gDHn$\D%bgB8F5Ztjp?LB$7FF<QBiY'IaF`J.e<[]]*E89o@JD/0=_&.Mul0Z]c1q!B:;Z#)AZW:X9DnWplM.fg5P&.("Cp6D1h3B:qX)6b-%'^<*eNEkAMXeVO8gZ.f$*mA[Q%XDEg_)9"BHoHa.<%.3X0Sr<3?bkkh5$&$9:X4#gg7A_@>]c,2h?NJU;++::Cdj?[h?9>6"cL(L%kN?ERE88#C(J_X"'&81)k-s``4h?\JUZ-OqfHp6mCV5N_N5gGabZJbh"kT;0HaR&_)RA$DQ/_RL1+&$Rb56LB!15.Y>3c$n0e'fL%LAPqL!T'/`)'5&9l%$liA1^R`2pm$Tb2M2]Gi'Q[;WH6r6)i]KL(oV/YPo%d)l)56lIAsiRrQ1,H&:kr,/>I[db1S>_^<L;dnhr"%*fXUZ"u,;%l2/\<kC01FHLgW,@.mqd<"ns@"Ub*S#_^6>Le9NW[aD]PMrD@?"Ragf;5la.$'[1dVP`2XPta!\/[tq`3>6'R5_&d=%_d.^be=MSX>5#,g&_l_eUmE@:7%#?X.pc*[;c6#iJbFTbmAKod;YDk%9V%.i/<Zi[@Ua#4U;"_0FeP5$]7o'9W#=KR'Udt@qf,I?%:SK19_"#qfe4t*D&I<9iBLnO->\WKo0j]2g$C(s^/D:cO!Z$OrkfQ5+O?E[a['l1amd15^"%<=^!slF%Ut1_#AlN0A2KH'n;Q/5?%'g<>[;Ku@I[\Z6#5WqZMS*W":H)&ep4'e]+%&ocglrT)DQQ5MhWGl2Sc6?]umJGZ>YO.nq)Y_H5i3i2Sq4U!"6P@i+Q5I\no$ZS)%Ohq2C^]UE-MRto1"K'Kg&CIC_3TZ@*]OSI?p8OP)<X<[0N?;nGdL/2#X)!4D`:Zl!2]n44mFQ\#WJ$GH&l0C]Ss6Z*56cgcp;Mdg%7rnN2Q.[I>qHO(kLMQ!CE;5kbIG@E8ZO\iG4N6Gnj#(gr'WEB'rfb#nh1(nlod<&)'j7?>*H$!.>))X7s(I`]0^0^R%q8(pZg?9l%"I!UR$87s*9uU@/![)VPhk!,,8]4ut87)DppT3F)]1YYBaXmQ(dbRs.E8oW2.=:KB[u/Fb^BM<:6fGNR`\s@^3jdIg9NFTn?fIKe%f>&Y9bK&qamq`"83u"?oCmHNl_rK]D]\1!BhTJVG4uf^-KpRjeE44KDKLAX%>$SK9pN?1"+eU>cVJ*6A?*4UtCp9RJ4*aIr-_1dJ%(3k'4(L;SsW'+hA>KMpf%ZL)e*^H#9o,ZGHVs)lPIMI[@^]5hXQn,pE!fs"h!Ad^sDAm('4*?aLs-&aH-.SE>"a'YiT1Cu-JLTJ5%XM-4g-=$,.LqpSlnX0J*PU_11c"cmI@rHAFT/K#(aEQbKJoVi^hnme>X&MK5E$]p"&,%3&[;cZnp>t_ik4J`a-L;m-4Uq8uY,SjF%-ZX=e$A:On%Q@epm_3K"r%[I,[l`NqgO%</S#!&:s4Mh:'d1f=7-NRFMn0.(gUW3%_P8n@\3_!nngtm(,pEX<jnb#ddg5@(aA7Yf%3g4ct3A,a,aSL\T-^iHE.%N?O^C-@[a67B&H[[4IO/7V8kob?",^6TbJ^@&#lcPP)ls>>D.[1OV4@6kT,mc-4ksgpMa6ek$TG.>[%&W0V71usdY&uG,8pm(5a'<Q*aom@p8j^*bj5(K2kpsNa*2F8D.9;*:5N=t>dibRurr)rH=[iYtB:7o(`Zf`k;:<W1Z=R,Z=W8$S&%eiBtm1u6<F;Ou:B>JJX8Q^8YRDGIsq9Cb*S&Ph`9SN>PH[j-t6/7?h=XR2iI%n6FlUH?f9rU>S+VAlA`W5H;o1[J-6E$\,edu6Sj%eE5>4gGptOo\l&`]q8Bf:/Me2e8<mH^J1<LCV$(&O2<bAnqJ78[5ZSa=Gr05H;<qE8q*A-/$Rd!kum[C7%S_c%d5al:+`:LOV9dh%oQW3``a\oC;!q:haaCR?m\N(F)0D=@WH`-8eEuo$nEnr.dj*ea7D*unqRGt*?:LE$k$#OKX8G`hCTCgildWDq9;U`F_7Z_5ddH((%k!Hi3kedL"8eU<uSSjZUi`k%5n:b2H^e6)h]T`hDV)I/c_-,Wn;jo-3her*K/JD7tj,H9r:*"4(J]F8Z6_VtaJ6,+r_t3)C5i1LA%\"r<]EM'2J"!m5T=4=.d4k_l)=R)=bKL**;Tm$B8SfVTu:8uK_[oI`3lEigHmCjiCVf7W0E'=1mANmZrCY_adH_-%%Vl*3G6KiP!%-%GP95ZI&2)g]#S2GT=#o;BVLYAU8IT#$1jVq(Lk>6B$5E)5Nj<$lKYL\pq=<[-t$;J,qo^XM/`L0gcC-Gs_>lfF,2!J-jqLqCRR%JpsV1l!jValK(IDe!H!\1$TJ<QYB\h+(D@86)W$8iapUIk]_@P3UC)u'+ms:TGQ*prAZJb,V\DaqHO5q526^g:B*_ke&6N>_j,KR%!'(7p9mp`DAl=]AKh`SL*=^Ka4BCZOe7mR!p)^1fXUoE_W@[Dc06[bLJ_^C3T3n>>5N&o>NnE_$U!rP*:P5Y4R=<lK43]pMa(dp(%k=.CE([)$E)k<3d`rUiDkVPMq&qrgp']8-uGoG$86N8`cc>/li<[rTV3eb6Qh/73Ph&*q&#u.<;QXs9=rLUMUSW70O.7)E&VQPLh%nnt\U>Kn>D%h)aAe:Tfnfm[L2L//noaSr<hdl)4<k+9XiV^+J<]nL<U\%s&#qsraV5+/qC.?u%A2<!euS!`2-C=(hIf6bdN`QR;k%Zf0A$Gk_'Zph?4HogfddI\%!e5;itC<d]P;Yjp2^`VZ8)<'rBTo4"KJ3&5_?EO:/$Il$)V^3dSWRWi[t*RQip-T=q%'YA(L<!R`q%GpuhaFZI@;GO@rAAc222O?*q%VXs`1r>OQKI/5k;*$,t]mG<S==7XfhMY4TXoW-Bo?q=@G0uKn:iFr)EQt#LGTM_g.]tNge5(;?G%Hs4ac2&O6/-fMrPd[4KH=*SL.AahO"6kg/T7@[<54j?o4m:p_k4O(cL6-]#T>Br.X5ECi!rbJnHQ7#k-Vn=.%hV:9hF==YoV0\(:%4ZR\-c@8d7Z1)uGHC/tZi$A*u4Nu+ir!:0s8hPVP3Y+ICOT-YQDnM#?qP168U?(>m_OcD'J0<0hT;/^4d[LgZGk%SjGQW7Q$B>C_%,mGFKa50UBB\h;FrOqYmrG@9M#E9`HSMlA\j=M3FM-Fl8iKh)ESrQ+7e0ag/T(G+(5!0a,$C&UZWNjL.\0=_hYZ%LkRRWjVPat:E%>;-^el8EXRX"$/ID/X@8SKdB,l854Y0=:^)9ZoS!V`PF1HW>6i,4InNYZ#*2)fuGb6"'Z+b+/T=<4KXZFp\L;MAg[GXae5`*H#Qj%\+OasG6Q5PX`t7975fkT.HGnW\'V"NWFhDeMVY%G_F3bO+'X/`G-@,/5frm-/ZI!ufAca_A\2&K=EfA(a8qg'Z\#QS@bit]+&_9*%&YM^^-Cc2`[]:8Ta+l^F.DPeC*dV$J_-)OKM>-bn_k$b""OW,mUm";QT4er'AGN2)";b?s4\'&1,]oY2\qL[p)(TfZ9OP+-agM?4%!QZ8iq*ph:'+fN$:n&oDV2oDg`@SsO/u6JjfLoA(mb>jW&5rWt^:=A2CdWhuZ7Ah.\(_(+XMEb7>>7@3iW]T\SAa3#oDochS_?`b%)cSbAX;R7C8G.fE/DW+3fQ0S3ib4d"+<ih-Q7nHWW>3h>LG3u0RFf:$j"eR!iKc2d+,2R"c<k_3HN#fKr-!cOVM?<O?>iMnKg1&<%>+`H?JOqC+@,u4nZXa?aJ[=-#@dO>8XXna'WAHBFZHCL#p*m1<G@92g$7gC>b(k&!aV/a,4,f#m(-Ob.U?Aq_(-N6sdGqH7]#EiB%:.[]ba=77/o:eaIG-=>J_[$B'(luGqk<B+'OTU$c4To#E@bZ\h;*7Si[>,4gW%#+k68!;'><B/8Fnp,`fM0^58AV4?8u]cD=>?/Y%D.3.9`+TbTEm*0'85I*Q[0,3pHNe742H6jN\".@i\GLlo2#2nP^#_7@A)QDF1D5Erf$\EdG9F%.`C`Tc*IV<@/hfFbM!g.+T&"+p%UJ&+EB?kWb=4/&^'@XMI,lKZt++??J'Uoe8b5t4(Dt-eF3W[3a'+-t>KZ\l0l*UQ]PGI./g:4YUL85Y&_I[!'*Efu/(`=Kb+dhdo%BZ^[OSeB`:47c0B8ZQZ=L#Io\DIV[G)_*0CRo+&3XI5ukTiuKHmEBJddcAK`oq]Y*Xg2,*lO`B@PngLEON*&'L:Zs8=r7d18I'u\%Cs\#;kA]J++Rnqr%1=\U?T!H<\#EeEA,aW;I2Na6P32gG*FOg6<\WP6;_&Qoit?Q\"^hl':5g2=Puc_r'WZ9_UmP>[fc8U?*J\ou%F&S+b3'E_X3`bX_JFOWD3J0d*Xfd6ckO.(W$TY(<Yk>PII(6F8Y0>^OD:rupq>JsFR66(*-5Dq,ckElaSVN2A>j"J[/[a)"O!M,L%)+Mt3%$*536'kr[V^XbaGO[Kl&Q\Jp:b8CBej)(#j_QcY@!fjXGTYUOTV=W1@-II/L/6*58ue)6UthR2bGZ"P"LQ"SA%:ZZ2EEMt%C&goRAR`R@M@Tdn3ArfX*,[ijg72"?W21eN\X0SU>V4tCJ7D^^i;3>jpj"Pam_C'Yb#Ya,B4rlB3S*qM$odkI(9seFA$Ykb.a*u@%PmaMUp_`ee@-tEJ\Ed)GYqdO>5)UAk4ig7t`3RME.Ukt#No#S.-+b<XK:eetBbcQlHJR0"-*V,Cn00,iZ%Nd-86.ejZ]M786IJ(q%>OVhlZ#rSQTVc*B@J4Pn8PWZ"_AR696h6DI6TLR5eaa.-%Bp>V_?_<LWA6>8piE:ZW<R>aLYF@Pf0=hU]+8u%I3;[o@so7m?kBMm%e=j*IZ9iH/+q6o).@ll?9kggAN.Zt=9ZAc`+dGj2VR.Atnb*e<O5#%E\FG9oiD&+&=V2!Jba'G8eQB\pnOr.^`uHu&Fabej5=rW6%&<.a&CA"/164UKH8dB-%Xn63;!/EN$R)<CYnH`(&#gtdkWm8\O"k:pJ3\*@hZt4Mf'WMX\<dBr*)\=Oh)pVnHj>t7Pc@bWimDZ`9%EPAXABfl!j./"E%!+lp`eVgm,SqU%S'`t_XI/<gT?lFfImS+$FCZ[+mJIP-:8D5#BYU@`6R?n#$.$?M<6P3n8*B<ccT&fA+!)r7r%g/Fa2rBUt"0)T%``L051WXIKgaJ7fpLYJ7,1"6X8((T'Tj"iA5?nUUp(+C!\BBi-d`O$7peD6OUBVV_R!tRbnkse57J2!CpGpV1(%/C?lSeW'g:"_K@6*1/fY&D6=^:#a=d/\;">#%gS*U=n[W!6;fARu1M@E9<L#&BaotY6^01DNI*GQ$..6%_&#eTMe+cXI0<qgcEro%;54&*FhT0kH)>'2n@*[%?q(%bmeJUR6^X0B*q9!E=HAmG#eW;T$\7'EC^F7"gJH,>R/N[ik$-n>X$#oT$ktC2R\V8T$"FDLca5Wa%K&SHacMT+&#`=1#XkA!/L83UI`saWelm<i_MhkC)\e*f_K@Y`[)hME!o@Wep77qK'O6602mdG+i=c1jcTf0QiA`&ut?m2cMmJH'"%4^D`&MnrQ&+4?V/@M$gIp:UNbU^Lhe@L/!SIBNlEnm2d`i+bW#?&0cMo@MdO:o+Qcg3mH0geDZ@kt"YMkiQ:[\l+eU-)Y/gg&cEB%A4i)^oOI7%h;?NlX4G5b!O-j[>;7`NhDW]f2PCtR\LYrNm)@$j!co6ticC=>dla;dD9*uCKoo-.)3Ws95e0%Dm%m]Uq-[T&/`hU.%/ADfb0nj]C/]73Cj30@_IijV#N(6JKk%]hjQYd+\)=H<Od2q(rH2oM%[<GeW7"b\>/8ieP0ZZP51Kb5t`F*t!#0d'SRXE;^#_s83%`u5ZSMO7j*5pQ!&/*jN`lti?\=U9)!WoZ\lY/&tqmdf8L(0uK-j;$7j(%j'?pleqEYG"m0Z0;TV9uYK'20@sqF@[`3TSCar;cH%q%==n3mL<dG`:0B/.:CWk?"eEg$S"k_`]RimY/N?60STtC08[Y4n)ERHs3`I]@J/UK?G!^'=gbj1PN2rtOP<=a`CZrtmk`@r>>skM^%82dG$]C_?[XDQu;GiMC=9sP/HOE;_\"ma+o?+bK_P/^"`3>o8u[=37M"1XKMVh/+,gRC7C*a_4&YV@r)p3'HZ<F%+)l$+jV0c9N(%gfakYe9cRT^s)DSnF/fM5-)gdD#?,PX(d%!-[Nl5O:3T\/L"8.6ddKQK=KP`R_t:G7857fSD.PWJ8/mN'njmTdnL%O+#Z"a)P`M4%k)NM+"?+M%F'ocqWA>^b"pWII#'2tH`0`3$1YT97HV%8WDT;[Tq1aMg=r'hr5ub"dPoEWN<&:I&L%0\m;m=@-*LfOnbGt+F:M/!#%>>?j28gCgS&M[%SZrLRmC>[;jWt)7[HU'-q]kke3Rgtul"V//$TdEG7hS%<2R[mm-Wbc?l)-2;;/1#-RR&/Ji?,nn/b(7$!a4IPq%J([d)Xc,p%N/M)f:$Lm^GgA[&dqDPq]b4'"q6S:ra3GlBQ.6I?h>+sjj%F>l2)/^$6(OPVJM!riP`p;TN%.cm!4-#%p_6X3=QcKI%AXOr1P-RKFM.5bcD`Dt@&5X`8*GH/PFXjrkCtYeTn$JQ1Z21kWgsWiA:'8?55^,StO``q%KjRFHnRfr"7i9OCjRHA4HQPc1cCPUJ%D3!Ta+KUSm!V7k5We"5$2q&2c$#BJ`RPakW!DD4LK+&7=O>O%21N;?NQG$F\SAV)F).Ui'+_6&_M.=]A19i'&UT%4ADdeSjElH=[%d7XC#[MRfJEKtcAaeD%<9'R6p7#c>sq$cuL0eUMir,-2/I3.,NmhhDEBetQWVGl4ndbrK^'#mS[Ajf*G,ZQu_(f]-_pqpW5C1ap*%@O?2SiXX'm45IIrc>6&*ZTEc-pb-!;["sO^$&ZgJRAC*=i@U"EN3L?8;4b+Z$?"0'O\toN-hBi=!!'2oG))&4ZrnS.;q6Kk7q?!F%RO04g<0:oqT,4mMOjT0[T4!oHi"bFj&j=$LeghUkI1KZ76)]e);qY82c5XeYQ6V/D^.jR*?s]$V4C(W-".Y_-Q"Mg;*Iq>9CQ[)(%;hd2?!kV@F^]H:Ok`UqrZ)Q4Vh.f6V\iSS;ZdTelW3-Ud?dH*^:/O&e;CQE&"?eV*Ue8J:$JWuc<UXu)/5l6^VP4`>hMi/3(/k_K%HW`a3SU!AgrU\'AWJAsGK"gS)\fPaL3XZo"E+TufMlVVc;<p5&&>L:Ak<r.a,-KVbiDeK,i]E`#f>D=K*T\g2(0qG`GtPk=lJY](%<Z%g%Zdls-I5.L6*E^EAIq:cBE!sjG"JF7)O[cc*:/9k%Mj4ri`VZEJA6q&7NtN`#Y=;$$r)U.b#m[Ag`"38oO!-IjW8sDiA2),V%\!C^3\B[&V2P'<<\BDl7j4X%34-f@&q6H@n%20XLHgYh8@7.U#8.ejhQONsLdplt]jHq)04q)Gad)6iXoX<p9l7TH_S-Fr1fOH"U%H=R"g+bc#3&=sZDKO]BTYeb$W7VUH&7flndL8Ku'CJJ[#nP@30@.BZ\_+p:+[8`8\DTnOlU;5IG@,[M';X'0%7M.(]74Q!u^^1l\%Pklu-,5(bI0bpZ!c6=`9@D1=k'r_be+t?J6*5#dS2(l.??6<Vfj$Qa^-Q2:SK\9G5iVhPJW%!GLQXbq+KgY\6VAVOT.#$-@Q\CdC%boX>n;p=$@\)CE6;$s3`K*W40rK:&<SZ'CY.#$-2O(%lt%q^Qi;A:P*:Gs_NC)c<8ig^:X[`@r)$b$C#d0kP`@7:kb!ltq?n]>r4%D4%:iL@&k2.&tZ:0Xl#F:?MeT>YjJ']iZ(0C[:8W%?JES.L.[hWhUVGre7i$q=XRtjoA\,RD*@$Hae+1Yh>HZ9?F<[CT3W6/7q4Y%&!6^cg0sm[>oR*p/970F&QLp7kCUs+4r686QOm,OU,m>he3auq:?l"6]rEmP,mcG$:W@NiM6#.&Ed=XBh=d9RB?K/=U=34kf=gW^%N@O:h&,0\TDQT"/VaRMM1TRa$?ZaS,UJB]?3\:T"MGCRe==N,u&V\[L]1)2C($T<s9aTI,f<!Va$u.h'hoE4X2la*W2E/CLag4jL%gQPdj=l6m/Nigh?45I%nm?UVIN;7mL=80_*(=/VqL?.//7/#n8SR/9Gm*Mg8L)$p^hh6-D_JH]Zf8bnAW*2Z_.p*@X4-t=V6$63V%*CKI(oTIY!8PcB`c!n^1.CX%"ei2N,;=+s$DR56MmBOr5eOE8ln$2`+(m8?8b[aONaf/<d*k_6YaID8_XrYnM;["DWA9O0,XXMt'%!BW`uU)FZ8$#(Wfcfu-'e%@mBoji'!S0<?-pV'd92M-jZoj%[P7(9a?7!"[J*;@M4o1PK+^50iah%fYc3qGo2/CejK`F8+6e*6Z/%ia&(4X/<cs+(if53k^oRQ=&dXVUMTBS$hh7\=-/G(9a?E5>O/-MC\hTlCL3u=#HNi.#Sa*AuMSr;'XhsVUO:tO`]^%Wp0.jl'22H%@]J\bC?[EnHYc[1l,DAq)qYs.9rBq^.+5`SC-"N<7[Z?LQte[q=uq;bk3&\?RiYISe(@Qe[@0k:3-D_I>tq4UIlc7ZF&pb(6!<%n%4B",.O_qY]C-$a"bu7?7!N"Tc?ViW99GFg=9kRX>[BOC,rS$O*=4?C7!50qnRSIe17$@_fJ8.,.nY#S^(K!n>Yqr\YC-$//ZA<6V%4^uL`pnFeQX=Car;ba/k94rJkhu!sl5^!--pP[]c]#j^_YN\\0[<H\"(-[.L0Y<5;;:aq`S([82Ri9]lmd_q*^,fci!fp)dT>q_<%A1FQ6+^n*BV."qc"B5O3#$&u=K@1/7<to&t/uRQnRV><S@UN$@Y$Eq)P("U/TnG.oPKC5U"sO^q0ssMn8=kbs*`6Gu3OH<KgcR>>%h3MVqdG<U0gaUOZ_DKAI\`V3,G.CPQ=s_C.mYiX+n-\Ea&gY]mPN@_jk*rFB_[u!s):KuKehqZ;&Of6X\Z`OWC`)c%mcM7GNj!l;%\EFE@o4WB[J9.k;LGu%),i[EYS1Z?]Bm;+sgb[RQ!7VL%E7_#H/e>Ufc8,.@C43rS3p8\q7c:NYl#8DH*S(s[`^q0&onB%TPI*[r%8S!oDL7pj)9#eJO$hV*rdFJuI6W4G6eiOhnBYUHmfq5OR99fqi(6q<P3-I1o!+hQ_L7JbWJDk']RjU*=fsd'ca8*22i/N=8a+4W)%NsQ'WDHAtLMTi6g+ug-"RAsfLXVA4HAOjP?$>YXhJC#(_<X7*-[FN+Q:'H<d(35Nl>%:sI35S@g]*q86dj(^NIBR6Ce@X16]!)fc%3eQ/9'0"(-Ak(U1<2N26+5=7MVEn3/Mn6_94Ld6),0&dD)d=+Y)stAUMq@)L-[7%O=e.J//Du`m*mVF-<V'$T-Ib-9csEm?%7VLn%XW?7=T+2gs@MCS*7H!@CiD-JX1qM^b"uat&Y*en=C3qnpR8lGr_1pr9'5k<aaA$rGogF$`jiq"*,i+\D59$'HE2Tj3_Pn'6jb>k'%qd/5%GP5sb_`cNi<^4i9=Sr"BRlNsp.s>>Q!+p*13,f9Hrbf=#$>[&7O0Nuj8$K_s9Xc"qhDnXCc4"`7lAPuSB-Hr<B*=eZAdQMf%(04APjKL[W!aV.*VnQH?Le5--$3c*4M@EKjMi#6*CPhf"@?rY,'JXkC?F?B'6Asfe0r^;BLn2\]Uj4[G@nM$O.b%2KG)7_J?6$,d%.:Vif%(+%KXFB9EXWf*e$mKq?U5>bTB,KJ528""#b-*N.FUh'WJ)KdG=@A-a5%o>D)"_2%hFM;F\jo.\@sdQNECWqjT\['\e[Rd[%*_g5'L1uT_?2&#P;dO.W)HR)l8nf+Z<R95RY$afQ<R587Y!N6s:.-D2hk+TY_2>^sK3FsAk&[5[]>>n9;K]JWLV@NjJ:7#di*6!i%<VMdHT1c;j-bWC8'b:Z=.UpH82cUIHq;J`e;cPuN_`c_dICN72WmpdIV=ICm#5)ps`^P.-j=Ng#A[80AO4Z=irM)9[in$7F7R_RJ%L7JBN2G1lC+g+4YoC9i);pTG.pgJ7TgQ('g<66F"pbEUcFK-rf)gUGtni_R:9pOb!p[G/[f;ZXs$*:g]:0!$=CMWs7j?;>62!C1X%F@XXbDfQ7e>7jpql*S)l)0]8ug3hE9']&YP3)Z#BC-0*e]1;A_f!s1<nYW,)liQ!\_<6:3Ro"buff]V?BA]@f,Yo8c;q>"_DnDu"%#"2gU*>`9E$#k?LC5ku&ZUTcEW0M#P,Yfm>3m=s&5h+Erg'ps9@V2/jM4pC>liV*5P@]Ec\0PcL[E<GZE$ZG6.Z[N^A6mhE>1CeJ%.%k?q1CJ(GWF2<$AN4g22m\#EWch:ebc:(f-Vr#bQ"H/Pa]$<4\"5FG??Yk&U=QR:cLriJ#"+j%daI[o2UQAQBfXs\K//H#gD^ce%QH"2R_K_qu@l<8Gpmg2@DdF6XmnB.oPlS%L0oiuVLr$e@(Nju_6bnD"_BDB+P%f.YGF.L#36t1'E_YQCO`</l]BO6:gH*s_[5_Z,%=ac/SX9+pd&6ccRiXG.lXLsk`Zf4Xu+T;)&3b^upMj5pJ]'mF:_NYhu,L[s@KUHu7RkM9-ia]?*AUSutC1Q$X^NIU-h8a.F<Jc0!%,nP/3S:,b&i9hu=_7fC$TY3[tWV\7/\<bCPP0$aa<RTGY#Ds[=l<d_+Ze2OZ26Ij\,#r"&X]BDCbu2@F(.KaNnsh4o;F%95N@j9g%hKa%)XUB9U(PCjVA)1@$C]LfQ7E;1*Xu-6Wd44`bbd*N>+%c.Njd[$k]MHQ``@B8J"(5'h_Kse,5d;3-!-)cSZ-ORJ.M0Lt!Aqnn%a/B'XXT=rP-ekU%`2s&>SoAAX$4sZN&4N^6Xo_QS'b_*VRg3`4$4sZN&5m?<.R9Dnk&Ngp@qE+V&@Vj?nr[Rb!]1bB<"5L@^QK\b%1fj3Tb(kHkgH:hn.<,*:Qh!j>'n49$Hr`23/`oqp^1P==5ahXM5)3@_.U;bFI+.g7s,'JFN:08CjJ@6+pK,X].A&Aq!!bq1%S@k+%<GA]-Xa]l6%<\t4Z_9)Aotrg0C@6HI'W<VACac'*rTrVpc$HRcq5o*%SIME:YFg)>8Db)iJ$5LDi\N_:C5.*6XB4s:me&B^%$;`8%F5H4q<QVYAJ?J.=IL`ihJ?IkEIcdSC@M^iXl_bZBe?+0Ug]4'qYFdgAH5W`hh!:kBNbEU93BglU.qNkLJtCq-5P()RUcn6.n+AJ:%FEs\$(3$ILH!&_M#ui8GqO+t,\lmB9h!:k>-7Q:XI/!._T]Y(]]mf*?@%;]Yp\L:rW&V$?bZ";>X[o#U?9]H/;fSk1nob4HNdL^]%Ce1LCoi%F7A\1'YORDeJXF"6o]mf+QqFN2_c?oN6'<W&bWH6n]-eE;$X[UJp=#8b"B21^&_(OYP58.?BFX%:*O)NVi$MJmq(>$Z:%ho@\-]m^S.?1tO-bqX@ET1RjkA[X1#pKg(*9-0[LY_[Z)N-+j^oM4C^oii9q]XX/=`J.FfqO-e2X0W(D^Xl7UD6:9,l[=0SOu/-d%j')N\8@SH?Iifb-&X1c0%F_j+p9*E(<i"#bYFd;K4a!eI?SOD;]m`kYPhEaEF5Q:rDWVe;1#)I!RG[9gpSgm(]mb%BqCqC2_l.of%^qG3Z\,+dlO)LmF>`H+\^=R;s@X,koIYqIo]%:j]PcVOJcfgTL]D)/iVfuj^fZa*dR3t%0@S/H6l_cNlMHg&'c\99Of5LAmV4(le%CRtt4auSn_P6I<0XaW'=%r1P*1L1TM)aNPtf?`5+jLs1@n+AIiL_Vc;h"UZEOjr7Q2eA%YT4Fe4f?`(Tib]NjPH6J,ou"(Dk.]GC%3Kqo23%!1`#5kHMYFi@G0Wj>>=@"LApHq",iR,k=]=?87ps>T_e`KY,eEBNoX)Vh)4Rl`V[]!A(iYn#)DpekXAK<lTRhE='W\e7J%PmKg2/f73TkIJ_KXc-ZT>BnY@!OZt-ni`O^&Y])>S8SPrWE`Y?l/NoF*OnG\VdVF![80EZhFmG)B%J!cms&k[3TB8_4M1DHa\f3R%\eP8'hD4M$@de"-m,I=lp=4S9Ek(/7@'l=]/):G+K:FGm.7`99fA2q6<qVE_CY+sFf[m6lH/H3VmR.GT)n#"\DQ:0qcSC:4_,if!%jlS<#lJ-N+Id#IBGfu?KrTX*%B@>XaMR(Q%9&P+sgR5dT<Gu//heU4HrqO(tm708VU6Iaa&Z,6a#uRS.Y;u#&l/bBk]Aq<$/(GKU%)Gc\tV.Inq&.71r,F.>E=SDG+i^V6F]PK42ak'Qhb7I[%l/#pHT$0*rL<uW[Y(23"8P\,5pMMlf3RK&e+pL;V]FF$MZK3j['id):%Bb,9qH2C]:D[j3QBfd=5Qu)J"Xqn)a4V<T>>nd5lH4KPsc3C3od?Q<6C2RL=Bd&!+P#\"<6Oinme1U?MU,b6jW^%#L2*F!r.<cLt%b>NBH\s7b*ff\gOA&HLV;5AW*H*7\OMKcV;PK`numC[eRH0<9j;9]JUP"InR*_X^?\oKV,Er=Jh&9#>%%etr=]qhhNLII15YF3(]%MaP"E%C1Dj1<Q3Fh:6qmg\W5j%A81'$c;I?5O[O.@h0RMTnq(J$hG"r@pUL;@R6(MNV&qn18%?h!<.rGUAA5]2h!jl590IG%mZaM%ET#/j:jfM^.M]j6#ls[Tn.klh8]c=$HqaB"m=)=nrCR]rFF6RsjpS_h-hm0P3^eQ)#<qdqiT;60>PSBk;*H,;'@&bt*/Y8e6h5lN%f%rntHuMAD%pfFFPn/'"hr"t1Eo5uk?[eg;\IA6T:gt5KqWrhomt>%;T0O*VY=VjSk_gG;\A4`')&[T<"_5>d,sRR7S%HHLB6%Zo%5^A`I&ha8VGl_T&GnGXIr1JZq+Fc"^8G#A^/(l"s5G'-nZYDE#hQ?U$l-90$ps]O0#kj,%6RACufULO:)^%B<(at($rU&+T^iNH.%01J/`Q(Ll+>UbY;dF+:jEY==MOI+odgiGgslcBaWSWgul1/TZ84A;krgcBB\OrrV):Pu3O(7&$!Gc+X#'NWT`*L5h_K3lPh@DWp!%!OUL5V;&Kd$&cK::QURYnIG?f7#I,`:uaF':*,2,Cc1F4poP9"+G?`]?6b7,A;Gh%mmFt(h'YPep+!8S#1.OY1`?hAV;$kU*kf-/%ohp5$kqr<]p>ncRW:aV+C!2*.X&N[&=$f]JTf@O5"B='!gU5MpV-SYge[*HN$s^>jO5>h2X,qQAFBlD(kR)u*-SGGNn:GT<YIA99%[p/X7i7e.`j:l>_IDA0\)qsFUZ<-N4J?0>Z^L25Yblk)/X1NtN.8>+BCFT<#2M"+]%e#9366$1NT[Z!m_SWuM1o=Ygl"Cm@K99J\%,8;a5SpX)Q8CAc6bR#P1T[@d5#da*dNj(#>7$#(B(-<k]V$T;7nDOp#V5%@aedYa:lV35!,DFM6P/Z&&^A(n:aZJ^V>^mor6c9n@%:t2*APu;Le-OM6u/:ljmi(BgK!h+\47NdFVTO-()m;jA<5rctHZMYVo^AW<W;1^>0;^%,`VVYJ5Q7O?X9'<0e]+A]'?IjudG<Q:\%9'Z&)?oDI;ft]qh_>=*\U?*F1TLM-'HqKZb5jTRn'd/O/rBW;sG5A)M$a%>40f6:U<(AF22*9Lp^Ek5D)%j%=a7+r&m,Um&r<jL]%eMN)=!eb@dB_t?B1sme&2?8or?k&Z^;8$'MY,<Kdr"_]8_J^U^2m@&qeM!jE3F:VThVb/\nra^hDi]>\NK&RpBP56`0&FV!oeV]'%dB`KFA9]B*J.R5&6II1;UC?VQG/4CoaPmhMYjU>;/$3g43T@^4G#!JF3=eV5_2Zb[J:Xm,3^rB!P+=c:6EG?!'T9m_\q9ksSrg8B%LT\mV%)0QM&b2MX%qA[,KI8D#:`RM!&Rd'efQn9(!(N_/!@fnc8aqU.!,NLD#iUgpM$T/7,&".L*iHaa&PP_\n"7cKLck@OKJKD-%KN'1plr5Zj?hB/I6\:uDp?u:'W5t0Qb<7rop)%_HR]HU59KcS3':6?A>g^sJ[R>^o_f^L2nQT%gj0R-21'YRe'PP&njk2Qqnbb9-%)!W)u_or4W0u@<IF9f8uM"Y)[!P%]g-RDQn=61iLfCWW[b8,hS&G]mP'[4W2NSQ2*(_6.EX9nsnP/k@:bdMoY2FJ)eI2N$)FS='\%[X372AVrW!-CuX!*3%s/Qi/o\89HW\)Ipc(!6j%scSal(],f,/`ZA7\2)Yn/>%:_I%F09f5+81m<fkaSNL<\=40^Z6!#I5CL\fAd%&nYWuBP8]aUr@<#G[LqNBf;N^m.Bp;gR@0Ia3`@BfDl_81^4WjBW,uB+1O=Vj'f6%3!RJ$(qfCK\S3pUnE=!Zi:>[3X(mXLBOEA@%ZS=;(0CppfED,=h!"eN8(6o4lG;QM1C^e<#H:T>6[@4&aAWOg.a"VM4f3!*86i"C*]dZGLTL1b(oYEKjV6TY!At2F8"&npW'Q,#+%eUL'&/NU6(+iaDs\beF.)?XI$m<Jj7%#H%tO[o91jo%!n$Lc-?0Q_u1BC$H6bQj9f*0`3X@n.[kbkE);]H--&G;\Y#rT;QLV14pR%djSH,+8D'2.__eP+FkLmgqoi<3$UQnWL_iUklIc.:sOJT1sU<1^YO,R@cMOEquHM$jc=(JH5&c3!:Fi]5ZB"i![S]]3[^'96QR7S%_`t>hYT"ZJ8=1p!:1SDrSe>YeIth!&%eS0X*'h:".`B5=*Zd]6>`llb=#UD$6kNliWcN',-?fMgkXa5*b#$SrAe4U@#HLP$F1pMP%s52V>2ahXrqbPSrThQe!^o$GJ%lM9CON3VS!hr#!7"c//!=[oKk+DV=HVQ_!<Bm@OAnH8U]#!h"Y,YF`<E6e@21?)5rLK,_gM>-E%md59FQql\E<mQ]J<R5q!q82:jP?Nl]mHJ[a'=R\Zp(,[4:u1Qp+)Uq!=I]io^>(r&G'LT^ii&6"MYV0thEE7HlJSce'M\j"?i)Q*%B6e@0$GQ5W.M>O\Q^tItL:6">[X_H'\a+$j>[?<RcrYO[oNI\1Sisg/i:bO+G]]YhIn9*MR*o!mD>6!b\Wc/PKFcWth:I!tNPbXs%bZG9%Y^WB_nCH+I(<"DJiN9)qXf.8^[_Z0HK3Q^GfAWj2_(B+b#QJ%co"8LQ+lUK4m[$.-f.X;Qcd"3(V<Dp+4P4+Zs75esrH^;H%3VpMF[B#KE(Sf1.pee[dfN[1c.b*29jQ^h$lZ4N?>u(3Bd>DLdY`PEW+Clfeeio<;T/OI?rS`"g6[GsLi+HYbrVZ64HV5H1hi-^c%/Y45/#bCs@Di([dh4*<7=i/nq1J&IiZBZZ`d.d:lY)TT>?_/kK[/IQOh\o3;hn@h?+e!cOH8sW,\pSSmA9i68pjDIJrRKcRjkKFM%+^.E2<J]Q5\S^:e/O]NtBB]G((sDlc@enm/_UGCe)IE@'S"F\J5N@A<ml_YHdsF_P^"Kd>0VQht;uDY/RS4a+.I0Jo/gPYD[$+"7%$=leBB.KFrZCq,nD\?@1clM@uZE.t!MWX<VmistE0%^/Mn0e3N+Ie;_p<ie*)aG0%hNkU,&,VE*/Qi&si`W";/GL\2e]'u\\F,<c%W&?!FE&nYR;>R_jMeZar1`A8N/ujnfRK7J/j.b8]1Z(:<P)F'bU?oI)L0R[s'8>TjB?N`O0i<,>RNWKtQ=_gT,-qF*j@Lj2eXC*=%$rls8Xk2Dc@%b*/B_8Q40MpS([,p#=AtZ`5BUt?"^d*&6:UK`AB"U2-e]g>3dk=WU:u2&5flp6<5]uZoL7ap+Ja2BiK&-B)$rf1c%AC&n%bs6FC:XRs6(oV>2"S'B40MpU'PQ-'tdkO\TIc,]ObB+.l2uaS"DGr8dh7i*e7$s9kl>FDiAU4Q\Rt%02S<AHgp?=%oEH_Ve%Rt&l>EWuqO[joG(?p,C+DZ7cWHam!1:fI8D6k!$Rs"q-E]t0`fa!PGl](r6>(@4d)e/at.Sd\RWs&<RGm`n)jB>O#Q5]uZo<b#&a%:u/.QZ!_cfTXsqHfY>X`JXVZ(S!&?fk+<u2_7n&W9u)A*J:X.I>>E1'Fn8C-ZXB)MlK4]_`re19W!C!QW,DUVlmnuHTXsqHe/3"<%"2q=Q]+':ul391teH4B4AN^>@<#CLXm/Y`G$*]CZ$[T8sp:Tp;0gONGSi>4`EqL1^\.=V3Z+]M<f3[<YOd_Kj"pWi7k8G'CJY&F_%71GbiTP%p'U"cAlq;1N@GIA0;Xl8_5LYLW!=8r\XS8+pDkDa1Vr:oh<Z+SQaAAJ=:#@#oJM]kuCn068nLg_Haa.p*O+'(U<lS"!B%']0[C7mHCMkD`gQk'-8!]?@lkChp5#*q`o*odseQ5<N*im!nd)h<N&Yq<,T;_<#G7`=7=qriP_JKp+G`kI_M#RL61oIX<NZ@#ll>%q0pqCja^^O0:8g#DdF:]c9jsHGUPK?gS+dhV'fLDar:!PR53E`6"iLM-i/1F%6Wf\4OB.^mD6HG$?4Zoa#j@Q!^uh4R<85OTsA0R%PCBRAAfau/?Q_P:.(\e\_8Y'PPm+bUHs1WCrV"5RkNCahHq29RN<?eV#PqM%>MrT)"oSrdBiO%?(-GcB$k3=t`@o_dQ($pV0@0-S%"""qd6<*0q"FL#In!bbgOl&Ud2s`'[q7PQ/Z_d<b*HB%F\Zhp\3MM2!>OHZKT-]5)?HHPkY.jci33==igSmZUFLJ8lcM3gZfaC/0%Y8ge]B>C5@n%dmgX%T>6I)CPL\n+]Urj`Y)#++%Qm-*-aBui"tF)t0`2nJtY).-31_pR05jnA6%U[*`Tk"c>6==iIE`;anTi*KjN%pA8NPp%XS4^PlX4&8toFF%=E+leAi=PM>]0bN%p'j%!5Dk,7VFXgRq$CgTAXQQO9>+AR4cYJ[[MA@@L``1n`?#OpW?^S(>;B=N7"%V,d^Ir>TYR#;1I\U;(.TrtPM0>8j,CL##:11/Y=#"T5p:G=qEO=1jJ\RO0"-Z8@V&BDV(\Le3on1,l[f*nJ\^VR;UYhhXTG*+,RH%JsAo1Q:eVW2^]417V,%/C*Ai7,T=CX;EMhU7i;%!roN83`TT-B]08DA7j\d(Q<H@0H^LGC1Dg5$P,;KN4JY%Qa`K5LLd"'/_dScV%.Jut,jma/Lc^SFCYmV;(/5:2iGZ)U<.ndCnMc.[6)eBQeWUsj@l<RbTP/BO^eO9f0/4D*XQ<6<7/'tuXmr2K-AmmiNLFo)cq@]$L%m6J.`Q7A,9cs3,0e<_U<P#+S#j@Su-i_!C*oi5<FS?"4'_Ht;])@aR@cuKIgO\;Zl=]+r$qF7rnYG?Tm=5\dH#QBI$W-Kr6Ni@Vq%B+eibU;Iq'0Ra"O)\6>-rA2D*(]pH\T`T7]<TM.g0d9ScKDS7W/KcqG4lcAS?+=('8t96e!Vnmd5_24,"Q;^':`7AH/_,S2M;ELW%+<p(L6]mT>mRDoE8[fBM.aP3%FjPC#fq=Ml@0.Fk'So(@"![IK:l4^#\tqB[(/,E>%kc!q!`M?.;?N1=@&tfF3[NdYr2g>N`Nt6(%1=tLH<N\\b@Sg]kM+F&X>#eq(47fp6Y^Cj)3T%7T8)Gs`,I(M(MVJjKk%&HL3)pfcWLiSlQ)CJ&6[*"$]!r/@]O/M@IVtA])jr1$%N#)OFJ[/if,_A[looN`R$2/Lm;`ar_U9$hIAI0jj%%X5OPgGY(%'!a!Kna\t"n`$PR."TD;G8?05>7X8$e.(Z8sZ67<5KK2*'>f%%MH&=fj48ecC0?(?REkV#,m?\]lpi:@kS_!p0Wge[W#WB\d#BLf"bO`$VM2Z6Mn6YiV-MXSTkAK:*8Lh;[oGsdD6%'-etpUg6^d"o%MkXI4QhPC$cS*W(q;H:3!fO&6X4q-32dFON)_.^%a-\LtP9=K,W!)SMBQ/bYb\U[+L0&%s,?mH+W1"D%c"MZ%b%h"f_[k#JiXOCg%+1tIWDF*!cS=2kNEE>_j-I4q'1dD9=1^0&6QZg*/U"=qqa\LX:g=/H)ikZ]$[e><95;`#_@8$)mae7f'D-7RI6o3qMb0m"9na"7!%X49N>NM\rk=U$Ms[tF=V?kF:OARi4W`ZukM+q1qOTuW*@dtS_m%mj-S2T&_(9Ha%^N?\T[.040p\ICAY@DcJ\-F2$$l:_Js(V-b)%$gA9K\R:+"6b3mX>/h8ZF=0+2i2B8PAgp?E5q:=a<%4X;7jW4<,41G&,J/'O&!D,[=J>T2@OX):g4Kcq@o`p`Cn4.7fOZK@[D];u%M*l9$_-1HM=qGjtg)O*;2nbkBhGRubB&>qWk)_2i?C&HD[?e>e<l(8q(Fkfl1DYeDA'[j-BI(+\'=b)H[ogPD<O6HA)[`'?%Y\%h%kfa>pcW%;)\:!FlCa+!./5a6//%2hV875'362Mj;hNYOaCb2W=gk,opPo'WbpL"pe8_-laZ'Lg*i$Z\omLsQ^K.rSK(#U0F0JUGU%R'BO:`hJ!=+;.(((C]J9S6XJ!?o>$iRW4dZ"]HZAN.>k+6ZP@8i=Tb+BMA-YXC5]FjX-7W`=9N*/sAV[?rO:-<XP/afM%C'2PkAi%KS<Q@dVLO9/ZicE,Ra2nR?Bn>`KV#0'#BaH][GdLeZha_juTVQ?=lCQObRY6j)7j"dfr`*7@jd[;OA>aQL5UuCuq\*0%E;[<a@ru%fMG\*%2l<2o.lq[2U"U`bp,UdF#J\ab$\[H_hh>,3gD$)K2?5k.\'JZLu*@Kj=%-T[%d)s"ScSE5*CKNNG1.`)Hm@Kc>+aWSC);L%6#i]54e+'GXE!L&7MCh#-;-LO@Yj6Hc#BT=k#`YW8d#/dZ^.#\[Es(/72,Om79&)e[<#"(go-Qop:bFlCsr+k>e/'..oRV-+fcR9%P`4f-`U5Rq&`)0H1=_Fk#(U;ilq\YsEI*VUeQugDe@tc\Y]&\Eq_5Y4g8_LK-"^;Ke^gj!dC%?4issXSAC_OF2tYX/2P][sS]GU_%-(P`WW*lS^%#gjX$:s9`Wt<^ZJ6b#@N3KZ#1^gOp$H,sGhZs=r0u35\6TU682MMN,Y9>o"qjE--Yd-g89:uQ"TS*^STaYom_ZEp]%Q[.h2Jb5dl70^Xb!OKIqK*%F<H0/j-IOH?0;m+/7:$4316/qL,;h:5g$Yt<g5^(Y8C"%0#i&\'&$aGr$5*Hd:XV;HE$n`j5g$qBp%Yi<NpbfsHZYB2>nW\7/B;OOqLI3aG;c=$JM@M`7Af/7)NJR!iT;((L'),r(K1b86DbKune>.Zf^"9hhU^6Vg*#)&guR4Q1NGr[:W%08HEep7ZD.(M#hp</XH1S(<2M9<N=dBldP>%1;D7%M$f3ZDYOS"fdD^_r*+ZBJ)ucg)TP3@cd;91Bn.8()Bj#1!ctI9X1NqZ+%/)%HfmH]'h.KM)aE+a3s)HQWOFiJ68#pIV2ZZSLG*U)F1'*;n<PaO)\e[4%Vj\<%kK;SG*(S/^;*l4XQ:FfR\g/<H$rrX'aEBG]j!MM%elSM\QCJONjC"r)#--]R/9EPO0N<b^^=\;qhs2eZ%"&e\-Z",fL\T0]6P3?5'`@".Tu[/LVq]!O.(_NO@fb$d6t;7M(>4X%\Mc!t%N,lV<[%@oH>5"Y.RL2`85qTB!2/O<kpX=rii9%Ph.h(2m.j,`Xc6#@q`^+$k[jInZGot&<iu-XCWl7&;HqerK.Cum\Mfm24<U=Q<%j<NQMY?8e>^96G[foQ/':tYm%at?<B<Za-$KA/4f-8:rAY"^T0<u,]^?uV\tN828-Y`H%>@u#_YBbubH-[l]qc"8-W8Ce/AZ8r-0%PH5WXl!&q@-WkADC?SZ!-)=W:+sXB#pBQ.PDV*simWMW36ScSI8<4Mt60E2$J_S7kK7$rl2K_b9)J4kZ!T\F&Q<r^i/jaNdJ\We^%I_.((p3Wlg]ln6%f>&63l6Yiee>ekD\ZegfgY5!>:rb[DCTnctaP8rqQecf)mheQu,u!n5!T>*Nkm@lXBFUE4L2qqog_r\+21i.:%*RaVL;/5M&4,hrEQ_N!n:N%#M_ceXu9"[5ipoNE?76l2EGWNj<TLtdlPG'nks'Php_j,<EirN/taI=%X#TB_k4F/__^4'1f@6c1E%l3EULA4:BEG#gX@_/XjFa#,VRU0B'NRnJND\Cs-h_V.<LA5_HD0OM&93DRlB:j8MaWN.I5W<*)?%+@E6=U5T8'C*o:<hqrHXm0&h%;hA><=n1]"[h=f$8V18<kTrN^\TjNH/+AM=jg*'b`^nHl4jtSU322bT3FXWloTGj[Kt.:s*@Ago"(`Kjf5?T5>jJ=8f8AL?j.c.J%nUs3E/KdPK1$9=6,G;Q5;XPNq:(Um]8.[g_dE=b##u[0qR0-&Q''?u/-V:Lhd;-/<.Z$*EPD"nD.r+s`S&3D2I#S,2mqWEKm:Dj#%B.t,`,`.R&-V5uWoNUFEfln&GH0gA?3]a*5<ZrC:4EY41AE=#&DE4pYmR.j3q4d`1dpg&K1-E<?#L07r])'4d#S9V2H!Wf`&Km=B%KCg!&,(rCN=%YI=oiW')Ie_8(H&0i&3t)_eU_U[)BK:SjD=:GU1?Nki?Cns$:'?PTJa:!5Z<74Q!kKr=;5B-.QB33Xi?FTu-LsZn%*,5Th0nsRTT;RYQ;VqSj:U^gpTG@rrjUXjaS;SYscW-_@(&%,\_WA#E;AD6EJqTg)8LjE-7d!&X!iM;S'3K3/Da%:hgAQUV&P60+%MF!Mhn1ZP0:geYE[E,",gD6CkqR<W]*8-8Nl@>-ePT%"p)6W/m(,f%`pkcnKK+`Oje/)5?0kd8tq<:8;Bpjc^R7B6[<GVFDgUJo0%r`oUMY"1`$r7\4)j-/=:%diilo-M\`*rki?\'SS\@.;+-(*SpVD22Wtri*h/l0C@=G&>^AmCY0Z)'RWM0>mT4\@#2&$"a^rkV*Lf%AeX;EBL27dp9AG`Y=q"Veg25L5URc5^.hS@J+K05V#'$UAd!5QFRL6lB6W<;8=<*=&4%m'XIi*)dd<qOk7E)?$L?ZhV1Q/3^$D3R%O@/f/*Ra>%Qc+I+7lDTj4(.MMSV^%=$P?nR!hk70XI:XF`:aY]n77'p\1U:>B<"g-eJe/cGqI3RnNt@th]UnNZdW*UQ%Pk.dfMXD%P6m:qeP;c03bCb"<"V'm*bCU^rB/QqJFL^Ll&4JpLriFknqg+?U;5"UoG:BJOWr5/5B`9[+S1sPBpPuCdQXA>NH=`u_T$A(D(bhT%B5M7gq.mLfL&ZZH:g8I:\";'MT'!uaF7$JM4Z6mUQB1o6kcUfldI4-6$u*76S"4-."YZVH`u`L/6/'$j#sTnRIWNpGXB>Se2+P=S%[t!f7ha>m4;145gB69GTA;@Ugn3"MMgW`embq4^:.pp0C4Dfg$g,M)R5-([KA/92B>d<tG-uYUnp$$@;Lf#rZg(%.VmUbWoT3ehQ%P%)UI-9ODZg*]nm>#UEGK?h$uqDm/!D:;.<AfQm-HqH:\T;nBY)9Rq[\)ta^&'sCHNiX9jmX)k*+a+oW^qE](<Cl$3j2Y:/;th7&%D*e,i)p,cE]lHfM"k"5jC?OtqrOi*)ESYQ<f#W&Fc<Ko:H0\&H1hFgFHlD7eME[[!A#WeoC_+d/m<Ef"Wde[%_hZXpgs5HCkiML-%q&cBtkj7I,+/AW+ne18K5/WTZm!<bpHZ_K/Da%M+KdBR7]fnCLm)=;C03/Y!EW~>%AI9_PrivateDataEnd